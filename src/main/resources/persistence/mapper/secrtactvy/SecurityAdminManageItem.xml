<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.skshieldus.esecurity.repository.secrtactvy.SecurityAdminManageItemRepository">


	<!-- 구성원 보안 위규자 조회 - coEmpViolationList (ASIS : dmCoEmp_Violation_List_S ) -->
	<select id="coEmpViolationList" parameterType="Map" resultType="CamelHashMap">
		/* IO: insNet.secrtActvy.secrtadmin.DU_CoEmp_Violation_Admin_dmCoEmp_Violation_List_S_2012-10-29T08:54:55(2012-12-06T09:47:45) */
		/* 구성원 보안 위규자 조회 - coEmpViolationList */
		<![CDATA[
		SELECT
			TB.*
		FROM (
					SELECT
							ROW_NUMBER() OVER(ORDER BY OFEND_DT DESC, OFEND_TM DESC) AS ROW_NUM
							,T.*
					FROM (
								SELECT
											A.SC_DOC_NO
											,B.SC_CORR_PLAN_NO
											,A.COMP_ID
											,A.DEPT_ID
											,A.JW_ID
											,A.EMP_ID
											,FN_GET_EMP_NM(A.EMP_ID) as REG_EMP_NM
											,A.OFEND_COMP_ID
											,A.OFEND_DEPT_ID
											,A.OFEND_JW_ID
											,A.OFEND_EMP_ID
											,A.OFEND_TEL_NO
											,FN_GET_COMP_NM(A.OFEND_COMP_ID) as COMP_NM
											,FN_GET_DEPT_NM(A.OFEND_DEPT_ID) as DEPT_NM
											,FN_GET_EMP_NM(A.OFEND_EMP_ID) as EMP_NM
											,FN_GET_EMP_JW_NM(A.OFEND_EMP_ID) as EMP_JW_NM
											,SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) as OFEND_DT
											,CASE
												WHEN LENGTH(A.OFEND_TM) = 4
												THEN SUBSTR(A.OFEND_TM, 1,2) || ' : ' ||SUBSTR(A.OFEND_TM, 3,2)
												ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ' : ' || SUBSTR(A.OFEND_TM, 2,2)
											END OFEND_TM
											,A.OFEND_GBN
											,(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN) AS OFEND_GBN_NM
											,A.OFEND_DETAIL_GBN
											,(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN) AS OFEND_DETAIL_GBN_NM
											,A.CORR_PLAN_SEND_YN
											,FN_GET_CODE('C010', A.CORR_PLAN_SEND_YN, '') as CORR_PLAN_SEND_YN_NM
											,AD.DOC_ID
											,CASE
												WHEN A.CORR_PLAN_SEND_YN = 'C0101003'
												THEN '1003'
												ELSE NVL(AD.APPR_STAT, '99')
											END as APPR_STAT
											,CASE
												WHEN A.CORR_PLAN_SEND_YN = 'C0101003'
												THEN '1003'
												ELSE NVL(AD.APPR_RESULT, '99')
											END as APPR_RESULT
											,CASE
												WHEN A.CORR_PLAN_SEND_YN = 'C0101003'
												THEN '해당없음'
											ELSE
													CASE
														WHEN AD.APPR_STAT = '0' THEN '대기'
														WHEN AD.APPR_STAT = '10' THEN '진행'
														WHEN AD.APPR_STAT = '20' THEN '완료'
														WHEN NVL(AD.APPR_STAT, 'N') = 'N' THEN '미작성'
													END
											END as APPR_STAT_NM
											,CASE
												WHEN A.CORR_PLAN_SEND_YN = 'C0101003'
												THEN '해당없음'
												ELSE
													CASE
														WHEN AD.APPR_RESULT = '0' THEN '검토중'
														WHEN AD.APPR_RESULT = '1' THEN '승인'
														WHEN AD.APPR_RESULT = '2' THEN '부결'
														WHEN AD.APPR_RESULT = '3' THEN '장기미결'
														WHEN NVL(AD.APPR_RESULT, 'N') = 'N' THEN '미작성'
													END
											END as APPR_RESULT_NM
											,FN_GET_COMP_NM(A.OFEND_COMP_ID) AS COMP_NM2
											,A.DIV_CD_CP AS DIV_CD_CP
											,FN_GET_CODE('F004', A.DIV_CD_CP, '') AS DIV_CD_CP_NM
											,SUBSTR(REPLACE(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, ';')-1 ), '\', '/'), 1, INSTR(REPLACE(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, ';')-1 ), '\', '/'),'L_SCOFEND')-1 ) as FILE_PATH_ADDR
											,SUBSTR(A.FILE_PATH, INSTR(A.FILE_PATH, 'L_SCOFEND')) as FILE_PATH_NM
											,SUBSTR(A.FILE_PATH, INSTR(A.FILE_PATH, ';')+1) as FILE_PATH_ID
											,TO_CHAR(A.ACT_DTM,'YYYY-MM-DD HH24:MI') AS ACT_DTM
											,TO_CHAR(A.ACT_DTM,'YYYY-MM-DD') AS ACT_DT
											,TO_CHAR(A.ACT_DTM,'HH24:MI') AS ACT_TM
											,FN_GET_CODE('C028', A.ACT_DO, '') as ACT_DO_NM
											,CO.EMP_NM AS SC_EMP_NM
											,CASE WHEN A.ACT_DTM IS NULL THEN ''
													ELSE
													    CASE WHEN A.ACT_DO = 'C0280002' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '시정계획서 제출'
																WHEN A.ACT_DO = 'C0280002' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '시정계획서 미제출'
																WHEN A.ACT_DO = 'C0280003' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '개선계획서 제출'
																WHEN A.ACT_DO = 'C0280003' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '개선계획서 미제출'
																WHEN A.ACT_DO = 'C0280004' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '징계의뢰 계획서 제출'
																WHEN A.ACT_DO = 'C0280004' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '징계의뢰 계획서 미제출'
																ELSE '해당없음'
															END
											END AS CORR_PLAN_YN
											,B.SEND_DTM
											,CASE WHEN A.ACT_DTM IS NULL THEN ''
													WHEN A.OFEND_DT > '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101003' THEN '해당없음'
													WHEN  A.OFEND_DT > '20151109' AND B.SEND_DTM IS NOT NULL AND  A.CORR_PLAN_SEND_YN = 'C0101001' THEN TO_CHAR((B.SEND_DTM-DECODE(AD.APPR_RESULT, '2', B.MOD_DTM, A.ACT_DTM)),'9999')||'일 경과'
													WHEN  A.OFEND_DT > '20151109' AND B.SEND_DTM IS NULL AND  A.CORR_PLAN_SEND_YN = 'C0101002' THEN TO_CHAR((SYSDATE-DECODE(AD.APPR_RESULT, '2', B.MOD_DTM, A.ACT_DTM)),'9999')||'일 경과'
													WHEN  A.OFEND_DT <= '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN TO_CHAR(B.SEND_DTM-TO_DATE(A.OFEND_DT,'YYYY-MM-DD'),'9999')||'일 경과'
													WHEN  A.OFEND_DT <= '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN TO_CHAR(SYSDATE-TO_DATE(A.OFEND_DT,'YYYY-MM-DD'),'9999')||'일 경과'
													WHEN  A.OFEND_DT <= '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101003' THEN '해당없음'
													ELSE ''
											END  AS PASS_DATE /* 20151109 전자결재및 보안위규 신규 서비스 시점 */
											,CASE WHEN A.EXCEED_MAIL_SEND_YN ='Y' THEN '발송' ELSE '미발송' END AS EXCEED_MAIL_SEND_YN
								FROM
								SC_OFEND A
								]]>
								LEFT JOIN (SELECT DECODE(A.CORR_PLAN_SEND_YN,'C0101001',B.MOD_DTM,'') AS SEND_DTM, B.* FROM SC_CORR_PLAN B, SC_OFEND A WHERE A.SC_DOC_NO = B.SC_DOC_NO ) B
								ON B.SC_DOC_NO = A.SC_DOC_NO
								AND B.DEL_YN = 'N'
								LEFT JOIN AP_DOC AD
								ON AD.DOC_ID = B.DOC_ID
								<if test="not @org.springframework.util.StringUtils@isEmpty(detlEmpId)">
									LEFT JOIN SC_DETL_EMP SC
									ON SC.COMP_ID = CASE WHEN A.ACT_COMP_ID = '1105000001' OR A.ACT_COMP_ID = '1106000001' THEN '1102000001'
									WHEN A.ACT_COMP_ID = '1107000001' THEN '1108000001'
									ELSE NVL(A.ACT_COMP_ID, '1101000001')
									END
									AND SC.DETL_CD = NVL(A.MOBILE_FORENSICS_GBN, A.OFEND_DETAIL_GBN)
									AND SC.EMP_ID  = #{detlEmpId}
								</if>
								<if test="@org.springframework.util.StringUtils@isEmpty(detlEmpId)">
									LEFT JOIN SC_DETL_EMP SC
									ON SC.COMP_ID = CASE WHEN A.ACT_COMP_ID = '1105000001' OR A.ACT_COMP_ID = '1106000001' THEN '1102000001'
									WHEN A.ACT_COMP_ID = '1107000001' THEN '1108000001'
									ELSE NVL(A.ACT_COMP_ID, '1101000001')
									END
									AND SC.DETL_CD = NVL(A.MOBILE_FORENSICS_GBN, A.OFEND_DETAIL_GBN)
								</if>
								LEFT JOIN CO_EMP CO
								ON CO.EMP_ID  = SC.EMP_ID
								WHERE  A.DEL_YN = 'N'
								<if test="not @org.springframework.util.StringUtils@isEmpty(searchCompId)">
									AND A.OFEND_COMP_ID = #{searchCompId}
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
									<![CDATA[	AND REPLACE(A.OFEND_DT, '-', '') >= REPLACE(#{searchStrtDt}, '-', '') ]]>
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
									<![CDATA[	AND REPLACE(A.OFEND_DT, '-', '') <= REPLACE(#{searchEndDt}, '-', '') ]]>
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(adminYn)">
									<if test='"N".equals(adminYn)'>
								  AND A.EMP_ID = #{searchEmpId}
									</if>
									<if test='"T".equals(adminYn)'>
								  AND A.DEPT_ID = #{searchDeptId}
									</if>
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(ofendGbn)">
								  AND A.OFEND_GBN = #{ofendGbn}
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(ofendDetailGbn)">
								  AND A.OFEND_DETAIL_GBN = #{ofendDetailGbn}
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(corrPlanSendYn)">
									<if test='"C0101001".equals(corrPlanSendYn)'>
								  	AND A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
									</if>
									<if test='"C0101002".equals(corrPlanSendYn)'>
										AND A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
									</if>
									<if test='"C0101003".equals(corrPlanSendYn)'>
										AND A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
									</if>
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
									/* 진행상태 */
									<if test='"10".equals(applStat)'>
										/* 검토중 */
										AND AD.APPR_STAT = #{APPL_STAT}
									</if>
									<if test='"20".equals(applStat)'>
										/* 처리완료 */
										AND AD.APPR_STAT = #{APPL_STAT}
									</if>
									<if test='"1".equals(applStat)'>
										/* 승인 */
										AND AD.APPR_STAT = #{APPL_STAT}
									</if>
									<if test='"2".equals(applStat)'>
										/* 부결 */
										AND AD.APPR_STAT = #{APPL_STAT}
									</if>
								</if>

								<if test='not @org.springframework.util.StringUtils@isEmpty(deadLIneYn) and "Y".equals(deadLIneYn)'>
									AND A.ACT_DO ='C0280004'
									AND A.CORR_PLAN_SEND_YN ='C0101002'
									<![CDATA[ AND SYSDATE-TO_DATE(A.OFEND_DT,'YYYY-MM-DD') >= 14 ]]>
								</if>

								ORDER BY SC_DOC_NO DESC
								) T
								WHERE 1=1
								<if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
									AND	EMP_NM like '%' || #{searchEmpNm} || '%'
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(searchInputEmpNm)">
									AND	REG_EMP_NM like '%' || #{searchInputEmpNm} || '%'
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
									AND DEPT_NM like '%' || #{searchDeptNm} || '%'
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
									<if test='"1003".equals(applStat)'>
										/* 관련없음 */
										AND APPR_STAT = #{applStat}
									</if>
								</if>
								) TB
						WHERE ROW_NUM BETWEEN ( (#{pageIndex} - 1) * #{pageSize}) + 1 AND ( (#{pageIndex} - 1) * #{pageSize}) + #{pageSize}

	</select>

	<select id="coEmpViolationListCnt" parameterType="Map" resultType="Integer">
		/* IO: insNet.secrtActvy.secrtadmin.DU_CoEmp_Violation_Admin_dmCoEmp_Violation_List_Count_S_2012-10-29T08:54:55(2012-12-06T09:43:21) */
		/* 구성원 보안 위규자 조회갯수 - coEmpViolationListCnt */
		<![CDATA[
		SELECT
			COUNT(*)
		FROM (
					SELECT
							ROW_NUMBER() OVER(ORDER BY OFEND_DT DESC, OFEND_TM DESC) AS ROW_NUM
							,T.*
					FROM (
								SELECT
											A.SC_DOC_NO
											,B.SC_CORR_PLAN_NO
											,A.COMP_ID
											,A.DEPT_ID
											,A.JW_ID
											,A.EMP_ID
											,FN_GET_EMP_NM(A.EMP_ID) as REG_EMP_NM
											,A.OFEND_COMP_ID
											,A.OFEND_DEPT_ID
											,A.OFEND_JW_ID
											,A.OFEND_EMP_ID
											,A.OFEND_TEL_NO
											,FN_GET_COMP_NM(A.OFEND_COMP_ID) as COMP_NM
											,FN_GET_DEPT_NM(A.OFEND_DEPT_ID) as DEPT_NM
											,FN_GET_EMP_NM(A.OFEND_EMP_ID) as EMP_NM
											,FN_GET_EMP_JW_NM(A.OFEND_EMP_ID) as EMP_JW_NM
											,SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) as OFEND_DT
											,CASE
												WHEN LENGTH(A.OFEND_TM) = 4
												THEN SUBSTR(A.OFEND_TM, 1,2) || ' : ' ||SUBSTR(A.OFEND_TM, 3,2)
												ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ' : ' || SUBSTR(A.OFEND_TM, 2,2)
											END OFEND_TM
											,A.OFEND_GBN
											,(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN) AS OFEND_GBN_NM
											,A.OFEND_DETAIL_GBN
											,(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN) AS OFEND_DETAIL_GBN_NM
											,A.CORR_PLAN_SEND_YN
											,FN_GET_CODE('C010', A.CORR_PLAN_SEND_YN, '') as CORR_PLAN_SEND_YN_NM
											,AD.DOC_ID
											,CASE
												WHEN A.CORR_PLAN_SEND_YN = 'C0101003'
												THEN '1003'
												ELSE NVL(AD.APPR_STAT, '99')
											END as APPR_STAT
											,CASE
												WHEN A.CORR_PLAN_SEND_YN = 'C0101003'
												THEN '1003'
												ELSE NVL(AD.APPR_RESULT, '99')
											END as APPR_RESULT
											,CASE
												WHEN A.CORR_PLAN_SEND_YN = 'C0101003'
												THEN '해당없음'
											ELSE
													CASE
														WHEN AD.APPR_STAT = '0' THEN '대기'
														WHEN AD.APPR_STAT = '10' THEN '진행'
														WHEN AD.APPR_STAT = '20' THEN '완료'
														WHEN NVL(AD.APPR_STAT, 'N') = 'N' THEN '미작성'
													END
											END as APPR_STAT_NM
											,CASE
												WHEN A.CORR_PLAN_SEND_YN = 'C0101003'
												THEN '해당없음'
												ELSE
													CASE
														WHEN AD.APPR_RESULT = '0' THEN '검토중'
														WHEN AD.APPR_RESULT = '1' THEN '승인'
														WHEN AD.APPR_RESULT = '2' THEN '부결'
														WHEN AD.APPR_RESULT = '3' THEN '장기미결'
														WHEN NVL(AD.APPR_RESULT, 'N') = 'N' THEN '미작성'
													END
											END as APPR_RESULT_NM
											,FN_GET_COMP_NM(A.OFEND_COMP_ID) AS COMP_NM2
											,A.DIV_CD_CP AS DIV_CD_CP
											,FN_GET_CODE('F004', A.DIV_CD_CP, '') AS DIV_CD_CP_NM
											,SUBSTR(REPLACE(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, ';')-1 ), '\', '/'), 1, INSTR(REPLACE(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, ';')-1 ), '\', '/'),'L_SCOFEND')-1 ) as FILE_PATH_ADDR
											,SUBSTR(A.FILE_PATH, INSTR(A.FILE_PATH, 'L_SCOFEND')) as FILE_PATH_NM
											,SUBSTR(A.FILE_PATH, INSTR(A.FILE_PATH, ';')+1) as FILE_PATH_ID
											,TO_CHAR(A.ACT_DTM,'YYYY-MM-DD HH24:MI') AS ACT_DTM
											,TO_CHAR(A.ACT_DTM,'YYYY-MM-DD') AS ACT_DT
											,TO_CHAR(A.ACT_DTM,'HH24:MI') AS ACT_TM
											,FN_GET_CODE('C028', A.ACT_DO, '') as ACT_DO_NM
											,CO.EMP_NM AS SC_EMP_NM
											,CASE WHEN A.ACT_DTM IS NULL THEN ''
													ELSE
													    CASE WHEN A.ACT_DO = 'C0280002' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '시정계획서 제출'
																WHEN A.ACT_DO = 'C0280002' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '시정계획서 미제출'
																WHEN A.ACT_DO = 'C0280003' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '개선계획서 제출'
																WHEN A.ACT_DO = 'C0280003' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '개선계획서 미제출'
																WHEN A.ACT_DO = 'C0280004' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '징계의뢰 계획서 제출'
																WHEN A.ACT_DO = 'C0280004' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '징계의뢰 계획서 미제출'
																ELSE '해당없음'
															END
											END AS CORR_PLAN_YN
											,B.SEND_DTM
											,CASE WHEN A.ACT_DTM IS NULL THEN ''
													WHEN A.OFEND_DT > '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101003' THEN '해당없음'
													WHEN  A.OFEND_DT > '20151109' AND B.SEND_DTM IS NOT NULL AND  A.CORR_PLAN_SEND_YN = 'C0101001' THEN TO_CHAR((B.SEND_DTM-DECODE(AD.APPR_RESULT, '2', B.MOD_DTM, A.ACT_DTM)),'9999')||'일 경과'
													WHEN  A.OFEND_DT > '20151109' AND B.SEND_DTM IS NULL AND  A.CORR_PLAN_SEND_YN = 'C0101002' THEN TO_CHAR((SYSDATE-DECODE(AD.APPR_RESULT, '2', B.MOD_DTM, A.ACT_DTM)),'9999')||'일 경과'
													WHEN  A.OFEND_DT <= '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN TO_CHAR(B.SEND_DTM-TO_DATE(A.OFEND_DT,'YYYY-MM-DD'),'9999')||'일 경과'
													WHEN  A.OFEND_DT <= '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN TO_CHAR(SYSDATE-TO_DATE(A.OFEND_DT,'YYYY-MM-DD'),'9999')||'일 경과'
													WHEN  A.OFEND_DT <= '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101003' THEN '해당없음'
													ELSE ''
											END  AS PASS_DATE /* 20151109 전자결재및 보안위규 신규 서비스 시점 */
											,CASE WHEN A.EXCEED_MAIL_SEND_YN ='Y' THEN '발송' ELSE '미발송' END AS EXCEED_MAIL_SEND_YN
											FROM
											SC_OFEND A
											]]>
											LEFT JOIN (SELECT DECODE(A.CORR_PLAN_SEND_YN,'C0101001',B.MOD_DTM,'') AS SEND_DTM, B.* FROM SC_CORR_PLAN B, SC_OFEND A WHERE A.SC_DOC_NO = B.SC_DOC_NO ) B
											ON B.SC_DOC_NO = A.SC_DOC_NO
											AND B.DEL_YN = 'N'
											LEFT JOIN AP_DOC AD
											ON AD.DOC_ID = B.DOC_ID
											<if test="not @org.springframework.util.StringUtils@isEmpty(detlEmpId)">
												LEFT JOIN SC_DETL_EMP SC
												ON SC.COMP_ID = CASE WHEN A.ACT_COMP_ID = '1105000001' OR A.ACT_COMP_ID = '1106000001' THEN '1102000001'
												WHEN A.ACT_COMP_ID = '1107000001' THEN '1108000001'
												ELSE NVL(A.ACT_COMP_ID, '1101000001')
												END
												AND SC.DETL_CD = NVL(A.MOBILE_FORENSICS_GBN, A.OFEND_DETAIL_GBN)
												AND SC.EMP_ID  = #{detlEmpId}
											</if>
											<if test="@org.springframework.util.StringUtils@isEmpty(detlEmpId)">
												LEFT JOIN SC_DETL_EMP SC
												ON SC.COMP_ID = CASE WHEN A.ACT_COMP_ID = '1105000001' OR A.ACT_COMP_ID = '1106000001' THEN '1102000001'
												WHEN A.ACT_COMP_ID = '1107000001' THEN '1108000001'
												ELSE NVL(A.ACT_COMP_ID, '1101000001')
												END
												AND SC.DETL_CD = NVL(A.MOBILE_FORENSICS_GBN, A.OFEND_DETAIL_GBN)
											</if>
											LEFT JOIN CO_EMP CO
											ON CO.EMP_ID  = SC.EMP_ID
											WHERE  A.DEL_YN = 'N'
											<if test="not @org.springframework.util.StringUtils@isEmpty(searchCompId)">
												AND A.OFEND_COMP_ID = #{searchCompId}
											</if>
											<if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
												<![CDATA[	AND REPLACE(A.OFEND_DT, '-', '') >= REPLACE(#{searchStrtDt}, '-', '') ]]>
											</if>
											<if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
												<![CDATA[	AND REPLACE(A.OFEND_DT, '-', '') <= REPLACE(#{searchEndDt}, '-', '') ]]>
											</if>
											<if test="not @org.springframework.util.StringUtils@isEmpty(adminYn)">
												<if test='"N".equals(adminYn)'>AND
													A.EMP_ID = #{searchEmpId}
												</if>
												<if test='"T".equals(adminYn)'>AND
													A.DEPT_ID = #{searchDeptId}
												</if>
											</if>
											<if test="not @org.springframework.util.StringUtils@isEmpty(ofendGbn)">
												AND A.OFEND_GBN = #{ofendGbn}
											</if>
											<if test="not @org.springframework.util.StringUtils@isEmpty(ofendDetailGbn)">
												AND A.OFEND_DETAIL_GBN = #{ofendDetailGbn}
											</if>
											<if test="not @org.springframework.util.StringUtils@isEmpty(corrPlanSendYn)">
												<if test='"C0101001".equals(corrPlanSendYn)'>
													AND A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
												</if>
												<if test='"C0101002".equals(corrPlanSendYn)'>
													AND A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
												</if>
												<if test='"C0101003".equals(corrPlanSendYn)'>
													AND A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
												</if>
											</if>
											<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
												/* 진행상태 */
												<if test='"10".equals(applStat)'>
													/* 검토중 */
													AND AD.APPR_STAT = #{APPL_STAT}
												</if>
												<if test='"20".equals(applStat)'>
													/* 처리완료 */
													AND AD.APPR_STAT = #{APPL_STAT}
												</if>
												<if test='"1".equals(applStat)'>
													/* 승인 */
													AND AD.APPR_STAT = #{APPL_STAT}
												</if>
												<if test='"2".equals(applStat)'>
													/* 부결 */
													AND AD.APPR_STAT = #{APPL_STAT}
												</if>
											</if>

											<if test='not @org.springframework.util.StringUtils@isEmpty(deadLIneYn) and "Y".equals(deadLIneYn)'>
												AND A.ACT_DO ='C0280004'
												AND A.CORR_PLAN_SEND_YN ='C0101002'
												<![CDATA[ AND SYSDATE-TO_DATE(A.OFEND_DT,'YYYY-MM-DD') >= 14 ]]>
											</if>

											ORDER BY SC_DOC_NO DESC
											) T
											WHERE 1=1
											<if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
												AND	EMP_NM like '%' || #{searchEmpNm} || '%'
											</if>
											<if test="not @org.springframework.util.StringUtils@isEmpty(searchInputEmpNm)">
												AND	REG_EMP_NM like '%' || #{searchInputEmpNm} || '%'
											</if>
											<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
												AND DEPT_NM like '%' || #{searchDeptNm} || '%'
											</if>
											<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
												<if test='"1003".equals(applStat)'>
													/* 관련없음 */
													AND APPR_STAT = #{applStat}
												</if>
											</if>
										) TB
	</select>

	<!-- 구성원 보안 위규자 조회 엑셀다운 - coEmpViolationListExcel (ASIS : dmCoEmp_Violation_List_Excel_S ) -->
	<select id="coEmpViolationListExcel" parameterType="Map" resultType="CamelHashMap">
	/* 구성원 보안 위규자 조회 엑셀다운 - coEmpViolationListExcel */
		<![CDATA[
		SELECT
			TB.*
		FROM (
					SELECT
							ROW_NUMBER() OVER(ORDER BY OFEND_DT DESC, OFEND_TM DESC) AS ROW_NUM
							,T.*
					FROM (
								SELECT
											A.SC_DOC_NO
											,B.SC_CORR_PLAN_NO
											,A.COMP_ID
											,A.DEPT_ID
											,A.JW_ID
											,A.EMP_ID
											,FN_GET_EMP_NM(A.EMP_ID) as REG_EMP_NM
											,A.OFEND_COMP_ID
											,A.OFEND_DEPT_ID
											,A.OFEND_JW_ID
											,A.OFEND_EMP_ID
											,A.OFEND_TEL_NO
								     	,CASE WHEN A.ACT_COMP_ID = '1101000001' THEN '이천'
														WHEN A.ACT_COMP_ID = '1102000001' THEN '청주'
														WHEN A.ACT_COMP_ID = '1108000001' THEN '분당'
														WHEN A.ACT_COMP_ID = '1103000001' THEN '영동'
														ELSE ''
											 END  AS ACT_COMP_NM
											,FN_GET_COMP_NM(A.OFEND_COMP_ID) as COMP_NM
											,FN_GET_DEPT_NM(A.OFEND_DEPT_ID) as DEPT_NM
											,FN_GET_EMP_NM(A.OFEND_EMP_ID) as EMP_NM
											,FN_GET_EMP_JW_NM(A.OFEND_EMP_ID) as EMP_JW_NM
								     	,FN_GET_JW_NM(A.OFEND_JW_ID) as JW_NM
											,SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) as OFEND_DT
											,CASE
												WHEN LENGTH(A.OFEND_TM) = 4
												THEN SUBSTR(A.OFEND_TM, 1,2) || ' : ' ||SUBSTR(A.OFEND_TM, 3,2)
												ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ' : ' || SUBSTR(A.OFEND_TM, 2,2)
											END OFEND_TM
											,A.OFEND_GBN
											,(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN) AS OFEND_GBN_NM
											,A.OFEND_DETAIL_GBN
											,(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN) AS OFEND_DETAIL_GBN_NM
											,A.CORR_PLAN_SEND_YN
											,FN_GET_CODE('C010', A.CORR_PLAN_SEND_YN, '') as CORR_PLAN_SEND_YN_NM
											,AD.DOC_ID
											,CASE
												WHEN A.CORR_PLAN_SEND_YN = 'C0101003'
												THEN '1003'
												ELSE NVL(AD.APPR_STAT, '99')
											END as APPR_STAT
											,CASE
												WHEN A.CORR_PLAN_SEND_YN = 'C0101003'
												THEN '1003'
												ELSE NVL(AD.APPR_RESULT, '99')
											END as APPR_RESULT
											,CASE
												WHEN A.CORR_PLAN_SEND_YN = 'C0101003'
												THEN '해당없음'
											ELSE
													CASE
														WHEN AD.APPR_STAT = '0' THEN '대기'
														WHEN AD.APPR_STAT = '10' THEN '진행'
														WHEN AD.APPR_STAT = '20' THEN '완료'
														WHEN NVL(AD.APPR_STAT, 'N') = 'N' THEN '미작성'
													END
											END as APPR_STAT_NM
											,CASE
												WHEN A.CORR_PLAN_SEND_YN = 'C0101003'
												THEN '해당없음'
												ELSE
													CASE
														WHEN AD.APPR_RESULT = '0' THEN '검토중'
														WHEN AD.APPR_RESULT = '1' THEN '승인'
														WHEN AD.APPR_RESULT = '2' THEN '부결'
														WHEN AD.APPR_RESULT = '3' THEN '장기미결'
														WHEN NVL(AD.APPR_RESULT, 'N') = 'N' THEN '미작성'
													END
											END as APPR_RESULT_NM
								     ,TO_CHAR(A.ACT_DTM,'YYYY-MM-DD') AS ACT_DAY
             					,TO_CHAR(A.ACT_DTM,'HH24:MI') AS ACT_TTMM
											,FN_GET_COMP_NM(A.OFEND_COMP_ID) AS COMP_NM2
											,A.DIV_CD_CP AS DIV_CD_CP
											,FN_GET_CODE('F004', A.DIV_CD_CP, '') AS DIV_CD_CP_NM
											,SUBSTR(REPLACE(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, ';')-1 ), '\', '/'), 1, INSTR(REPLACE(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, ';')-1 ), '\', '/'),'L_SCOFEND')-1 ) as FILE_PATH_ADDR
											,SUBSTR(A.FILE_PATH, INSTR(A.FILE_PATH, 'L_SCOFEND')) as FILE_PATH_NM
											,SUBSTR(A.FILE_PATH, INSTR(A.FILE_PATH, ';')+1) as FILE_PATH_ID
											,TO_CHAR(A.ACT_DTM,'YYYY-MM-DD HH24:MI') AS ACT_DTM
											,TO_CHAR(A.ACT_DTM,'YYYY-MM-DD') AS ACT_DT
											,TO_CHAR(A.ACT_DTM,'HH24:MI') AS ACT_TM
											,FN_GET_CODE('C028', A.ACT_DO, '') as ACT_DO_NM
											,CO.EMP_NM AS SC_EMP_NM
											,CASE WHEN A.ACT_DTM IS NULL THEN ''
                  			ELSE CASE WHEN A.ACT_DO = 'C0280002' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '시정계획서 제출'
                            WHEN A.ACT_DO = 'C0280002' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '시정계획서 미제출'
                            WHEN A.ACT_DO = 'C0280003' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '개선계획서 제출'
                            WHEN A.ACT_DO = 'C0280003' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '개선계획서 미제출'
                            ELSE '해당없음'
                        END
                  		 END AS CORR_PLAN_YN
											,DECODE(A.ACT_DO, 'C0280001', '해당없음', TO_CHAR(B.SEND_DTM,'yyyy-MM-dd')) AS SEND_DTM
											,CASE WHEN A.ACT_DTM IS NULL THEN ''
														WHEN A.OFEND_DT >'20151109' AND A.CORR_PLAN_SEND_YN = 'C0101003' THEN '해당없음'
														WHEN  A.OFEND_DT >'20151109' AND B.SEND_DTM IS NOT NULL AND  A.CORR_PLAN_SEND_YN = 'C0101001' THEN TO_CHAR((B.SEND_DTM-DECODE(AD.APPR_RESULT, '2', B.MOD_DTM, A.ACT_DTM)),'9999')||'일 경과'
														WHEN  A.OFEND_DT >'20151109' AND B.SEND_DTM IS NULL AND  A.CORR_PLAN_SEND_YN = 'C0101002' THEN TO_CHAR((SYSDATE-DECODE(AD.APPR_RESULT, '2', B.MOD_DTM, A.ACT_DTM)),'9999')||'일 경과'
														WHEN  A.OFEND_DT <= '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN TO_CHAR(B.SEND_DTM-TO_DATE(A.OFEND_DT,'YYYY-MM-DD'),'9999')||'일 경과'
														WHEN  A.OFEND_DT <= '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN TO_CHAR(SYSDATE-TO_DATE(A.OFEND_DT,'YYYY-MM-DD'),'9999')||'일 경과'
														WHEN  A.OFEND_DT <= '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101003' THEN '해당없음'
														ELSE ''
											 END  AS PASS_DATE /* 20151109 전자결재및 보안위규 신규 서비스 시점 */
											,CASE WHEN A.OFEND_DT >'20151109' AND A.CORR_PLAN_SEND_YN = 'C0101003' THEN '해당없음'
														WHEN  A.OFEND_DT >'20151109' AND B.SEND_DTM IS NOT NULL AND  A.CORR_PLAN_SEND_YN = 'C0101001' THEN CASE WHEN TO_CHAR((B.SEND_DTM-DECODE(AD.APPR_RESULT, '2', B.MOD_DTM, A.ACT_DTM)),'9999') > 14 THEN '초과' ELSE '미초과' END
														WHEN  A.OFEND_DT >'20151109' AND B.SEND_DTM IS NULL AND  A.CORR_PLAN_SEND_YN = 'C0101002' THEN CASE WHEN TO_CHAR((SYSDATE-DECODE(AD.APPR_RESULT, '2', B.MOD_DTM, A.ACT_DTM)),'9999') > 14 THEN '초과' ELSE '미초과' END
														WHEN  A.OFEND_DT <= '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN CASE WHEN TO_CHAR(B.SEND_DTM-TO_DATE(A.OFEND_DT,'YYYY-MM-DD'),'9999') > 14 THEN '초과' ELSE '미초과' END
														WHEN  A.OFEND_DT <= '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN CASE WHEN TO_CHAR(SYSDATE-TO_DATE(A.OFEND_DT,'YYYY-MM-DD'),'9999') > 14 THEN '초과' ELSE '미초과' END
														WHEN  A.OFEND_DT <= '20151109' AND A.CORR_PLAN_SEND_YN = 'C0101003' THEN '해당없음'
											ELSE '해당없음'   END  AS OVER_14_YN /* 14일 초과 여부 */
											,A.ACT_GATE
											,NVL(FN_GET_CODE('C060',A.MOBILE_FORENSICS_GBN,''),'해당없음') AS MOBILE_FORENSICS_GBN_NM
											,A.SEC_MAN_NM
											,( SELECT DETL_NM FROM CO_CODE_D WHERE DETL_CD = A.ACT_BLDG   AND ETC4 = A.ACT_COMP_ID AND GRP_CD = 'C063') AS ACT_BLDG_NM
											,( SELECT DETL_NM FROM CO_CODE_D WHERE DETL_CD = A.ACT_LOCATE AND ETC4 = A.ACT_BLDG AND GRP_CD = 'C064') AS ACT_LOCATE_NM
											,A.ETC_RSN
								FROM
								SC_OFEND A
								]]>
		LEFT JOIN (SELECT DECODE(A.CORR_PLAN_SEND_YN,'C0101001',B.MOD_DTM,'') AS SEND_DTM, B.* FROM SC_CORR_PLAN B, SC_OFEND A WHERE A.SC_DOC_NO = B.SC_DOC_NO ) B
		ON B.SC_DOC_NO = A.SC_DOC_NO
		AND B.DEL_YN = 'N'
		LEFT JOIN AP_DOC AD
		ON AD.DOC_ID = B.DOC_ID
		<if test="not @org.springframework.util.StringUtils@isEmpty(detlEmpId)">
			LEFT JOIN SC_DETL_EMP SC
			ON SC.COMP_ID = CASE WHEN A.ACT_COMP_ID = '1105000001' OR A.ACT_COMP_ID = '1106000001' THEN '1102000001'
			WHEN A.ACT_COMP_ID = '1107000001' THEN '1108000001'
			ELSE NVL(A.ACT_COMP_ID, '1101000001')
			END
			AND SC.DETL_CD = NVL(A.MOBILE_FORENSICS_GBN, A.OFEND_DETAIL_GBN)
			AND SC.EMP_ID  = #{detlEmpId}
		</if>
		<if test="@org.springframework.util.StringUtils@isEmpty(detlEmpId)">
			LEFT JOIN SC_DETL_EMP SC
			ON SC.COMP_ID = CASE WHEN A.ACT_COMP_ID = '1105000001' OR A.ACT_COMP_ID = '1106000001' THEN '1102000001'
			WHEN A.ACT_COMP_ID = '1107000001' THEN '1108000001'
			ELSE NVL(A.ACT_COMP_ID, '1101000001')
			END
			AND SC.DETL_CD = NVL(A.MOBILE_FORENSICS_GBN, A.OFEND_DETAIL_GBN)
		</if>
		LEFT JOIN CO_EMP CO
		ON CO.EMP_ID  = SC.EMP_ID
		WHERE  A.DEL_YN = 'N'
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchCompId)">
			AND A.OFEND_COMP_ID = #{searchCompId}
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
			<![CDATA[	AND REPLACE(A.OFEND_DT, '-', '') >= REPLACE(#{searchStrtDt}, '-', '') ]]>
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
			<![CDATA[	AND REPLACE(A.OFEND_DT, '-', '') <= REPLACE(#{searchEndDt}, '-', '') ]]>
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(adminYn)">
			<if test='"N".equals(adminYn)'>AND
				A.EMP_ID = #{searchEmpId}
			</if>
			<if test='"T".equals(adminYn)'>AND
				A.DEPT_ID = #{searchDeptId}
			</if>
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(ofendGbn)">
			AND A.OFEND_GBN = #{ofendGbn}
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(ofendDetailGbn)">
			AND A.OFEND_DETAIL_GBN = #{ofendDetailGbn}
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(corrPlanSendYn)">
			<if test='"C0101001".equals(corrPlanSendYn)'>
				AND A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
			</if>
			<if test='"C0101002".equals(corrPlanSendYn)'>
				AND A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
			</if>
			<if test='"C0101003".equals(corrPlanSendYn)'>
				AND A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
			</if>
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
			/* 진행상태 */
			<if test='"10".equals(applStat)'>
				/* 검토중 */
				AND AD.APPR_STAT = #{APPL_STAT}
			</if>
			<if test='"20".equals(applStat)'>
				/* 처리완료 */
				AND AD.APPR_STAT = #{APPL_STAT}
			</if>
			<if test='"1".equals(applStat)'>
				/* 승인 */
				AND AD.APPR_STAT = #{APPL_STAT}
			</if>
			<if test='"2".equals(applStat)'>
				/* 부결 */
				AND AD.APPR_STAT = #{APPL_STAT}
			</if>
		</if>

		<if test='not @org.springframework.util.StringUtils@isEmpty(deadLIneYn) and "Y".equals(deadLIneYn)'>
			AND A.ACT_DO ='C0280004'
			AND A.CORR_PLAN_SEND_YN ='C0101002'
			<![CDATA[ AND SYSDATE-TO_DATE(A.OFEND_DT,'YYYY-MM-DD') >= 14 ]]>
		</if>

		ORDER BY SC_DOC_NO DESC
		) T
		WHERE 1=1
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
			AND	EMP_NM like '%' || #{searchEmpNm} || '%'
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchInputEmpNm)">
			AND	REG_EMP_NM like '%' || #{searchInputEmpNm} || '%'
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
			AND DEPT_NM like '%' || #{searchDeptNm} || '%'
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
			<if test='"1003".equals(applStat)'>
				/* 관련없음 */
				AND APPR_STAT = #{applStat}
			</if>
		</if>
		) TB
	</select>
	
	<!-- 담당자 List - scDetlEmpList (ASIS : dmScDetlEmpList ) -->
	<select id="scDetlEmpList" parameterType="Map" resultType="CamelHashMap">
		/* 담당자 List */
		SELECT
		    DISTINCT A.EMP_ID AS DETL_CD
		    ,B.EMP_NM AS DETL_NM
		FROM 
		    SC_DETL_EMP A
		    ,CO_EMP B
		WHERE A.EMP_ID = B.EMP_ID   
        AND A.DEL_YN = 'N'
		ORDER BY B.EMP_NM
	</select>
	
	<!-- 구성원 보안 위규자 조회 상세 - coEmpViolationView (ASIS : dmSecrtCorrPlan_View_S ) -->
	<select id="coEmpViolationView" parameterType="Map" resultType="CamelHashMap">
		/* 구성원 보안 위규자 조회 상세 - coEmpViolationView */
		/* IO: insNet.secrtActvy.secrtcorrplan.DU_SecrtCorrPlan_Manage_dmSecrtCorrPlan_View_S_2012-10-29T13:38:39(2012-11-29T16:30:16) */
		<![CDATA[
		SELECT
				A.SC_DOC_NO
				,B.SC_CORR_PLAN_NO
				,A.COMP_ID
				,A.DEPT_ID
				,A.JW_ID
				,A.EMP_ID
				,FN_GET_COMP_NM(A.COMP_ID) as COMP_NM
				,FN_GET_DEPT_NM(A.DEPT_ID) as DEPT_NM
				,FN_GET_JW_NM(A.JW_ID) as JW_NM
				,FN_GET_EMP_NM(A.EMP_ID) as EMP_NM
				,A.OFEND_COMP_ID
				,A.OFEND_DEPT_ID
				,A.OFEND_JW_ID
				,A.OFEND_EMP_ID
				,FN_GET_COMP_NM(A.OFEND_COMP_ID) as OFEND_COMP_NM
				,FN_GET_DEPT_NM(A.OFEND_DEPT_ID) as OFEND_DEPT_NM
				,FN_GET_JW_NM(A.OFEND_JW_ID) as OFEND_JW_NM
				,FN_GET_EMP_NM(A.OFEND_EMP_ID) as OFEND_EMP_NM
				,A.OFEND_TEL_NO
				,SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) as OFEND_DT
				,CASE
						WHEN LENGTH(A.OFEND_TM) = 4
						THEN SUBSTR(A.OFEND_TM, 1,2) || ' : ' ||SUBSTR(A.OFEND_TM, 3,2)
						ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ' : ' || SUBSTR(A.OFEND_TM, 2,2)
				END OFEND_TM
				,A.OFEND_GBN
				,(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN) as OFEND_GBN_NM
				,A.OFEND_DETAIL_GBN
				,(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_DETAIL_GBN) as OFEND_DETAIL_GBN_NM
				,A.CORR_PLAN_SEND_YN
				,FN_GET_CODE('C010', A.CORR_PLAN_SEND_YN, '') as CORR_PLAN_SEND_YN_NM
				,B.POINT_CONTENT
				,B.SC_CONTENT
				,B.ETC_CONTENT
				,B.IMPR_CONTENT
				,A.ETC_RSN
				,A.FILE_PATH AS FILES
				,NVL(A.FILE_PATH, 'N') as N_FILE_PATH
				,SUBSTR(A.FILE_PATH, INSTR(A.FILE_PATH, ';')+1) AS N_FILE_PATH_NM
				,REPLACE(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, '\', -1)), '\', '/') AS N_FILE_PATH_ADDR
				,SUBSTR(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, ';')-1), INSTR(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, ';')-1), '\', -1)+1) AS N_FILE_PATH_ID
				,A.ACT_DO
				,A.RMRK
				,(SELECT F.RMRK FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN) AS OFEND_RMRK
				,A.OFEND_SUB_GBN
				,(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.GRP_CD = 'C059' AND F.ETC1 = A.OFEND_DETAIL_GBN AND F.DETL_CD = A.OFEND_SUB_GBN) AS OFEND_SUB_GBN_NM
				,A.MOBILE_FORENSICS_GBN
				,NVL(FN_GET_CODE('C060',A.MOBILE_FORENSICS_GBN,''),'해당사항없음') AS MOBILE_FORENSICS_GBN_NM
				/*,NVL(C.APPRLINE_CNT, 0) as APPRLINE_CNT*/
				,A.ACT_BLDG
				,A.ACT_LOCATE
				,A.ACT_GATE
				,A.SEC_MAN_NM
				,NVL(A.ACT_COMP_ID, '1101000001') AS ACT_COMP_ID
				,(SELECT DETL_NM FROM CO_CODE_D WHERE DETL_CD = A.ACT_BLDG   AND ETC4 = A.ACT_COMP_ID AND GRP_CD = 'C063') AS ACT_BLDG_NM
				,(SELECT DETL_NM FROM CO_CODE_D WHERE DETL_CD = A.ACT_LOCATE AND ETC4 = A.ACT_BLDG AND GRP_CD = 'C064') AS ACT_LOCATE_NM
				,(SELECT DETL_NM FROM CO_CODE_D WHERE GRP_CD = 'A030' AND ETC1 = A.ACT_COMP_ID) AS ACT_COMP_NM
				, A.AA_EMP_ID
				,(SELECT DEPT_ID FROM CO_EMP AA WHERE AA.EMP_ID=AA_EMP_ID) AS AA_DEPT_ID
				,(SELECT JW_ID FROM CO_EMP AA WHERE AA.EMP_ID=AA_EMP_ID) AS AA_JW_ID
				,(SELECT FN_GET_JW_NM(JW_ID) FROM CO_EMP AA WHERE AA.EMP_ID=AA_EMP_ID) AS AA_JW_NM
				,(SELECT FN_GET_EMP_NM(EMP_ID) FROM CO_EMP AA WHERE AA.EMP_ID=AA_EMP_ID) AS AA_EMP_NM
				,(SELECT FN_GET_EMP_NM(EMP_ID) FROM CO_EMP AA WHERE AA.EMP_ID=KA_EMP_ID) AS KA_EMP_NM
				,(SELECT FN_GET_EMP_NM(EMP_ID) FROM CO_EMP AA WHERE AA.EMP_ID=GA_EMP_ID) AS GA_EMP_NM
		FROM
		SC_OFEND A
		,SC_CORR_PLAN B
		,(SELECT DOC_ID, APPR_RESULT, APPR_STAT FROM AP_DOC ) AD
		WHERE A.SC_DOC_NO = B.SC_DOC_NO(+)
		AND A.DOC_ID = AD.DOC_ID (+)
		AND A.DEL_YN = 'N'
		AND B.DEL_YN(+) = 'N'
		]]>
		<if test="not @org.springframework.util.StringUtils@isEmpty(scDocNo)">
			<![CDATA[
            AND A.SC_DOC_NO = #{scDocNo}
			]]>
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(scCorrPlanNo)">
					AND B.SC_CORR_PLAN_NO(+) = #{scCorrPlanNo}
		</if>
	</select>
	
	<!-- 구성원 보안 위규자 조치현황 - coEmpViolationActSumList (ASIS : dmSecCoEmp_Violation_ActSum_List_S ) -->
	<select id="coEmpViolationActSumList" parameterType="Map" resultType="CamelHashMap">
		/* 구성원 보안 위규자 조치현황 - coEmpViolationActSumList */
		WITH T AS (
			<![CDATA[
		    SELECT
		         TO_CHAR(TO_DATE(REPLACE(#{ofendDt}, '-', ''),'yyyymmdd'),'q') || '분기' AS QT_NM
		        ,SUBSTR(REPLACE(#{ofendDt}, '-', ''),1,4) AS YYYY 
		        ,TO_CHAR(TRUNC(TO_DATE(REPLACE(#{ofendDt}, '-', ''),'yyyymmdd'),'q'),'yyyymmdd') AS S_QT
		        ,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(REPLACE(#{ofendDt}, '-', ''),'yyyymmdd'),'q')-1, 3), 'yyyymmdd') AS E_QT
		        ,CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE,'YYYY')-1 || '.09' ELSE TO_CHAR(SYSDATE, 'yyyy')  || '.09' END || ' ~ ' ||
		         CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE, 'YYYY')  || '.08' ELSE TO_CHAR(SYSDATE,'YYYY')+1 || '.08' END 
		         AS FT_DT
		        ,CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE,'YYYY')-1 || '0901' ELSE TO_CHAR(SYSDATE, 'yyyy')  || '0901' END AS FROM_DT
		        ,CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE, 'YYYY')  || '0831' ELSE TO_CHAR(SYSDATE,'YYYY')+1 || '0831' END AS TO_DT           
		    FROM DUAL
		    ]]>
		)
		SELECT
		     T.YYYY
		    ,T.FT_DT  AS YQ_GB
		    ,'전체' AS GB
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280001', 1, 0)),0) AS CNT1 
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280002', 1, 0)),0) AS CNT2
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280003', 1, 0)),0) AS CNT3
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280004', 1, 0)),0) AS CNT4
		FROM SC_OFEND A, T T 
		WHERE A.OFEND_DT BETWEEN T.FROM_DT AND T.TO_DT
		AND A.ACT_DO IS NOT NULL
		AND A.OFEND_EMP_ID = #{ofendEmpId}
		AND A.DEL_YN = 'N'
		UNION ALL
		SELECT
		     T.YYYY
		    ,T.FT_DT  AS YQ_GB
		    ,'동일' AS GB
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280001', 1, 0)),0) AS CNT1 
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280002', 1, 0)),0) AS CNT2
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280003', 1, 0)),0) AS CNT3
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280004', 1, 0)),0) AS CNT4
		FROM SC_OFEND A, T T 
		WHERE A.OFEND_DT BETWEEN T.FROM_DT AND T.TO_DT
		AND A.ACT_DO IS NOT NULL
		AND A.OFEND_EMP_ID = #{ofendEmpId}
		AND A.OFEND_DETAIL_GBN = #{ofendDetailGbn}
		AND A.DEL_YN = 'N'
		UNION ALL
		SELECT
		     T.YYYY
		    ,T.QT_NM AS YQ_GB
		    ,'전체' AS GB
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280001', 1, 0)),0) AS CNT1 
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280002', 1, 0)),0) AS CNT2
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280003', 1, 0)),0) AS CNT3
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280004', 1, 0)),0) AS CNT4
		FROM SC_OFEND A, T T
		WHERE A.OFEND_DT BETWEEN T.S_QT AND T.E_QT
		AND A.ACT_DO IS NOT NULL
		AND A.OFEND_EMP_ID = #{ofendEmpId}
		AND A.DEL_YN = 'N'
		UNION ALL
		SELECT
		     T.YYYY
		    ,T.QT_NM AS YQ_GB
		    ,'동일' AS GB
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280001', 1, 0)),0) AS CNT1 
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280002', 1, 0)),0) AS CNT2
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280003', 1, 0)),0) AS CNT3
		    ,NVL(SUM(DECODE(A.ACT_DO, 'C0280004', 1, 0)),0) AS CNT4
		FROM SC_OFEND A, T T
		WHERE A.OFEND_DT BETWEEN T.S_QT AND T.E_QT
		AND A.ACT_DO IS NOT NULL
		AND A.OFEND_EMP_ID = #{ofendEmpId}
		AND A.OFEND_DETAIL_GBN = #{ofendDetailGbn}
		AND A.DEL_YN = 'N'
	</select>
	
	<!-- 구성원 보안 위규자 삭제 - secrtCorrPlanOfendDelete (ASIS : dmSecrtCorrPan_OFEND_D ) -->
	<update id="secrtCorrPlanOfendDelete" parameterType="Map" >
		/* 구성원 보안 위규자 삭제 - secrtCorrPlanOfendDelete  */
		UPDATE
			SC_OFEND
		SET
			 DEL_YN = 'Y'
			,DEL_RSN = NVL(#{delRsn}, '')
			,AC_IP = #{acIp}
			,MOD_BY = #{empId}
			,MOD_DTM = SYSDATE
		WHERE 1=1
		<if test="not @org.springframework.util.StringUtils@isEmpty(scDocNo)">
			AND SC_DOC_NO = #{scDocNo}
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(docId)">
			AND DOC_ID = #{docId}
		</if>
	</update>
	
	<!-- 구성원 보안 위규자 삭제(문서) - secrtCorrPlanDocDelete (ASIS : dmSecrtCorrPan_DOC_D ) -->
	<update id="secrtCorrPlanDocDelete" parameterType="Map" >
		/* 구성원 보안 위규자 삭제(문서) - secrtCorrPlanDocDelete */
		UPDATE
			SC_CORR_PLAN
		SET
			DEL_YN = 'Y'
			,AC_IP = #{acIp}
			,MOD_BY = #{empId}
			,MOD_DTM = SYSDATE
		WHERE 1=1
		<if test="not @org.springframework.util.StringUtils@isEmpty(scCorrPlanNo)">
			AND SC_CORR_PLAN_NO = #{scCorrPlanNo}
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(scDocNo)">
			AND SC_DOC_NO = #{scDocNo}
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(docId)">
			AND DOC_ID = #{docId}
		</if>
	</update>
	
	<!-- 외부인 보안 위규자 조회 - ioEmpViolationList (ASIS : dmIoEmp_Violation_List_S ) -->
	<select id="ioEmpViolationList" parameterType="Map" resultType="CamelHashMap">
		/* 외부인 보안 위규자 조회 - ioEmpViolationList */
		/* IO: insNet.secrtActvy.secrtadmin.DU_IoEmp_Violation_Admin_dmIoEmp_Violation_List_S_2012-10-30T16:22:08(2012-11-23T09:27:55) */
		<![CDATA[
		SELECT
				TB.*
		FROM (
				SELECT
						ROW_NUMBER() OVER(ORDER BY SC_IO_DOC_NO DESC) AS ROW_NUM
						,T.*
						,(SELECT DETL_NM FROM CO_CODE_D WHERE GRP_CD = 'A030' AND ETC1 = T.ACT_COMP_ID) AS ACT_COMP_ID_NM
				FROM (
							SELECT
										A.SC_IO_DOC_NO
										,B.SC_IO_CORR_PLAN_NO
										,A.COMP_ID
										,FN_GET_COMP_NM(A.COMP_ID) as REG_COMP_NM
										,A.DEPT_ID
										,A.JW_ID
										,A.EMP_ID
										,FN_GET_EMP_NM(A.EMP_ID) as REG_EMP_NM
										,A.OFEND_COMP_ID
										,FN_GET_IO_COMP_KO_NM(A.OFEND_COMP_ID) as OFEND_COMP_NM
										,A.OFEND_EMP_ID
										,FN_GET_IO_EMP_NM(A.OFEND_EMP_ID) as OFEND_EMP_NM
										,A.OFEND_TEL_NO
										,SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) as OFEND_DT
										,CASE
												WHEN LENGTH(A.OFEND_TM) = 4
												THEN SUBSTR(A.OFEND_TM, 1,2) || ' : ' ||SUBSTR(A.OFEND_TM, 3,2)
												ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ' : ' || SUBSTR(A.OFEND_TM, 2,2)
										END OFEND_TM
										,A.OFEND_GBN
										,(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN) AS OFEND_GBN_NM
										,A.OFEND_DETAIL_GBN
										,(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN) AS OFEND_DETAIL_GBN_NM
										,A.CORR_PLAN_SEND_YN
										,FN_GET_CODE('C010', A.CORR_PLAN_SEND_YN, '') as CORR_PLAN_SEND_YN_NM
										,CASE WHEN A.ACT_DTM IS NULL THEN ''
												ELSE CASE  WHEN A.ACT_DO = 'C0280002' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '시정계획서 제출'
												WHEN A.ACT_DO = 'C0280002' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '시정계획서 미제출'
												WHEN A.ACT_DO = 'C0280006' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '시정공문 제출'
												WHEN A.ACT_DO = 'C0280006' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '시정공문 미제출'
													ELSE '해당없음'
													END
										END AS CORR_PLAN_YN
										,AD.DOC_ID
										,NVL(AD.APPR_STAT, '99') as APPR_STAT
										,NVL(AD.APPR_RESULT, '99') as APPR_RESULT
										,CASE
												WHEN AD.APPR_STAT = '0' THEN '대기'
												WHEN AD.APPR_STAT = '10' THEN '진행'
												WHEN AD.APPR_STAT = '20' THEN '완료'
												WHEN NVL(AD.APPR_STAT, 'N') = 'N' THEN '미작성'
												END as APPR_STAT_NM
										,CASE
												WHEN AD.APPR_RESULT = '0' THEN '검토중'
												WHEN AD.APPR_RESULT = '1' THEN '승인'
												WHEN AD.APPR_RESULT = '2' THEN '부결'
												WHEN AD.APPR_RESULT = '3' THEN '장기미결'
												WHEN NVL(AD.APPR_RESULT, 'N') = 'N' THEN '미작성'
										END as APPR_RESULT_NM
										,B.APPR_GBN
										,CASE
											WHEN NVL(A.ACT_DO, '*') = '*' THEN ''
											ELSE FN_GET_CODE('Z040', B.APPR_GBN, '')
										END APPR_GBN_NM
										,FN_GET_COMP_NM(A.COMP_ID) AS COMP_NM2
										,DIV_CD_CP
										,FN_GET_CODE('F004', A.DIV_CD_CP, '') as DIV_CD_CP_NM
										,(SELECT COUNT(*)
											FROM SC_IO_OFEND X
											WHERE X.OFEND_EMP_ID = A.OFEND_EMP_ID
											AND X.DEL_YN = 'N'
											AND X.OFEND_DT BETWEEN CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE,'YYYY')-1 || '0901' ELSE TO_CHAR(SYSDATE, 'yyyy')  || '0901' END
											AND     CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE, 'YYYY')  || '0831' ELSE TO_CHAR(SYSDATE,'YYYY')+1 || '0831' END
										) CT
										,(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.GRP_CD = 'C028' AND F.DETL_CD = A.ACT_DO) AS ACT_DO_NM
										, DECODE(A.CORR_PLAN_SEND_YN,'C0101001',NVL(TO_CHAR(B.PROP_DTM,'YYYY-MM-DD'),TO_CHAR(A.MOD_DTM,'YYYY-MM-DD')),'') AS PROP_DTM   /* 시정계획서 제출일 */
										, DECODE(A.CORR_PLAN_SEND_YN,'C0101001',NVL(TO_CHAR(B.PROP_DTM,'YYYY-MM-DD'),TO_CHAR(A.MOD_DTM,'YYYY-MM-DD')),'') AS PROP_DT   /* 시정계획서 제출일자 */
										, DECODE(A.CORR_PLAN_SEND_YN,'C0101001',NVL(TO_CHAR(B.PROP_DTM,'HH24 : MI'),TO_CHAR(A.MOD_DTM,'HH24 : MI')),'') AS PROP_TM   /* 시정계획서 제출시간 */
										, CASE WHEN NVL(A.ACT_DO, '*') = '*' THEN ''
										ELSE DECODE(NVL(A.DENY_STRT_DT, '*'), '*', '해당없음', TO_CHAR(TO_DATE(A.DENY_STRT_DT, 'yyyyMMdd'), 'yyyy-MM-dd') || '~' || TO_CHAR(TO_DATE(A.DENY_END_DT, 'yyyyMMdd'), 'yyyy-MM-dd'))
										END AS DENY_PERIOD /* 출입정지기간 */
										, A.ACT_COMP_ID
									FROM SC_IO_OFEND A
									LEFT JOIN SC_IO_CORR_PLAN B
									ON B.DEL_YN = 'N'
									AND A.SC_IO_DOC_NO = B.SC_IO_DOC_NO
									JOIN IO_COMP C
									ON C.IO_COMP_ID = A.OFEND_COMP_ID
									]]>
									<if test="not @org.springframework.util.StringUtils@isEmpty(ofendCompNm)">
									       AND C.COMP_KO_NM LIKE '%' || #{ofendCompNm} || '%'
									</if>
									LEFT OUTER JOIN SC_DETL_EMP SC
									ON SC.COMP_ID = A.ACT_COMP_ID
									AND SC.DETL_CD = NVL(A.MOBILE_FORENSICS_GBN, A.OFEND_DETAIL_GBN)
									<if test="not @org.springframework.util.StringUtils@isEmpty(detlEmpId)">
									       AND SC.EMP_ID = #{detlEmpId}
									</if>
									LEFT OUTER JOIN
									(SELECT DOC_ID, APPR_RESULT, APPR_STAT FROM AP_DOC) AD
									ON (AD.DOC_ID = B.DOC_ID)
									WHERE A.DEL_YN = 'N'
								<if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
									<![CDATA[ AND REPLACE(A.OFEND_DT, '-', '') >= REPLACE(#{searchStrtDt}, '-', '') ]]>
								</if>

								<if test="not @org.springframework.util.StringUtils@isEmpty(searchCompId)">
									AND A.COMP_ID = #{searchCompId}
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
									<![CDATA[  AND REPLACE(A.OFEND_DT, '-', '') <= REPLACE(#{searchEndDt}, '-', '') ]]>
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(ofendGbn)">AND
									A.OFEND_GBN = #{ofendGbn}
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(ofendDetailGbn)">AND
									A.OFEND_DETAIL_GBN = #{ofendDetailGbn}
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(corrPlanSendYn)">AND
									A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(applStatGbn)">AND
									B.APPR_GBN = #{applStatGbn}
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(regCompId)">
									<if test='"1102000001".equals(regCompId)'>
									  AND A.COMP_ID IN ('1102000001','1105000001','1106000001')
									</if>
									<if test='!"1102000001".equals(regCompId)'>
										A.COMP_ID = #{regCompId}
									</if>
								</if>
								<if test="not @org.springframework.util.StringUtils@isEmpty(actCompId)">
									AND A.ACT_COMP_ID = #{actCompId}
								</if>
				) T
				WHERE 1=1
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
					AND OFEND_EMP_NM like '%' || #{searchEmpNm} || '%'
				</if>
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchCt)">
					AND CT = #{searchCt}
				</if>
				) TB
				WHERE ROW_NUM BETWEEN ( (#{pageIndex} - 1) * #{pageSize}) + 1 AND ( (#{pageIndex} - 1) * #{pageSize}) + #{pageSize}
	</select>

	<select id="ioEmpViolationListCnt" parameterType="Map" resultType="Integer">
		/* 외부인 보안 위규자 조회 갯수- ioEmpViolationListCnt */
		<![CDATA[
		SELECT
				COUNT(*)
		FROM (
				SELECT
						ROW_NUMBER() OVER(ORDER BY SC_IO_DOC_NO DESC) AS ROW_NUM
						,T.*
						,(SELECT DETL_NM FROM CO_CODE_D WHERE GRP_CD = 'A030' AND ETC1 = T.ACT_COMP_ID) AS ACT_COMP_ID_NM
				FROM (
							SELECT
										A.SC_IO_DOC_NO
										,B.SC_IO_CORR_PLAN_NO
										,A.COMP_ID
										,FN_GET_COMP_NM(A.COMP_ID) as REG_COMP_NM
										,A.DEPT_ID
										,A.JW_ID
										,A.EMP_ID
										,FN_GET_EMP_NM(A.EMP_ID) as REG_EMP_NM
										,A.OFEND_COMP_ID
										,FN_GET_IO_COMP_KO_NM(A.OFEND_COMP_ID) as OFEND_COMP_NM
										,A.OFEND_EMP_ID
										,FN_GET_IO_EMP_NM(A.OFEND_EMP_ID) as OFEND_EMP_NM
										,A.OFEND_TEL_NO
										,SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) as OFEND_DT
										,CASE
												WHEN LENGTH(A.OFEND_TM) = 4
												THEN SUBSTR(A.OFEND_TM, 1,2) || ' : ' ||SUBSTR(A.OFEND_TM, 3,2)
												ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ' : ' || SUBSTR(A.OFEND_TM, 2,2)
										END OFEND_TM
										,A.OFEND_GBN
										,(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN) AS OFEND_GBN_NM
										,A.OFEND_DETAIL_GBN
										,(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN) AS OFEND_DETAIL_GBN_NM
										,A.CORR_PLAN_SEND_YN
										,FN_GET_CODE('C010', A.CORR_PLAN_SEND_YN, '') as CORR_PLAN_SEND_YN_NM
										,CASE WHEN A.ACT_DTM IS NULL THEN ''
												ELSE CASE  WHEN A.ACT_DO = 'C0280002' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '시정계획서 제출'
												WHEN A.ACT_DO = 'C0280002' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '시정계획서 미제출'
												WHEN A.ACT_DO = 'C0280006' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '시정공문 제출'
												WHEN A.ACT_DO = 'C0280006' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '시정공문 미제출'
													ELSE '해당없음'
													END
										END AS CORR_PLAN_YN
										,AD.DOC_ID
										,NVL(AD.APPR_STAT, '99') as APPR_STAT
										,NVL(AD.APPR_RESULT, '99') as APPR_RESULT
										,CASE
												WHEN AD.APPR_STAT = '0' THEN '대기'
												WHEN AD.APPR_STAT = '10' THEN '진행'
												WHEN AD.APPR_STAT = '20' THEN '완료'
												WHEN NVL(AD.APPR_STAT, 'N') = 'N' THEN '미작성'
												END as APPR_STAT_NM
										,CASE
												WHEN AD.APPR_RESULT = '0' THEN '검토중'
												WHEN AD.APPR_RESULT = '1' THEN '승인'
												WHEN AD.APPR_RESULT = '2' THEN '부결'
												WHEN AD.APPR_RESULT = '3' THEN '장기미결'
												WHEN NVL(AD.APPR_RESULT, 'N') = 'N' THEN '미작성'
										END as APPR_RESULT_NM
										,B.APPR_GBN
										,CASE
											WHEN NVL(A.ACT_DO, '*') = '*' THEN ''
											ELSE FN_GET_CODE('Z040', B.APPR_GBN, '')
										END APPR_GBN_NM
										,FN_GET_COMP_NM(A.COMP_ID) AS COMP_NM2
										,DIV_CD_CP
										,FN_GET_CODE('F004', A.DIV_CD_CP, '') as DIV_CD_CP_NM
										,(SELECT COUNT(*)
											FROM SC_IO_OFEND X
											WHERE X.OFEND_EMP_ID = A.OFEND_EMP_ID
											AND X.DEL_YN = 'N'
											AND X.OFEND_DT BETWEEN CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE,'YYYY')-1 || '0901' ELSE TO_CHAR(SYSDATE, 'yyyy')  || '0901' END
											AND     CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE, 'YYYY')  || '0831' ELSE TO_CHAR(SYSDATE,'YYYY')+1 || '0831' END
										) CT
										,(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.GRP_CD = 'C028' AND F.DETL_CD = A.ACT_DO) AS ACT_DO_NM
										, DECODE(A.CORR_PLAN_SEND_YN,'C0101001',NVL(TO_CHAR(B.PROP_DTM,'YYYY-MM-DD'),TO_CHAR(A.MOD_DTM,'YYYY-MM-DD')),'') AS PROP_DTM   /* 시정계획서 제출일 */
										, DECODE(A.CORR_PLAN_SEND_YN,'C0101001',NVL(TO_CHAR(B.PROP_DTM,'YYYY-MM-DD'),TO_CHAR(A.MOD_DTM,'YYYY-MM-DD')),'') AS PROP_DT   /* 시정계획서 제출일자 */
										, DECODE(A.CORR_PLAN_SEND_YN,'C0101001',NVL(TO_CHAR(B.PROP_DTM,'HH24 : MI'),TO_CHAR(A.MOD_DTM,'HH24 : MI')),'') AS PROP_TM   /* 시정계획서 제출시간 */
										, CASE WHEN NVL(A.ACT_DO, '*') = '*' THEN ''
										ELSE DECODE(NVL(A.DENY_STRT_DT, '*'), '*', '해당없음', TO_CHAR(TO_DATE(A.DENY_STRT_DT, 'yyyyMMdd'), 'yyyy-MM-dd') || '~' || TO_CHAR(TO_DATE(A.DENY_END_DT, 'yyyyMMdd'), 'yyyy-MM-dd'))
										END AS DENY_PERIOD /* 출입정지기간 */
										, A.ACT_COMP_ID
									FROM SC_IO_OFEND A
									LEFT JOIN SC_IO_CORR_PLAN B
									ON B.DEL_YN = 'N'
									AND A.SC_IO_DOC_NO = B.SC_IO_DOC_NO
									JOIN IO_COMP C
									ON C.IO_COMP_ID = A.OFEND_COMP_ID
									]]>
									<if test="not @org.springframework.util.StringUtils@isEmpty(ofendCompNm)">
										AND C.COMP_KO_NM LIKE '%' || #{ofendCompNm} || '%'
									</if>
									LEFT OUTER JOIN SC_DETL_EMP SC
									ON SC.COMP_ID = A.ACT_COMP_ID
									AND SC.DETL_CD = NVL(A.MOBILE_FORENSICS_GBN, A.OFEND_DETAIL_GBN)
									<if test="not @org.springframework.util.StringUtils@isEmpty(detlEmpId)">
										AND SC.EMP_ID = #{detlEmpId}
									</if>
									LEFT OUTER JOIN
									(SELECT DOC_ID, APPR_RESULT, APPR_STAT FROM AP_DOC) AD
									ON (AD.DOC_ID = B.DOC_ID)
									WHERE A.DEL_YN = 'N'
									<if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
										<![CDATA[ AND REPLACE(A.OFEND_DT, '-', '') >= REPLACE(#{searchStrtDt}, '-', '') ]]>
									</if>

									<if test="not @org.springframework.util.StringUtils@isEmpty(searchCompId)">
										AND A.COMP_ID = #{searchCompId}
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
										<![CDATA[  AND REPLACE(A.OFEND_DT, '-', '') <= REPLACE(#{searchEndDt}, '-', '') ]]>
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(ofendGbn)">AND
										A.OFEND_GBN = #{ofendGbn}
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(ofendDetailGbn)">AND
										A.OFEND_DETAIL_GBN = #{ofendDetailGbn}
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(corrPlanSendYn)">AND
										A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(applStatGbn)">AND
										B.APPR_GBN = #{applStatGbn}
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(regCompId)">
										<if test='"1102000001".equals(regCompId)'>
											AND A.COMP_ID IN ('1102000001','1105000001','1106000001')
										</if>
										<if test='!"1102000001".equals(regCompId)'>
											A.COMP_ID = #{regCompId}
										</if>
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(actCompId)">
										AND A.ACT_COMP_ID = #{actCompId}
									</if>
									) T
						WHERE 1=1
						<if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
							AND OFEND_EMP_NM like '%' || #{searchEmpNm} || '%'
						</if>
						<if test="not @org.springframework.util.StringUtils@isEmpty(searchCt)">
							AND CT = #{searchCt}
						</if>
						) TB
	</select>

	<!-- 외부인 보안 위규자 조회 엑셀다운로드 - ioEmpViolationListExcel (ASIS : dmIoEmp_Violation_List_Excel_S ) -->
	<select id="ioEmpViolationListExcel" parameterType="Map" resultType="CamelHashMap">
		/* 외부인 보안 위규자 조회 엑셀다운로드 - ioEmpViolationListExcel */
		/* IO: insNet.secrtActvy.secrtadmin.DU_IoEmp_Violation_Admin_dmIoEmp_Violation_List_Excel_S_2012-10-30T16:22:08(2017-03-13T15:46:53) */
		<![CDATA[
		SELECT
				TB.*
		FROM (
				SELECT
						ROW_NUMBER() OVER(ORDER BY SC_IO_DOC_NO DESC) AS ROW_NUM
						,T.*
						,(SELECT DETL_NM FROM CO_CODE_D WHERE GRP_CD = 'A030' AND ETC1 = T.ACT_COMP_ID) AS ACT_COMP_ID_NM
				FROM (
							SELECT
										A.SC_IO_DOC_NO
										,B.SC_IO_CORR_PLAN_NO
										,A.COMP_ID
										,FN_GET_COMP_NM(A.COMP_ID) as REG_COMP_NM
										,A.DEPT_ID
										,A.JW_ID
										,A.EMP_ID
										,FN_GET_EMP_NM(A.EMP_ID) as REG_EMP_NM
										,A.OFEND_COMP_ID
										,FN_GET_IO_COMP_KO_NM(A.OFEND_COMP_ID) as OFEND_COMP_NM
										,A.OFEND_EMP_ID
										,FN_GET_IO_EMP_NM(A.OFEND_EMP_ID) as OFEND_EMP_NM
										,A.OFEND_TEL_NO
										,SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) as OFEND_DT
										,CASE
												WHEN LENGTH(A.OFEND_TM) = 4
												THEN SUBSTR(A.OFEND_TM, 1,2) || ' : ' ||SUBSTR(A.OFEND_TM, 3,2)
												ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ' : ' || SUBSTR(A.OFEND_TM, 2,2)
										END OFEND_TM
										,A.OFEND_GBN
										,(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN) AS OFEND_GBN_NM
										,A.OFEND_DETAIL_GBN
										,(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN) AS OFEND_DETAIL_GBN_NM
										,A.CORR_PLAN_SEND_YN
										,FN_GET_CODE('C010', A.CORR_PLAN_SEND_YN, '') as CORR_PLAN_SEND_YN_NM
										,CASE WHEN A.ACT_DTM IS NULL THEN ''
												ELSE CASE  WHEN A.ACT_DO = 'C0280002' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '시정계획서 제출'
												WHEN A.ACT_DO = 'C0280002' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '시정계획서 미제출'
												WHEN A.ACT_DO = 'C0280006' AND A.CORR_PLAN_SEND_YN = 'C0101001' THEN '시정공문 제출'
												WHEN A.ACT_DO = 'C0280006' AND A.CORR_PLAN_SEND_YN = 'C0101002' THEN '시정공문 미제출'
													ELSE '해당없음'
													END
										END AS CORR_PLAN_YN
										,AD.DOC_ID
										,NVL(AD.APPR_STAT, '99') as APPR_STAT
										,NVL(AD.APPR_RESULT, '99') as APPR_RESULT
										,CASE
												WHEN AD.APPR_STAT = '0' THEN '대기'
												WHEN AD.APPR_STAT = '10' THEN '진행'
												WHEN AD.APPR_STAT = '20' THEN '완료'
												WHEN NVL(AD.APPR_STAT, 'N') = 'N' THEN '미작성'
												END as APPR_STAT_NM
										,CASE
												WHEN AD.APPR_RESULT = '0' THEN '검토중'
												WHEN AD.APPR_RESULT = '1' THEN '승인'
												WHEN AD.APPR_RESULT = '2' THEN '부결'
												WHEN AD.APPR_RESULT = '3' THEN '장기미결'
												WHEN NVL(AD.APPR_RESULT, 'N') = 'N' THEN '미작성'
										END as APPR_RESULT_NM
										,B.APPR_GBN
										,CASE
											WHEN NVL(A.ACT_DO, '*') = '*' THEN ''
											ELSE FN_GET_CODE('Z040', B.APPR_GBN, '')
										END APPR_GBN_NM
										,FN_GET_COMP_NM(A.COMP_ID) AS COMP_NM2
										,DIV_CD_CP
										,FN_GET_CODE('F004', A.DIV_CD_CP, '') as DIV_CD_CP_NM
										,(SELECT COUNT(*)
											FROM SC_IO_OFEND X
											WHERE X.OFEND_EMP_ID = A.OFEND_EMP_ID
											AND X.DEL_YN = 'N'
											AND X.OFEND_DT BETWEEN CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE,'YYYY')-1 || '0901' ELSE TO_CHAR(SYSDATE, 'yyyy')  || '0901' END
											AND     CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE, 'YYYY')  || '0831' ELSE TO_CHAR(SYSDATE,'YYYY')+1 || '0831' END
										) CT
										,(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.GRP_CD = 'C028' AND F.DETL_CD = A.ACT_DO) AS ACT_DO_NM
										, DECODE(A.CORR_PLAN_SEND_YN,'C0101001',NVL(TO_CHAR(B.PROP_DTM,'YYYY-MM-DD'),TO_CHAR(A.MOD_DTM,'YYYY-MM-DD')),'') AS PROP_DTM   /* 시정계획서 제출일 */
										, DECODE(A.CORR_PLAN_SEND_YN,'C0101001',NVL(TO_CHAR(B.PROP_DTM,'YYYY-MM-DD'),TO_CHAR(A.MOD_DTM,'YYYY-MM-DD')),'') AS PROP_DT   /* 시정계획서 제출일자 */
										, DECODE(A.CORR_PLAN_SEND_YN,'C0101001',NVL(TO_CHAR(B.PROP_DTM,'HH24 : MI'),TO_CHAR(A.MOD_DTM,'HH24 : MI')),'') AS PROP_TM   /* 시정계획서 제출시간 */
										, CASE WHEN NVL(A.ACT_DO, '*') = '*' THEN ''
										ELSE DECODE(NVL(A.DENY_STRT_DT, '*'), '*', '해당없음', TO_CHAR(TO_DATE(A.DENY_STRT_DT, 'yyyyMMdd'), 'yyyy-MM-dd') || '~' || TO_CHAR(TO_DATE(A.DENY_END_DT, 'yyyyMMdd'), 'yyyy-MM-dd'))
										END AS DENY_PERIOD /* 출입정지기간 */
										, A.ACT_COMP_ID
										, TO_CHAR(A.ACT_DTM, 'yyyy-MM-dd') AS ACT_YMD
            				, TO_CHAR(A.ACT_DTM, 'HH24:MM') AS ACT_HM
										, IE.JW_NM AS OFEND_JW_NM
										,CASE WHEN A.ACT_COMP_ID = '1101000001' THEN '이천'
													WHEN A.ACT_COMP_ID = '1102000001' THEN '청주'
													WHEN A.ACT_COMP_ID = '1108000001' THEN '분당'
													WHEN A.ACT_COMP_ID = '1103000001' THEN '영동'
													ELSE ''
										 END  AS ACT_COMP_NM
											,( SELECT DETL_NM FROM CO_CODE_D WHERE DETL_CD = A.ACT_BLDG   AND ETC4 = A.ACT_COMP_ID AND GRP_CD = 'C063') AS ACT_BLDG_NM
            					,( SELECT DETL_NM FROM CO_CODE_D WHERE DETL_CD = A.ACT_LOCATE AND ETC4 = A.ACT_BLDG AND GRP_CD = 'C064') AS ACT_LOCATE_NM
											 ,A.ACT_GATE
            				   ,A.SEC_MAN_NM
										   ,FN_GET_EMP_NM(SC.EMP_ID) AS GU_EMP_NM
												,CASE
												WHEN NVL(A.ACT_DO, '*') = '*' THEN ''
															WHEN A.CORR_PLAN_SEND_YN = 'C0101002' THEN TO_CHAR (SYSDATE - DECODE(B.APPR_GBN, 'Z0401002', B.MOD_DTM, A.ACT_DTM), '9999') /* 미제출 */
															WHEN A.CORR_PLAN_SEND_YN = 'C0101001' THEN TO_CHAR (NVL(B.PROP_DTM, SYSDATE) - DECODE(B.APPR_GBN, 'Z0401002', B.MOD_DTM, A.ACT_DTM), '9999') /* 제출완료 OR 제출일자 없는 경우 */
															ELSE '해당없음'
															END
													 AS LAP_DAYS
												, (SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_SUB_GBN) AS OFEND_SUB_GBN_NM
									FROM SC_IO_OFEND A
									LEFT JOIN SC_IO_CORR_PLAN B
									ON B.DEL_YN = 'N'
									AND A.SC_IO_DOC_NO = B.SC_IO_DOC_NO
									JOIN IO_COMP C
									ON C.IO_COMP_ID = A.OFEND_COMP_ID
									]]>
									<if test="not @org.springframework.util.StringUtils@isEmpty(ofendCompNm)">
										AND C.COMP_KO_NM LIKE '%' || #{ofendCompNm} || '%'
									</if>
									LEFT OUTER JOIN SC_DETL_EMP SC
									ON SC.COMP_ID = A.ACT_COMP_ID
									AND SC.DETL_CD = NVL(A.MOBILE_FORENSICS_GBN, A.OFEND_DETAIL_GBN)
									AND SC.COMP_ID = CASE WHEN A.ACT_COMP_ID = '1105000001' OR A.ACT_COMP_ID = '1106000001' THEN '1102000001'
									WHEN A.ACT_COMP_ID = '1107000001' THEN '1108000001'
									ELSE NVL(A.ACT_COMP_ID, '1101000001')
									END
									<if test="not @org.springframework.util.StringUtils@isEmpty(detlEmpId)">
										AND SC.EMP_ID = #{detlEmpId}
									</if>
									LEFT JOIN IO_EMP IE
									ON IE.IO_EMP_ID = A.OFEND_EMP_ID
									LEFT OUTER JOIN
									(SELECT DOC_ID, APPR_RESULT, APPR_STAT FROM AP_DOC) AD
									ON (AD.DOC_ID = B.DOC_ID)
									WHERE A.DEL_YN = 'N'
									<if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
										<![CDATA[ AND REPLACE(A.OFEND_DT, '-', '') >= REPLACE(#{searchStrtDt}, '-', '') ]]>
									</if>

									<if test="not @org.springframework.util.StringUtils@isEmpty(searchCompId)">
										AND A.COMP_ID = #{searchCompId}
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
										<![CDATA[  AND REPLACE(A.OFEND_DT, '-', '') <= REPLACE(#{searchEndDt}, '-', '') ]]>
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(ofendGbn)">AND
										A.OFEND_GBN = #{ofendGbn}
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(ofendDetailGbn)">AND
										A.OFEND_DETAIL_GBN = #{ofendDetailGbn}
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(corrPlanSendYn)">AND
										A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(applStatGbn)">AND
										B.APPR_GBN = #{applStatGbn}
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(regCompId)">
										<if test='"1102000001".equals(regCompId)'>
											AND A.COMP_ID IN ('1102000001','1105000001','1106000001')
										</if>
										<if test='!"1102000001".equals(regCompId)'>
											A.COMP_ID = #{regCompId}
										</if>
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(actCompId)">
										AND A.ACT_COMP_ID = #{actCompId}
									</if>
									) T
									WHERE 1=1
									<if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
										AND OFEND_EMP_NM like '%' || #{searchEmpNm} || '%'
									</if>
									<if test="not @org.springframework.util.StringUtils@isEmpty(searchCt)">
										AND CT = #{searchCt}
									</if>
									) TB
	</select>
	
	<!-- 외부인 보안 위규자 상세 - ioEmpViolationView (ASIS : dmSecrtIoCorrPlan_View_S ) -->
	<select id="ioEmpViolationView" parameterType="Map" resultType="CamelHashMap">
		/* 외부인 보안 위규자 상세 - ioEmpViolationView */
		<![CDATA[
			SELECT
					A.SC_IO_DOC_NO
					,B.SC_IO_CORR_PLAN_NO
					,A.COMP_ID
					,A.DEPT_ID
					,A.JW_ID
					,A.EMP_ID
					,A.OFEND_COMP_ID
					,A.OFEND_EMP_ID
					,FN_GET_IO_EMP_NM2(A.OFEND_EMP_ID) as OFEND_EMP_NM
					,(SELECT C.HP_NO FROM IO_EMP C WHERE C.IO_EMP_ID = A.OFEND_EMP_ID) OFEND_TEL_NO
					,SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) as OFEND_DT
					,CASE
					WHEN LENGTH(A.OFEND_TM) = 4
					THEN SUBSTR(A.OFEND_TM, 1,2) || ' : ' ||SUBSTR(A.OFEND_TM, 3,2)
					ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ' : ' || SUBSTR(A.OFEND_TM, 2,2)
					END OFEND_TM
					,A.OFEND_GBN
					,A.OFEND_DETAIL_GBN
					,A.CORR_PLAN_SEND_YN
					,FN_GET_EMP_NM(A.EMP_ID) as EMP_NM
					,FN_GET_JW_NM(A.JW_ID) as JW_NM
					,FN_GET_DEPT_NM(A.DEPT_ID) as DEPT_NM
					,FN_GET_COMP_NM(A.COMP_ID) as COMP_NM
		    	]]>
			<if test="not @org.springframework.util.StringUtils@isEmpty(language)">
				<if test='"KOR".equals(language)'>
					<![CDATA[
					,FN_GET_CODE('A038',A.COMP_ID,'ETC1') AS REG_COMP_NM
					,NVL(FN_GET_IO_COMP_KO_NM(A.OFEND_COMP_ID),FN_GET_IO_COMP_EN_NM(A.OFEND_COMP_ID)) as OFEND_COMP_NM
					,(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN) as OFEND_GBN_NM
					,(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_DETAIL_GBN) as OFEND_DETAIL_GBN_NM
					,NVL(FN_GET_CODE('C060',A.MOBILE_FORENSICS_GBN,''),'해당사항없음') AS MOBILE_FORENSICS_GBN_NM
					,(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.GRP_CD = 'C059' AND F.ETC1 = A.OFEND_DETAIL_GBN AND F.DETL_CD = A.OFEND_SUB_GBN) AS OFEND_SUB_GBN_NM
					,FN_GET_CODE('C010', A.CORR_PLAN_SEND_YN, '') as CORR_PLAN_SEND_YN_NM
					,(SELECT DETL_NM FROM CO_CODE_D WHERE DETL_CD = A.ACT_BLDG   AND ETC4 = A.ACT_COMP_ID AND GRP_CD = 'C063') AS ACT_BLDG_NM
					,(SELECT DETL_NM FROM CO_CODE_D WHERE DETL_CD = A.ACT_LOCATE AND ETC4 = A.ACT_BLDG AND GRP_CD = 'C064') AS ACT_LOCATE_NM
					,(SELECT DETL_NM FROM CO_CODE_D WHERE GRP_CD = 'A030' AND ETC1 = A.ACT_COMP_ID) AS ACT_COMP_NM
					]]>
				</if>
				<if test='"ENG".equals(language)'>
					<![CDATA[
						,FN_GET_CODE_EN('A038',A.COMP_ID,'ETC1') AS REG_COMP_NM
						,NVL(FN_GET_IO_COMP_EN_NM(A.OFEND_COMP_ID),FN_GET_IO_COMP_KO_NM(A.OFEND_COMP_ID)) as OFEND_COMP_NM
						,(SELECT E.DETL_EN_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN) as OFEND_GBN_NM
						,(SELECT E.DETL_EN_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_DETAIL_GBN) as OFEND_DETAIL_GBN_NM
						,NVL(FN_GET_CODE('C060',A.MOBILE_FORENSICS_GBN,''),'Not Applicable') AS MOBILE_FORENSICS_GBN_NM
						,(SELECT F.DETL_EN_NM FROM CO_CODE_D F WHERE F.GRP_CD = 'C059' AND F.ETC1 = A.OFEND_DETAIL_GBN AND F.DETL_CD = A.OFEND_SUB_GBN) AS OFEND_SUB_GBN_NM
						,FN_GET_CODE_EN('C010', A.CORR_PLAN_SEND_YN, '') as CORR_PLAN_SEND_YN_NM
						,(SELECT DETL_NM FROM CO_CODE_D WHERE DETL_CD = A.ACT_BLDG   AND ETC4 = A.ACT_COMP_ID AND GRP_CD = 'C063') AS ACT_BLDG_NM
						,(SELECT DETL_NM FROM CO_CODE_D WHERE DETL_CD = A.ACT_LOCATE AND ETC4 = A.ACT_BLDG AND GRP_CD = 'C064') AS ACT_LOCATE_NM
						,(SELECT DETL_EN_NM FROM CO_CODE_D WHERE GRP_CD = 'A030' AND ETC1 = A.ACT_COMP_ID) AS ACT_COMP_NM
						]]>
				</if>
			</if>
			<![CDATA[
            ,B.POINT_CONTENT
            ,B.SC_CONTENT
            ,B.ETC_CONTENT
            ,B.IMPR_CONTENT
            ,B.APPR_GBN
            ,(SELECT F.RMRK FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN) AS OFEND_RMRK
            ,A.ACT_DO
            ,FN_GET_CODE_NM('C028',A.ACT_DO) AS ACT_DO_NM
            ,A.RMRK
            ,A.OFEND_SUB_GBN
            ,A.MOBILE_FORENSICS_GBN
            ,A.ETC_RSN
            ,A.FILE_PATH AS FILES
						,REPLACE(SUBSTR(A.FILE_PATH,1,INSTR(A.FILE_PATH,';',1,1) - 1),'\','/') AS FILE_PATH
						,SUBSTR(SUBSTR(A.FILE_PATH, INSTR(A.FILE_PATH,';',1,1) +1),1,LENGTH(SUBSTR(A.FILE_PATH, INSTR(A.FILE_PATH,';',1,1) +1)) -(LENGTH(A.FILE_PATH) - INSTR(A.FILE_PATH,';',1,2) + 1)) AS FILE_NAME
						,SUBSTR(A.FILE_PATH,INSTR(A.FILE_PATH,';',1,2) + 1) AS FILE_ID
						,NVL(A.FILE_PATH, 'N') as N_FILE_PATH
						,SUBSTR(A.FILE_PATH, INSTR(A.FILE_PATH, ';')+1) AS N_FILE_PATH_NM
						,REPLACE(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, '\', -1)), '\', '/') AS N_FILE_PATH_ADDR
						,SUBSTR(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, ';')-1), INSTR(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, ';')-1), '\', -1)+1) AS N_FILE_PATH_ID
						,NVL(B.FILE_PATH, 'N') as EXPR_FILE_PATH
						,SUBSTR(B.FILE_PATH, INSTR(B.FILE_PATH, ';')+1) AS EXPR_FILE_PATH_NM
						,REPLACE(SUBSTR(B.FILE_PATH, 1, INSTR(B.FILE_PATH, '\', -1)), '\', '/') AS EXPR_FILE_PATH_ADDR
						,SUBSTR(SUBSTR(B.FILE_PATH, 1, INSTR(B.FILE_PATH, ';')-1), INSTR(SUBSTR(B.FILE_PATH, 1, INSTR(B.FILE_PATH, ';')-1), '\', -1)+1) AS EXPR_FILE_PATH_ID
            ,A.ACT_BLDG
            ,A.ACT_LOCATE
						,A.ACT_GATE
						,A.SEC_MAN_NM
						,B.CANCEL_CONTENT
						,A.VISIT_EMPNO
        FROM
            SC_IO_OFEND A
            LEFT OUTER JOIN SC_IO_CORR_PLAN B
            ON A.SC_IO_DOC_NO = B.SC_IO_DOC_NO ]]>
						<if test="not @org.springframework.util.StringUtils@isEmpty(scIoCorrPlanNo)">
							<![CDATA[ AND B.SC_IO_CORR_PLAN_NO = #{scIoCorrPlanNo} ]]>
						</if>
        WHERE
            A.SC_IO_DOC_NO = #{scIoDocNo}

	</select>
	
	<!-- 외부인 보안 위규자 상세 > 보안 위규 이력 - ioCorrPlanViolationList (ASIS : dmSecrtIoCorrPlan_Violation_List_S ) -->
	<select id="ioCorrPlanViolationList" parameterType="Map" resultType="CamelHashMap">
		/* 외부인 보안 위규자 상세 > 보안 위규 이력 - ioCorrPlanViolationList */
		SELECT
				TB.*
				FROM (
				SELECT
				ROW_NUMBER() OVER(ORDER BY SC_IO_DOC_NO DESC) AS ROW_NUM
				,T.*
				FROM (
				SELECT
				A.SC_IO_DOC_NO
				,B.SC_IO_CORR_PLAN_NO
				,A.ACT_COMP_ID
				<if test="not @org.springframework.util.StringUtils@isEmpty(language)">
					<if test='"KOR".equals(language)'>
						,FN_GET_CODE('A038',A.ACT_COMP_ID,'ETC1') AS REG_COMP_NM
						,NVL(FN_GET_IO_COMP_KO_NM(A.OFEND_COMP_ID),FN_GET_IO_COMP_EN_NM(A.OFEND_COMP_ID)) as OFEND_COMP_NM
						,(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN) as OFEND_GBN_NM
						,(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_DETAIL_GBN) as OFEND_DETAIL_GBN_NM
						,CASE
						WHEN AD.APPR_STAT = '0' THEN '대기'
						WHEN AD.APPR_STAT = '10' THEN '진행'
						WHEN AD.APPR_STAT = '20' THEN '완료'
						WHEN NVL(AD.APPR_STAT, 'N') = 'N' THEN '미작성'
						END as APPR_STAT_NM
						,CASE
						WHEN AD.APPR_RESULT = '0' THEN '검토중'
						WHEN AD.APPR_RESULT = '1' THEN '승인'
						WHEN AD.APPR_RESULT = '2' THEN '부결'
						WHEN AD.APPR_RESULT = '3' THEN '장기미결'
						WHEN NVL(AD.APPR_RESULT, 'N') = 'N' THEN '미작성'
						END as APPR_RESULT_NM
						,NVL(FN_GET_CODE('C060',A.MOBILE_FORENSICS_GBN,''),'해당사항없음') AS MOBILE_FORENSICS_GBN_NM
						,FN_GET_CODE('C010', A.CORR_PLAN_SEND_YN, '') as CORR_PLAN_SEND_YN_NM
					</if>
					<if test='"ENG".equals(language)'>
						,FN_GET_CODE_EN('A038',A.COMP_ID,'ETC1') AS REG_COMP_NM
						,NVL(FN_GET_IO_COMP_EN_NM(A.OFEND_COMP_ID),FN_GET_IO_COMP_KO_NM(A.OFEND_COMP_ID)) as OFEND_COMP_NM
						,(SELECT E.DETL_EN_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN) as OFEND_GBN_NM
						,(SELECT E.DETL_EN_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_DETAIL_GBN) as OFEND_DETAIL_GBN_NM
						,CASE
						WHEN AD.APPR_STAT = '0' THEN 'Waiting'
						WHEN AD.APPR_STAT = '10' THEN 'Progression'
						WHEN AD.APPR_STAT = '20' THEN 'Completed'
						WHEN NVL(AD.APPR_STAT, 'N') = 'N' THEN 'Do not Write'
						END as APPR_STAT_NM
						,CASE
						WHEN AD.APPR_RESULT = '0' THEN 'Under Review'
						WHEN AD.APPR_RESULT = '1' THEN 'Approval'
						WHEN AD.APPR_RESULT = '2' THEN 'Rejected'
						WHEN NVL(AD.APPR_RESULT, 'N') = 'N' THEN 'Do not Write'
						END as APPR_RESULT_NM
						,NVL(FN_GET_CODE_EN('C060',A.MOBILE_FORENSICS_GBN,''),'Not Applicable') AS MOBILE_FORENSICS_GBN_NM
						,FN_GET_CODE_EN('C010', A.CORR_PLAN_SEND_YN, '') as CORR_PLAN_SEND_YN_NM
					</if>
				</if>
            ,A.DEPT_ID
            ,A.JW_ID
            ,A.EMP_ID
            ,FN_GET_EMP_NM(A.EMP_ID) as REG_EMP_NM
            ,A.OFEND_COMP_ID
            ,A.OFEND_EMP_ID
            ,FN_GET_IO_EMP_NM(A.OFEND_EMP_ID) as OFEND_EMP_NM
            ,A.OFEND_TEL_NO
            ,SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) as OFEND_DT
            ,CASE
                WHEN LENGTH(A.OFEND_TM) = 4
                THEN SUBSTR(A.OFEND_TM, 1,2) || ' : ' ||SUBSTR(A.OFEND_TM, 3,2)
                ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ' : ' || SUBSTR(A.OFEND_TM, 2,2)
            END OFEND_TM
            ,A.OFEND_GBN
            ,A.OFEND_DETAIL_GBN
            ,A.CORR_PLAN_SEND_YN
            ,AD.DOC_ID
            ,NVL(AD.APPR_STAT, '99') as APPR_STAT
            ,NVL(AD.APPR_RESULT, '99') as APPR_RESULT
            ,A.MOBILE_FORENSICS_GBN
   			,DECODE(A.OFEND_DETAIL_GBN, 'C0651001', '집계제외', 'C0651003', '집계제외', '') AS BIGO
            ,TO_CHAR(TO_DATE(A.OFEND_DT,'yyyy-mm-dd'),'q') AS QT
        FROM
            SC_IO_OFEND A
            LEFT OUTER JOIN SC_IO_CORR_PLAN B
            ON A.SC_IO_DOC_NO = B.SC_IO_DOC_NO AND B.DEL_YN = 'N'
            LEFT OUTER JOIN
            (SELECT DOC_ID, APPR_RESULT, APPR_STAT FROM AP_DOC ) AD ON (AD.DOC_ID = B.DOC_ID)
        WHERE
			    A.OFEND_EMP_ID = #{ofendEmpId}
			AND A.DEL_YN = 'N'
        ) T
		) TB
	</select>
	
	<!-- 외부인 보안 위규자 상세 > 접견자 목록 - ioEmpViolationViewMeetList (ASIS : dmSecIoEmp_Violation_ViewMeetList_S ) -->
	<select id="ioEmpViolationViewMeetList" parameterType="Map" resultType="CamelHashMap">
		/* 외부인 보안 위규자 상세 > 접견자 목록 - ioEmpViolationViewMeetList */
		SELECT
			 A.COMP_ID
			,A.DEPT_ID
			,A.JW_ID
			,A.EMP_ID
			,B.EMP_NM
			,FN_GET_JW_NM(A.JW_ID) AS JW_NM
			,FN_GET_DEPT_NM(A.DEPT_ID) AS DEPT_NM
		FROM SC_IO_OFEND_MEET A, CO_EMP B
		WHERE A.SC_IO_DOC_NO = #{scIoDocNo}
		AND A.EMP_ID = B.EMP_ID
	</select>
	
	<!-- 관리자 > 외부인 보안 위규자 상세 > 조치현황 - ioEmpViolationActSumList (ASIS : dmSecIoEmp_Violation_ActSum_List_S ) -->
	<select id="ioEmpViolationActSumList" parameterType="Map" resultType="CamelHashMap">
		/* 관리자 > 외부인 보안 위규자 상세 > 조치현황 - ioEmpViolationActSumList */
		/*  SecurityAdminManageItemRepository.ioEmpViolationActSumList (dmSecIoEmp_Violation_ActSum_List_S) */
		<![CDATA[
		WITH T AS (
			SELECT
					TO_CHAR(TO_DATE(REPLACE(#{ofendDt}, '-', ''),'yyyymmdd'),'q') || '분기' AS QT_NM
					 ,SUBSTR(REPLACE(#{ofendDt}, '-', ''),1,4) AS YYYY
					 ,TO_CHAR(TRUNC(TO_DATE(REPLACE(#{ofendDt}, '-', ''),'yyyymmdd'),'q'),'yyyymmdd') AS S_QT
					 ,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE(REPLACE(#{ofendDt}, '-', ''),'yyyymmdd'),'q')-1, 3), 'yyyymmdd') AS E_QT
					 ,CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE,'YYYY')-1 || '.09' ELSE TO_CHAR(SYSDATE, 'yyyy')  || '.09' END || ' ~ ' ||
						CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE, 'YYYY')  || '.08' ELSE TO_CHAR(SYSDATE,'YYYY')+1 || '.08' END
				AS FT_DT
					 ,CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE,'YYYY')-1 || '0901' ELSE TO_CHAR(SYSDATE, 'yyyy')  || '0901' END AS FROM_DT
					 ,CASE WHEN TO_CHAR(SYSDATE, 'mm') <= '08' THEN TO_CHAR(SYSDATE, 'YYYY')  || '0831' ELSE TO_CHAR(SYSDATE,'YYYY')+1 || '0831' END AS TO_DT
			FROM DUAL
		)
		SELECT
			T.YYYY
				 ,T.FT_DT  AS YQ_GB
				 ,'전체' AS GB
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280002', 1, 0)),0) AS CNT1
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280006', 1, 0)),0) AS CNT2
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280008', 1, 0)),0) AS CNT3
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280007', 1, 0)),0) AS CNT4
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280011', 1, 0)),0) AS CNT5
		FROM SC_IO_OFEND A, T T
		WHERE A.OFEND_DT BETWEEN T.FROM_DT AND T.TO_DT
			AND A.ACT_DO IS NOT NULL
			AND A.OFEND_EMP_ID = #{ofendEmpId}
			AND A.DEL_YN = 'N'
			AND A.OFEND_DETAIL_GBN NOT IN ('C0651001', 'C0651003')
		UNION ALL
		SELECT
			T.YYYY
				 ,T.FT_DT  AS YQ_GB
				 ,'동일' AS GB
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280002', 1, 0)),0) AS CNT1
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280006', 1, 0)),0) AS CNT2
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280008', 1, 0)),0) AS CNT3
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280007', 1, 0)),0) AS CNT4
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280011', 1, 0)),0) AS CNT5
		FROM SC_IO_OFEND A, T T
		WHERE A.OFEND_DT BETWEEN T.FROM_DT AND T.TO_DT
			AND A.ACT_DO IS NOT NULL
			AND A.OFEND_EMP_ID = #{ofendEmpId}
			AND A.OFEND_DETAIL_GBN = #{ofendDetailGbn}
			AND A.DEL_YN = 'N'
		UNION ALL
		SELECT
			T.YYYY
				 ,T.QT_NM AS YQ_GB
				 ,'전체' AS GB
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280002', 1, 0)),0) AS CNT1
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280006', 1, 0)),0) AS CNT2
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280008', 1, 0)),0) AS CNT3
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280007', 1, 0)),0) AS CNT4
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280011', 1, 0)),0) AS CNT5
		FROM SC_IO_OFEND A, T T
		WHERE A.OFEND_DT BETWEEN T.S_QT AND T.E_QT
			AND A.ACT_DO IS NOT NULL
			AND A.OFEND_EMP_ID = #{ofendEmpId}
			AND A.DEL_YN = 'N'
			AND A.OFEND_DETAIL_GBN NOT IN ('C0651001', 'C0651003')
		UNION ALL
		SELECT
			T.YYYY
				 ,T.QT_NM AS YQ_GB
				 ,'동일' AS GB
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280002', 1, 0)),0) AS CNT1
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280006', 1, 0)),0) AS CNT2
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280008', 1, 0)),0) AS CNT3
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280007', 1, 0)),0) AS CNT4
				 ,NVL(SUM(DECODE(A.ACT_DO, 'C0280011', 1, 0)),0) AS CNT5
		FROM SC_IO_OFEND A, T T
		WHERE A.OFEND_DT BETWEEN T.S_QT AND T.E_QT
			AND A.ACT_DO IS NOT NULL
			AND A.OFEND_EMP_ID = #{ofendEmpId}
			AND A.OFEND_DETAIL_GBN = #{ofendDetailGbn}
			AND A.DEL_YN = 'N']]>
	</select>
	
	
	<!-- 외부인 보안 위규자 삭제 - secrtIoCorrPlanOfendDelete (ASIS : dmSecrtIoCorrPlan_OFEND_D ) -->
	<update id="secrtIoCorrPlanOfendDelete" parameterType="Map" >
		/* 외부인 보안 위규자 삭제 - secrtIoCorrPlanOfendDelete  */
		UPDATE
			SC_IO_OFEND
		SET
			 DEL_YN = 'Y'
			,DEL_RSN = NVL(#{delRsn}, '')
			,AC_IP = #{acIp}
			,MOD_BY = #{empId}
			,MOD_DTM = SYSDATE
		WHERE 1=1
		<if test="not @org.springframework.util.StringUtils@isEmpty(scIoDocNo)">
			AND SC_IO_DOC_NO = #{scIoDocNo}
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(docId)">
			AND DOC_ID = #{docId}
		</if>
	</update>
	
	<!-- 외부인 보안 위규자 삭제(문서) - secrtIoCorrPlanDocDelete (ASIS : dmSecrtIoCorrPlan_DOC_D ) -->
	<update id="secrtIoCorrPlanDocDelete" parameterType="Map" >
		/* 외부인 보안 위규자 삭제(문서) - secrtIoCorrPlanDocDelete */
		UPDATE
			SC_IO_CORR_PLAN
		SET
			DEL_YN = 'Y'
			,AC_IP = #{acIp}
			,MOD_BY = #{empId}
			,MOD_DTM = SYSDATE
		WHERE 1=1
		<if test="not @org.springframework.util.StringUtils@isEmpty(scIoCorrPlanNo)">
			AND SC_IO_CORR_PLAN_NO = #{scIoCorrPlanNo}
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(scIoDocNo)">
			AND SC_IO_DOC_NO = #{scIoDocNo}
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(docId)">
			AND DOC_ID = #{docId}
		</if>
	</update>
	
	<!-- 외부인 보안 위규자 승인/반려(문서) - ioCorrPlanDocApprUpdate (ASIS : dmSecrtIoCorrPlan_DOC_APPR_U ) -->
	<update id="ioCorrPlanDocApprUpdate"  parameterType="Map" >
		/* 외부인 보안 위규자 승인/반려(문서) - ioCorrPlanDocApprUpdate */
		UPDATE
			SC_IO_CORR_PLAN
		SET
			APPR_GBN = #{apprGbn}
			,SC_CONTENT = #{scContent}
			,CANCEL_CONTENT = #{cancelContent}
			,MOD_BY = #{empId}
			,MOD_DTM = SYSDATE
			,APPR_DTM = SYSDATE
		WHERE
			SC_IO_CORR_PLAN_NO = #{scIoCorrPlanNo}
			AND SC_IO_DOC_NO = #{scIoDocNo}
	</update>
	
	<!-- 외부인 보안 위규자 승인/반려 - ioCorrPlanOfendDocUpdate (ASIS : dmSecrtIoCorrPlan_OFEND_DOC_U ) -->
	<update id="ioCorrPlanOfendDocUpdate"  parameterType="Map" >
		/* 외부인 보안 위규자 승인/반려 - ioCorrPlanOfendDocUpdate */
		UPDATE
			SC_IO_OFEND
		SET
			CORR_PLAN_SEND_YN = #{corrPlanSendYn}
			,AC_IP = #{acIp}
			,MOD_BY = #{modBy}
			,MOD_DTM = SYSDATE
		WHERE
			SC_IO_DOC_NO = #{scIoDocNo}
	</update>
	
	<!-- 외부인 보안 위규자  > 반려시 메일정보  - selectMailInfoForRejectMail (ASIS : dmSecrtIoCorrPlan_SelectMailInfoForRejectMail ) -->
	<select id="selectMailInfoForRejectMail" parameterType="Map" resultType="CamelHashMap">
		/* 외부인 보안 위규자  > 반려시 메일정보  - selectMailInfoForRejectMail */
		SELECT A.SC_IO_CORR_PLAN_NO, A.SC_IO_DOC_NO
		  , C.IO_EMP_ID
		  , (SELECT COMP_KO_NM FROM IO_COMP WHERE IO_COMP_ID=C.IO_COMP_ID) AS IO_COMP_NM  
		  , C.EMP_NM
		  , C.EMP_NM || ' ' || C.JW_NM AS EMP_JW_NM
		  , C.HP_NO
		  , C.EMAIL_ADDR
		  , SUBSTR(B.OFEND_DT,1,4) || '-' || SUBSTR(B.OFEND_DT, 5,2) || '-' || SUBSTR(B.OFEND_DT, 7,2) || ' ' 
		  || SUBSTR(B.OFEND_TM,1,2) || ':' || SUBSTR(B.OFEND_TM, 3,2) AS OFEND_DT
		  , FN_GET_COMP_NM(B.COMP_ID) || ' > ' || FN_GET_CODE('C063',B.ACT_BLDG,'') || ' > ' || FN_GET_CODE('C064',B.ACT_LOCATE,'') AS ACT_LOCATE  
		  , FN_GET_CODE('C052',B.OFEND_GBN,'') || ' > ' || FN_GET_CODE('C058',B.OFEND_DETAIL_GBN,'') AS OFEND_GBN_NM
		  , B.ACT_DO
		  , A.CANCEL_RSN
		  , TO_CHAR(A.MOD_DTM + 14, 'YYYY-MM-DD HH24:MI:SS') AS LIMIT_DT
		FROM SC_IO_CORR_PLAN A
		  , SC_IO_OFEND B
		  , IO_EMP C
		WHERE A.SC_IO_DOC_NO     = B.SC_IO_DOC_NO
		AND A.IO_EMP_ID          = C.IO_EMP_ID
		AND A.SC_IO_CORR_PLAN_NO = #{scIoCorrPlanNo}
		AND A.SC_IO_DOC_NO       = #{scIoDocNo}
	</select>
	
	
	<!-- 외부인 보안 위규자 상세 > 출입제한 상세 - offLimitsView (ASIS : dmOffLimitsView ) -->
	<select id="offLimitsView" parameterType="Map" resultType="CamelHashMap">
		/* 외부인 보안 위규자 상세 > 출입제한 상세  - offLimitsView */
		<![CDATA[
		SELECT 
				A.IO_EMP_ID 		AS IO_EMP_ID, 
				A.IO_COMP_ID 		AS IO_COMP_ID, 
				A.EMP_NM 			AS IO_EMP_NM, 
				B.COMP_KO_NM  		AS COMP_KO_NM,
				B.ADMIN1_EMAIL,
		   		A.JW_NM 			AS JW_NM, 
		   		A.HP_NO 			AS HP_NO, 
		   		A.NATION 			AS NATION, 
		   		FN_GET_CODE( 'Z001', A.NATION, 'DETL_CD') AS NATION_NM,
			   	DECODE(A.NATION, 'Z0011001', A.JUMIN_NO , RPAD(SUBSTR(A.PASSPORT_NO,1,5),9,'*')) AS JUMIN_NO,
			   	X.DENY_NO,
				X.HS_DENY_NO ,
				X.SI_DENY_NO ,
			   	X.DENY_STRT_DT 		AS DENY_STRT_DT, 
		   		X.DENY_END_DT 		AS DENY_END_DT, 
		   		X.DENY_YN 			AS DENY_YN, 
		   		A.CRT_BY 			AS CRT_BY, 
				TO_CHAR(A.CRT_DTM, 'YYYY-MM-DD') AS CRT_DTM, 
		   		A.MOD_BY 			AS MOD_BY, 
		   		TO_CHAR(A.MOD_DTM, 'YYYY-MM-DD') AS MOD_DTM,
		   		A.FILE_PHOTO,
		   		A.DEL_YN,
		   		SUBSTR(A.FILE_PHOTO, 1,INSTR(A.FILE_PHOTO, ';')-1) as FILE_PHOTO_ADDR,
		   		REPLACE(SUBSTR(FILE_PHOTO, 1,INSTR(FILE_PHOTO, ';')-1),'\','/') as WEB_PHOTO_ADDR,
		   		C.IDCARD_ID,
		        C.CARD_NO,
		        A.EMAIL_ADDR,
		       (SELECT COUNT(1) 
		       	  FROM IO_PASS P 
		       	 WHERE PASS_APPL_NO =
		               (SELECT MAX(PASS_APPL_NO) AS PASS_APPL_NO
		                   FROM IO_PASS                     
		                 WHERE IO_EMP_ID = #{ioEmpId} )                    
				   AND (   P.STATUS IN ('A0091001', 'A0091002') 
						  OR P.APPL_STAT IN ('Z0331001', 'Z0331002'))
				   AND P.USE_YN = 'Y'
				) AS IS_EXPIRE_CNT,		
				CASE WHEN C.IO_EMP_ID IS NOT NULL THEN 'Y' ELSE 'N' END AS PASS_MST2_YN,
				C.PASS_APPL_NO,
				/*TO_CHAR(TO_DATE(A.NAME_CHK_DT),'YYYY-MM-DD') AS NAME_CHK_DT,*/
				(CASE
					WHEN LENGTH(A.NAME_CHK_DT) = 8 THEN TO_CHAR(TO_DATE(A.NAME_CHK_DT, 'YYYYMMDD'), 'YYYY-MM-DD')
					ELSE ''
				END) AS NAME_CHK_DT
		FROM IO_EMP A, 
		     IO_COMP B, 
		     ( SELECT CARD_NO, IO_EMP_ID, PASS_APPL_NO, SMART_IDCARD AS IDCARD_ID
		         FROM VW_IO_PASS_MST2                     
		       WHERE MP_GBN= 'P'
		         AND STOP_YN = 'N'
		         AND IO_EMP_ID = #{ioEmpId}                     
		      )C,
		      (
				 SELECT	X.*, CASE WHEN TO_DATE(DENY_STRT_DT, 'YYYY-MM-DD') <= SYSDATE AND TO_DATE(DENY_END_DT, 'YYYY-MM-DD') >= SYSDATE THEN 'Y' ELSE 'N' END AS DENY_YN	FROM (
						SELECT 
							 ROW_NUMBER() OVER ( PARTITION BY X.IO_EMP_ID ORDER BY X.DENY_NO DESC, X.IO_EMP_ID ASC ) AS ROW_NUM
							,X.*
						FROM  IO_EMP_DENY X
						WHERE NVL(DEL_YN,'N') = 'N' 
				 ) X 
				 WHERE X.ROW_NUM = 1
			  ) X
		WHERE A.IO_COMP_ID = B.IO_COMP_ID
		AND A.IO_EMP_ID = C.IO_EMP_ID(+)
		AND A.IO_EMP_ID = X.IO_EMP_ID(+)
		AND A.IO_EMP_ID = #{ioEmpId}
		]]>
	</select>
	
	<!-- 외부인 보안 위규자 상세 > 출입제한 이력  - offLimitsHistoryList (ASIS : dmOffLimitsHistoryList ) -->
	<select id="offLimitsHistoryList" parameterType="Map" resultType="CamelHashMap">
		/* 외부인 보안 위규자 상세 > 출입제한 이력 - offLimitsHistoryList */
		SELECT ROWNUM AS RNUM
		     , T.*
		  FROM (
			SELECT Z.DENY_KIND,
			       Z.DENY_NO,
			       Z.IO_EMP_ID,
			       Z.DENY_STRT_DT,
			       Z.DENY_END_DT,
			       Z.DENY_CTG_CD,
			       Z.DENY_CTG_NM,
			       Z.DENY_RSN,
			       Z.DEL_YN,
			       Z.AC_IP,
			       Z.CRT_BY,
			       Z.CRT_DTM,
			       Z.MOD_BY,
			       Z.MOD_DTM,
			       Z.HS_DENY_NO,
			       Z.SI_DENY_NO
			  FROM (SELECT 'DENY_EMP' AS DENY_KIND,
			               DENY_NO,
			               IO_EMP_ID,
			               DENY_STRT_DT,
			               DENY_END_DT,
			               DENY_CTG_CD,
			               DECODE(DENY_CTG_CD,
			                      'SECURITY', '보안위규',
			                      'SAFETY', '안전위규',
			                      'ETHICS', '윤리위규',
			                      'A0460015','코로나정지',
			                      '그외') AS DENY_CTG_NM,
			               DENY_RSN,
			               DEL_YN,
			               AC_IP,
			               FN_GET_EMP_JW_NM(CRT_BY) AS CRT_BY,
			               TO_CHAR(CRT_DTM, 'YYYY-MM-DD') AS CRT_DTM,
			               FN_GET_EMP_JW_NM(MOD_BY) AS MOD_BY,
			               TO_CHAR(MOD_DTM, 'YYYY-MM-DD') AS MOD_DTM,
			               TO_CHAR(HS_DENY_NO) AS HS_DENY_NO,
			               TO_CHAR(SI_DENY_NO) AS SI_DENY_NO
			          FROM SECURITYADM.IO_EMP_DENY
			         WHERE IO_EMP_ID = #{ioEmpId}
			        UNION
			        SELECT 'DENY_PASS' AS DENY_KIND, 
			               DENY_NO,
			               IO_EMP_ID,
			               DENY_STRT_DT,
			               DENY_END_DT,
			               DENY_CTG_CD,
			               '출입증발급금지' AS DENY_CTG_NM,
			               DENY_RSN,
			               DEL_YN,
			               AC_IP,
			               FN_GET_EMP_JW_NM(CRT_BY) AS CRT_BY,
			               TO_CHAR(CRT_DTM, 'YYYY-MM-DD') AS CRT_DTM,
			               FN_GET_EMP_JW_NM(MOD_BY) AS MOD_BY,
			               TO_CHAR(MOD_DTM, 'YYYY-MM-DD') AS MOD_DTM,
			               '',
			               ''
			          FROM SECURITYADM.IO_PASS_DENY
			         WHERE IO_EMP_ID = #{ioEmpId}) Z
			 ORDER BY Z.DENY_NO DESC
		) T				
	</select>
	
	<!-- 외부인 보안 위규자 상세 > 출입제한 이력 Seq  - offLimitsIoEmpDenySeq (ASIS : dmOffLimitsIoEmpDenySeq ) -->
	<select id="offLimitsIoEmpDenySeq" resultType="java.lang.String">
		/* 외부인 보안 위규자 상세 > 출입제한 이력 Seq  - offLimitsIoEmpDenySeq */
    	SELECT SEQ_IO_EMP_DENY.NEXTVAL AS SEQ_IO_EMP_DENY 
    	  FROM DUAL
	</select>
	
	<!-- 외부인 보안 위규자 상세 > 출입제한 이력 등록  - offLimitsHistoryInsert (ASIS : dmOffLimitsHistoryInsert ) -->
	<insert id="offLimitsHistoryInsert" parameterType="Map">
		/* 외부인 보안 위규자 상세 > 출입제한 이력 등록  - offLimitsHistoryInsert  */
		INSERT INTO IO_EMP_DENY 
		(
		   DENY_NO, 
		   IO_EMP_ID, 
		   DENY_STRT_DT, 
		   DENY_END_DT, 
		   DENY_CTG_CD, 
		   DENY_RSN, 
		   DEL_YN, 
		   AC_IP, 
		   CRT_DTM, 
		   CRT_BY
		   ,HS_DENY_NO
		   ,SI_DENY_NO
		) 
		VALUES ( 
			#{seqIoEmpDeny},
			#{ioEmpId},
			#{denyStrtDt},
			#{denyEndDt},
			#{denyCtgCd},
			#{denyRsn},
			'N',
			#{acIp},
			SYSDATE,
			#{crtBy}
		   ,#{hsDenyNo}
		   ,#{siDenyNo}
		)
	</insert>
	
	<!-- 외부인 보안 위규자 상세 > 이전 출입증 여부체크  - passMst2Check (ASIS : dmPassMst2Check ) -->
	<select id="passMst2Check" parameterType="Map" resultType="CamelHashMap">
		/* 외부인 보안 위규자 상세 > 이전 출입증 여부체크  - passMst2Check */
		<![CDATA[
		SELECT  IO_EMP_ID,  
			CARD_NO,  
			SMART_IDCARD        
	    FROM VW_IO_PASS_MST2
	    WHERE IO_EMP_ID =  #{ioEmpId}
	        /* AND STOP_YN = 'N' 상시출입증 정지/정지해제시 해당 내용의 비 정규데이터로 인한 오작동 해결을 위함 HSK 20210309 */
	     AND MP_GBN = 'P'
	     AND STATUS <> 'A0091010'	/* 반납된 출입증은 제외*/
	     AND rownum = 1 
	     ]]>
	</select>
	
	<!-- 외부인 보안 위규자 상세 > 출입 외부 제한 이력 Seq  - offLimitsIoPassExprHistSeq (ASIS : dmOffLimitsIoPassExprHistSeq ) -->
	<select id="offLimitsIoPassExprHistSeq" resultType="java.lang.String">
		/* 외부인 보안 위규자 상세 > 출입 외부 제한 이력 Seq  - offLimitsIoPassExprHistSeq */
		SELECT SEQ_IO_PASS_EXPR_HIST.NEXTVAL  AS EXPR_APPL_NO 
		  FROM DUAL
	</select>
	
	<!-- 외부인 보안 위규자 상세 > 출입 외부 제한 이력 등록  - offLimitsExprHistoryInsert (ASIS : dmOffLimitsExprHistoryInsert ) -->
	<insert id="offLimitsExprHistoryInsert" parameterType="Map" >
		/* 외부인 보안 위규자 상세 > 출입 외부 제한 이력 등록  - offLimitsExprHistoryInsert */
		INSERT INTO IO_PASS_EXPR_HIST 
		(
		  EXPR_APPL_NO
		, EXPR_GBN
		, IO_COMP_ID
		, IO_EMP_ID
		, IDCARD_ID
		, CARD_NO
		, COMP_ID
		, DEPT_ID
		, JW_ID
		, EMP_ID
		, EXPR_RSN
		, EXPR_STRT_DT
		, EXPR_END_DT
		, AC_IP
		, CRT_BY
		, CRT_DTM
		, S_C_GBN
		) VALUES
		(
      	  #{exprApplNo}
		, #{exprGbn}
		, #{ioCompId}
		, #{ioEmpId}
		, #{smartIdcard}
		, #{cardNo}
		, #{compId}
		, #{deptId}
		, #{jwId}
		, #{crtBy}
		, #{denyRsn}
		, replace(#{denyStrtDt},'-','')
		, replace(#{denyEndDt},'-','')
		, #{acIp}
		, #{crtBy}
		, SYSDATE
		, #{scGbn}
		)
	</insert>
	
	<!-- 외부인 보안 위규자 상세 > 출입 외부 제한 - 하이스텍 정지신청 하는 I/F Procedure 호출  - callOffLimitsIoPassExprHist (ASIS : dmOffLimits_IoPassExprHist ) -->
	<update id="callOffLimitsIoPassExprHist" statementType="CALLABLE" parameterType="Map">
		EXEC [dbo].[uSP_SK_IF_IO_PASS_EXPR_HIST] 
				@EXPR_APPL_NO =#{exprApplNo}
				,@S_C_GBN=#{scGbn}
				,@IDCARD_ID=#{smartIdcard}
				,@EXPR_CODE=#{exprCode}
				<if test='"SI".equals(siteType)'>
				,@PTYPE='8'
				</if>
	</update>
	
	
	<!-- 외부인 보안 위규자 > 출입 제한 이력 해제 - offLimitsHistoryUpdate (ASIS : dmOffLimitsHistoryUpdate ) -->
	<update id="offLimitsHistoryUpdate" parameterType="Map" >
		/* 외부인 보안 위규자 상세 > 출입 제한 이력 해제 - offLimitsHistoryUpdate */
		UPDATE IO_EMP_DENY
		  SET   
		<if test="@org.springframework.util.StringUtils@isEmpty(denyCancelEndDt)">
			DEL_YN = 'Y',
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(denyCancelEndDt)">
			DENY_END_DT = #{denyCancelEndDt},
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(denyCancelRsn)">
			DENY_RSN = #{denyCancelRsn},
		</if>	 
		    MOD_BY = #{modBy},
		    MOD_DTM = SYSDATE
		WHERE  IO_EMP_ID       = #{ioEmpId}
		AND    DENY_NO		   = #{denyNo}
	</update>
	
	<!-- 외부인 보안 위규자 > 출입 제한 MAX(SMART_IDCARD) - offLimitsGetCardNo - return String IDCARD (ASIS: dmOffLimitsGetCardNo )-->
	<select id="offLimitsGetCardNo" parameterType="Map" resultType="java.lang.String">
		SELECT
			NVL(MAX(SMART_IDCARD),'----------') as IDCARD
		FROM
			VW_IO_PASS_MST2 A
		WHERE
			A.IO_EMP_ID = #{ioEmpId}
	</select>
	
	
	<!-- 전사 비문 분류 기준표 조회  - secrtDocDistItemList (ASIS : dmSecrtDocDistItem_List_S ) -->
	<select id="secrtDocDistItemList" parameterType="Map" resultType="CamelHashMap">
		/* 전사 비문 분류 기준표 조회  - secrtDocDistItemList (ASIS : dmSecrtDocDistItem_List_S ) */
		SELECT
		    TB.*
		FROM (
		    SELECT
		        ROW_NUMBER() OVER(ORDER BY SC_DOC_DIST_ID DESC) AS ROW_NUM
		        , COUNT(*) OVER () AS TOTAL_COUNT
		        , T.*
		    FROM (
		        SELECT
		                A.SC_DOC_DIST_ID
		                ,A.COMP_ID
		                ,FN_GET_COMP_NM(A.COMP_ID) as COMP_NM
		                ,A.DEPT_ID
		                ,FN_GET_DEPT_NM(A.DEPT_ID) as DEPT_NM
		                ,A.JW_ID
		                ,FN_GET_JW_NM(A.JW_ID) as JW_NM
		                ,A.EMP_ID
		                ,FN_GET_EMP_NM(A.EMP_ID) as EMP_NM
		                ,SUBSTR(A.REG_DT, 1,4) || '-' || SUBSTR(A.REG_DT, 5, 2) || '-' || SUBSTR(A.REG_DT, 7, 2) as REG_DT
		                ,B.ITEM_CNT
		                ,AD.DOC_ID
									,NVL(AD.APPR_STAT , 'N') as APPR_STAT
		                	        ,NVL(AD.APPR_RESULT , 'N') as APPR_RESULT
		            	            ,CASE
		        	                    WHEN AD.APPR_STAT = '0' THEN '대기'
		    	                        WHEN AD.APPR_STAT = '10' THEN '진행'
			                            WHEN AD.APPR_STAT = '20' THEN '완료'
			                            WHEN NVL(AD.APPR_STAT , 'N') = 'N' THEN '임시보관'
		                    	     END as APPR_STAT_NM
		                	        ,CASE
		            	                WHEN AD.APPR_RESULT = '0' THEN '검토중'
		        	                    WHEN AD.APPR_RESULT = '1' THEN '승인'
		    	                        WHEN AD.APPR_RESULT = '2' THEN '부결'
		    	                        WHEN NVL(AD.APPR_RESULT , 'N') = 'N' THEN '임시보관'
			                         END as APPR_RESULT_NM
		            FROM
		                SC_DOC_DIST A
		                LEFT OUTER JOIN
		                (SELECT SC_DOC_DIST_ID, COUNT(1) as ITEM_CNT FROM SC_DOC_ITEM GROUP BY SC_DOC_DIST_ID) B ON (A.SC_DOC_DIST_ID = B.SC_DOC_DIST_ID)
		                ,AP_DOC AD
		            WHERE
		                A.DEL_YN = 'N'
		                AND AD.DOC_ID = A.DOC_ID               
		       		/*산업보안팀에서 본인작성외에 같은 팀에서 작성한 비문 분류 기준표 조회 가능하도록 할것 20150217 김용범책임 */
		       		<if test="not @org.springframework.util.StringUtils@isEmpty(adminYn)">
		       			<if test='"N".equals(adminYn)'>
		       			/* A.EMP_ID = 'searchEmpId' */
		            	AND A.DEPT_ID IN ( SELECT T.DEPT_ID /* 대팀제에서 PL팀제로 변경이후 보안담당자 부서 권한 확대 */
		       								FROM CO_DEPT T,
		             						(SELECT MGE_CD FROM CO_DEPT WHERE DEPT_ID = #{searchDeptId} AND USE_YN = 'Y') TT
		       								WHERE  T.MGE_CD = TT.MGE_CD
		       							) 
		       			</if>
		       			<if test='"T".equals(adminYn)'>
		       			AND A.DEPT_ID IN ( SELECT T.DEPT_ID /* 대팀제에서 PL팀제로 변경이후 보안담당자 부서 권한 확대 */
		       								FROM CO_DEPT T,
		             						(SELECT MGE_CD FROM CO_DEPT WHERE DEPT_ID = #{searchDeptId} AND USE_YN = 'Y') TT
		       								WHERE  T.MGE_CD = TT.MGE_CD
		       							  )  
		       			</if>
		       		</if>
		       		<if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
		       		<![CDATA[
						AND A.REG_DT >= REPLACE(#{searchStrtDt}, '-', '')
					]]>
		       		</if>
		       		<if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
		       		<![CDATA[
						AND A.REG_DT <= REPLACE(#{searchEndDt}, '-', '')
					]]>
		       		</if>
		       		<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
		       			/* 진행상태 */
		       			<if test='"10".equals(applStat)'>
		       				/* 검토중 */
							AND AD.APPR_STAT = #{applStat}
		       			</if>
		       			<if test='"20".equals(applStat)'>
		       				/* 처리완료 */
							AND AD.APPR_STAT = #{applStat}
		       			</if>
		       			<if test='"1".equals(applStat)'>
		       				/* 승인 */
							AND AD.APPR_RESULT = #{applStat}
		       			</if>
		       			<if test='"2".equals(applStat)'>
		       				/* 부결 */
							AND AD.APPR_RESULT = #{applStat}
		       			</if>
		       		</if>
		       		<if test="@org.springframework.util.StringUtils@isEmpty(applStat)">
		       			AND AD.APPR_STAT = ''
		       		</if>	
		        ) T
		        WHERE 1=1
		        <if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
		        	AND DEPT_NM like '%' || #{searchDeptNm} || '%'
		        </if>
		        <if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
		        	AND EMP_NM like '%' || #{searchEmpNm} || '%'
		        </if>
		    ) TB
		<if test='"Y".equals(pagingYn)'>
		WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	
	<!-- 전사 비문 분류 기준표 조회  엑셀다운 - secrtDocDistItemListExcel (ASIS : dmSecrtDocDistItemExcel ) -->
	<select id="secrtDocDistItemListExcel" parameterType="Map" resultType="CamelHashMap">
		/* 전사 비문 분류 기준표 조회  엑셀다운 - secrtDocDistItemListExcel (ASIS : dmSecrtDocDistItemExcel ) */
		SELECT A.SC_DOC_DIST_ID, FN_GET_COMP_NM(A.COMP_ID) AS COMP_NM,
		       D.DEPT_NM, FN_GET_JW_NM(A.JW_ID) AS JW_NM,
		       A.EMP_ID, E.EMP_NM, 
		       SUBSTR(A.REG_DT, 1,4) || '-' || SUBSTR(A.REG_DT, 5, 2) || '-' || SUBSTR(A.REG_DT, 7, 2) as REG_DT,
		       C.DOC_ID, C.APPR_STAT, C.APPR_RESULT,
		       B.SC_DOC_ITEM_ID, B.GUBUN1, B.GUBUN2, B.GUBUN3,
		       CASE WHEN C.APPR_STAT = '0' THEN '대기'
    	            WHEN C.APPR_STAT = '10' THEN '진행'
	                WHEN C.APPR_STAT = '20' THEN '완료'
	                WHEN NVL(C.APPR_STAT , 'N') = 'N' THEN '임시보관'
                END as APPR_STAT_NM,
               CASE WHEN C.APPR_RESULT = '0' THEN '검토중'
        	        WHEN C.APPR_RESULT = '1' THEN '승인'
    	            WHEN C.APPR_RESULT = '2' THEN '부결'
    	            WHEN NVL(C.APPR_RESULT , 'N') = 'N' THEN '임시보관'
	            END as APPR_RESULT_NM,
	           DECODE(D.ORG_UN_CD,'G00',substr(D.DEPT_NM,1,instr(D.DEPT_NM,' ')-1),D.DEPT_NM)  AS PL_DEPT_NM 
		  FROM SC_DOC_DIST A,
		       SC_DOC_ITEM B,
		       AP_DOC C,
		       CO_DEPT D,
		       CO_EMP E
		 WHERE 1=1
		   AND A.SC_DOC_DIST_ID = B.SC_DOC_DIST_ID(+)
		   AND A.DOC_ID = C.DOC_ID
		   AND A.DEPT_ID = D.DEPT_ID
		   AND A.EMP_ID = E.EMP_ID
		   AND A.DEL_YN = 'N'
		   	<if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
       		<![CDATA[
				AND A.REG_DT >= REPLACE(#{searchStrtDt}, '-', '')
			]]>
       		</if>
       		<if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
       		<![CDATA[
				AND A.REG_DT <= REPLACE(#{searchEndDt}, '-', '')
			]]>
       		</if>
       		<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
       			/* 진행상태 */
       			<if test='"10".equals(applStat)'>
       				/* 검토중 */
					AND AD.APPR_STAT = #{applStat}
       			</if>
       			<if test='"20".equals(applStat)'>
       				/* 처리완료 */
					AND AD.APPR_STAT = #{applStat}
       			</if>
       			<if test='"1".equals(applStat)'>
       				/* 승인 */
					AND AD.APPR_RESULT = #{applStat}
       			</if>
       			<if test='"2".equals(applStat)'>
       				/* 부결 */
					AND AD.APPR_RESULT = #{applStat}
       			</if>
       		</if>
       		<if test="@org.springframework.util.StringUtils@isEmpty(applStat)">
       			AND AD.APPR_STAT = ''
       		</if>
       		<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
	        	AND D.DEPT_NM like '%' || #{searchDeptNm} || '%'
	        </if>
	        <if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
	        	AND E.EMP_NM like '%' || #{searchEmpNm} || '%'
	        </if>
		 	ORDER BY A.SC_DOC_DIST_ID DESC, B.SC_DOC_ITEM_ID
	</select>
	
	<!-- 전사 비문 분류 기준표 상세 - secrtDocDistView (ASIS : dmSecrtDocDist_View_S ) -->
	<select id="secrtDocDistView" parameterType="Map" resultType="CamelHashMap">
		/* 전사 비문 분류 기준표 조회 상세 - secrtDocDistView (ASIS : dmSecrtDocDist_View_S ) */
        SELECT
            B.COMP_ID
            ,FN_GET_COMP_NM(B.COMP_ID) as COMP_NM
            ,B.DEPT_ID
            ,FN_GET_DEPT_NM(B.DEPT_ID) as DEPT_NM
            ,B.JW_ID
            ,FN_GET_JW_NM(B.JW_ID) as JW_NM
            ,B.EMP_ID
            ,FN_GET_EMP_NM(B.EMP_ID) as EMP_NM
            ,B.DOC_ID
            ,SUBSTR(B.REG_DT, 1,4) || '-' || SUBSTR(B.REG_DT, 5, 2) || '-' || SUBSTR(B.REG_DT, 7, 2) as REG_DT
            ,B.FILE_PATH1 AS FILE1
			,REPLACE(SUBSTR(B.FILE_PATH1,1,INSTR(B.FILE_PATH1,';',1,1) - 1),'\','/') AS FILE_PATH1
			,SUBSTR(SUBSTR(B.FILE_PATH1, INSTR(B.FILE_PATH1,';',1,1) +1),1,LENGTH(SUBSTR(B.FILE_PATH1, INSTR(B.FILE_PATH1,';',1,1) +1)) -(LENGTH(B.FILE_PATH1) - INSTR(B.FILE_PATH1,';',1,2) + 1)) AS FILE_NAME1
			,SUBSTR(B.FILE_PATH1,INSTR(B.FILE_PATH1,';',1,2) + 1) AS FILE_ID1
			,NVL(B.FILE_PATH1, 'N') as NFILE_PATH1
			,SUBSTR(B.FILE_PATH1, INSTR(B.FILE_PATH1, ';')+1) AS NFILE_PATH1_NM
			,REPLACE(SUBSTR(B.FILE_PATH1, 1, INSTR(B.FILE_PATH1, '\', -1)), '\', '/') AS NFILE_PATH1_ADDR
			,SUBSTR(SUBSTR(B.FILE_PATH1, 1, INSTR(B.FILE_PATH1, ';')-1), INSTR(SUBSTR(B.FILE_PATH1, 1, INSTR(B.FILE_PATH1, ';')-1), '\', -1)+1) AS NFILE_PATH1_ID
			,B.FILE_NAME
			,B.FILE_URL
        FROM
            SC_DOC_DIST B
        WHERE
            B.SC_DOC_DIST_ID = #{scDocDistId}
	</select>
	
	<!-- 전사 비문 분류 기준표 상세 비문분류기준표 List - secrtDocItemViewList (ASIS : dmSecrtDocItem_View_List_S ) -->
	<select id="secrtDocItemViewList" parameterType="Map" resultType="CamelHashMap">
		/* 전사 비문 분류 기준표 상세 비문분류기준표 List - secrtDocItemViewList (ASIS : dmSecrtDocItem_View_List_S ) */
		<![CDATA[
		SELECT
		    TB.*
		FROM (
		    SELECT
		        ROW_NUMBER() OVER(ORDER BY SC_DOC_ITEM_ID ASC) AS ROW_NUM
		        ,T.*
		    FROM (
		        SELECT
		            A.SC_DOC_DIST_ID
		            ,A.SC_DOC_ITEM_ID
		            ,A.GUBUN1
		            ,A.GUBUN2
		            ,A.GUBUN3
		        FROM
		            SC_DOC_ITEM A
		            ,SC_DOC_DIST B
		        WHERE
		            A.SC_DOC_DIST_ID = B.SC_DOC_DIST_ID
		            AND B.SC_DOC_DIST_ID = #{scDocDistId}
		            AND B.DEL_YN = 'N'
		            AND A.DEL_YN = 'N'
		        ) T
		    ) TB
		]]>
	</select>
	
	
	<!-- 보안 담당자 변경 조회 - secrtChangeList (ASIS : dmSecrtChange_List_S ) -->
	<select id="secrtChangeList" parameterType="Map" resultType="CamelHashMap">
		/* 보안 담당자 변경 조회 - secrtChangeList (ASIS : dmSecrtChange_List_S )  */
		SELECT TB.*
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY SC_CHANGE_NO DESC) AS ROW_NUM
		  	  , COUNT(*) OVER () AS TOTAL_COUNT
		      , T.*
		          FROM (SELECT A.SC_CHANGE_NO
		                     , A.COMP_ID as REQ_COMP_ID
		                     , A.DEPT_ID as REQ_DEPT_ID
		                     , A.JW_ID as REQ_JW_ID
		                     , A.EMP_ID as REQ_EMP_ID
		                     , FN_GET_COMP_NM(A.COMP_ID) as REQ_COMP_NM
		                     , FN_GET_DEPT_NM(A.DEPT_ID) as REQ_DEPT_NM
		                     , FN_GET_EMP_NM(A.EMP_ID) as REQ_EMP_NM
		                     , FN_GET_JW_NM(A.JW_ID) as REQ_JW_NM
		                     , A.OLD_COMP_ID
		                     , A.OLD_DEPT_ID
		                     , A.OLD_JW_ID
		                     , A.OLD_EMP_ID
		                     , FN_GET_COMP_NM(A.OLD_COMP_ID) as OLD_COMP_NM
		                     , FN_GET_DEPT_NM(A.OLD_DEPT_ID) as OLD_DEPT_NM
		                     , FN_GET_JW_NM(A.OLD_JW_ID) as OLD_JW_NM
		                     , FN_GET_EMP_NM(A.OLD_EMP_ID) as OLD_EMP_NM
		                     , A.OLD_RSN
		                     , A.NEW_COMP_ID
		                     , A.NEW_DEPT_ID
		                     , A.NEW_JW_ID
		                     , A.NEW_EMP_ID
		                     , FN_GET_COMP_NM(A.NEW_COMP_ID) as NEW_COMP_NM
		                     , FN_GET_DEPT_NM(A.NEW_DEPT_ID) as NEW_DEPT_NM
		                     , FN_GET_JW_NM(A.NEW_JW_ID) as NEW_JW_NM
		                     , FN_GET_EMP_NM(A.NEW_EMP_ID) as NEW_EMP_NM
		                     , A.NEW_RSN
		                     , A.PRMS_DEPT_ID
		                     , A.PRMS_JW_ID
		                     , A.PRMS_EMP_ID
		                     , CASE WHEN NVL(A.PRMS_DT, 'N') = 'N' THEN A.PRMS_DT
		                     	    ELSE SUBSTR(A.PRMS_DT, 1,4) || '-' || SUBSTR(A.PRMS_DT, 5, 2) || '-' || SUBSTR(A.PRMS_DT, 7, 2)
		           	            END PRMS_DT
		                     , AD.DOC_ID
		                     , CASE WHEN AD.APPR_STAT = '0' THEN '대기'
		                            WHEN AD.APPR_STAT = '10' THEN '진행'
		                            WHEN AD.APPR_STAT = '20' THEN '완료'
		                            WHEN NVL(AD.APPR_STAT, 'N') = 'N' THEN '임시보관'
		                        END as APPR_STAT_NM
		                     , CASE WHEN AD.APPR_RESULT = '0' THEN '검토중'
		                            WHEN AD.APPR_RESULT = '1' THEN '승인'
		                            WHEN AD.APPR_RESULT = '2' THEN '부결'
		                            WHEN NVL(AD.APPR_RESULT, 'N') = 'N' THEN '임시보관'
		                        END as APPR_RESULT_NM
		                     , TO_CHAR(A.CRT_DTM, 'YYYY-MM-DD HH:MI:SS') CRT_DTM
		                  FROM SC_CHANGE A
		                     , AP_DOC AD
		                 WHERE A.DOC_ID = AD.DOC_ID(+)
			            <if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
			                <![CDATA[
			                AND TO_CHAR(A.CRT_DTM, 'YYYYMMDD') >= REPLACE(#{searchStrtDt}, '-', '')
			                ]]>
			            </if>
			            <if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
			                <![CDATA[
			                AND TO_CHAR(A.CRT_DTM, 'YYYYMMDD') <= REPLACE(#{searchEndDt}, '-', '')
			                ]]>
			            </if>
						<if test="not @org.springframework.util.StringUtils@isEmpty(adminYn)">
		                	<if test='"N".equals(adminYn)'>
		                	AND A.EMP_ID = #{searchEmpId}
		                	</if>
		                	<if test='"T".equals(adminYn)'>
		                	AND A.DEPT_ID = #{searchDeptId}
		                	</if>
		                </if>
		            	<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
		                	/* 진행상태 */
		                	<if test='"10".equals(applStat)'>
		                	/* 검토중 */
							AND AD.APPR_STAT = #{applStat}
		                	</if>
		                	<if test='"20".equals(applStat)'>
		                	/* 처리완료 */
							AND AD.APPR_STAT = #{applStat}
		                	</if>
		                	<if test='"1".equals(applStat)'>
		                	/* 승인 */
							AND AD.APPR_RESULT = #{applStat}
		                	</if>
		                	<if test='"2".equals(applStat)'>
		                	/* 부결 */
							AND AD.APPR_RESULT = #{applStat}
		                	</if>
		                </if>
						<if test="@org.springframework.util.StringUtils@isEmpty(applStat)">
		                	AND NVL(AD.APPR_STAT, 'N') = 'N'
		                </if>	
		        ) T
		        WHERE 1=1
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
		          AND REQ_DEPT_NM like '%' || #{searchDeptNm} || '%'
		        </if>
		        <if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
		          AND REQ_EMP_NM like '%' || #{searchEmpNm} || '%'
		        </if>
		    ) TB
		<if test='"Y".equals(pagingYn)'>
		WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	
	<!-- 보안 담당자 변경 상세 - secrtChangeView (ASIS : dmSecrtChange_ReqChangeSecrt_S ) -->
	<select id="secrtChangeView" parameterType="Map" resultType="CamelHashMap">
		/* 보안 담당자 변경 상세 - secrtChangeView (ASIS : dmSecrtChange_ReqChangeSecrt_S ) */
		SELECT A.SC_CHANGE_NO
		     , A.COMP_ID
		     , A.DEPT_ID
		     , A.JW_ID
		     , A.EMP_ID
		     , FN_GET_COMP_NM(A.COMP_ID) 			as REQ_COMP_NM
		     , FN_GET_DEPT_NM(A.DEPT_ID) 			as REQ_DEPT_NM
		     , FN_GET_JW_NM(A.JW_ID) 				as REQ_JW_NM
		     , FN_GET_EMP_NM(A.EMP_ID) 				as REQ_EMP_NM
		     , A.OLD_COMP_ID
		     , A.OLD_DEPT_ID
		     , A.OLD_JW_ID
		     , A.OLD_EMP_ID
		     , FN_GET_COMP_NM(A.OLD_COMP_ID) 		as OLD_COMP_NM
		     , FN_GET_DEPT_NM(A.OLD_DEPT_ID) 		as OLD_DEPT_NM
		     , FN_GET_JW_NM(A.OLD_JW_ID) 			as OLD_JW_NM
		     , FN_GET_EMP_NM(A.OLD_EMP_ID) 			as OLD_EMP_NM
		     , A.OLD_RSN
		     , A.NEW_COMP_ID
		     , A.NEW_DEPT_ID
		     , A.NEW_JW_ID
		     , A.NEW_EMP_ID
		     , FN_GET_COMP_NM(A.NEW_COMP_ID) 		as NEW_COMP_NM
		     , FN_GET_DEPT_NM(A.NEW_DEPT_ID) 		as NEW_DEPT_NM
		     , FN_GET_JW_NM(A.NEW_JW_ID) 			as NEW_JW_NM
		     , FN_GET_EMP_NM(A.NEW_EMP_ID) 			as NEW_EMP_NM
		     , A.NEW_RSN
		     , A.DOC_ID
		     , A.PRMS_DEPT_ID
		     , A.PRMS_JW_ID
		     , A.PRMS_EMP_ID
		     , SUBSTR(A.PRMS_DT, 1,4) || '-' || SUBSTR(A.PRMS_DT, 5, 2) || '-' || SUBSTR(A.PRMS_DT, 7, 2) as PRMS_DT
		     , FN_GET_DEPT_NM(A.PRMS_DEPT_ID) 		as PRMS_DEPT_NM
		     , FN_GET_JW_NM(A.PRMS_JW_ID) 			as PRMS_JW_NM
		     , FN_GET_EMP_NM(A.PRMS_EMP_ID) 		as PRMS_EMP_NM
		     , B.APPR_STAT
		     , B.APPR_RESULT
		     , A.NEW_JB_GBN
		     , A.NEW_TEAM_GBN
		     , A.NEW_MPRS_GBN
		     , FN_GET_CODE('C071', A.NEW_JB_GBN, '') 	as NEW_JB_GBN_NM
		     , FN_GET_CODE('C072', A.NEW_TEAM_GBN, '') 	as NEW_TEAM_GBN_NM
		     , FN_GET_CODE('C073', A.NEW_MPRS_GBN, '') 	as NEW_MPRS_GBN_NM
			 , (SELECT DEPT_NM FROM CO_DEPT WHERE DEPT_ID = A.SEC_DEPT_ID) AS SEC_DEPT_NM
			 , A.SEC_DEPT_ID
			 , A.SC_DEPT_SEC_NO
	      FROM SC_CHANGE A
	         , AP_DOC B
	     WHERE 1=1
	       AND A.DOC_ID = B.DOC_ID(+)
	       <if test="not @org.springframework.util.StringUtils@isEmpty(scChangeNo)">
	       AND A.SC_CHANGE_NO = #{scChangeNo}
	       </if>
	       <if test="not @org.springframework.util.StringUtils@isEmpty(docId)">
	       AND A.DOC_ID = #{docId}
	       </if>
	</select>
	
	
	<!-- 보안 위규 담당자 관리 조회 - secDetlEmpList (ASIS : dmSecDetlEmp_List_S ) -->
	<select id="secDetlEmpList" parameterType="Map" resultType="CamelHashMap">
		/* 보안 위규 담당자 관리 조회 - secDetlEmpList (ASIS : dmSecDetlEmp_List_S ) */
		WITH T1
		     AS (
		     	<if test='@org.springframework.util.StringUtils@isEmpty(searchOfendDetailGbn)'>
				SELECT D.DETL_CD, D.DETL_NM, D.SORT_SEQ
				FROM (
				    SELECT ETC4
				    FROM CO_CODE_D
				    WHERE DETL_CD = #{searchOfendGbn}
				    AND USE_YN   = 'Y'
				) C, CO_CODE_D D
				WHERE C.ETC4 = D.GRP_CD
				AND D.USE_YN   = 'Y'
				UNION
				</if>
				SELECT DETL_CD, DETL_NM, SORT_SEQ
				FROM CO_CODE_D
				WHERE 
				    DETL_CD  = #{searchOfendDetailGbn}
				AND USE_YN   = 'Y'
		         )
		   , T2
		     AS (SELECT A.ETC2 AS COMP_ID,
										A.ETC1 AS DIV_CD,
										A.DETL_NM AS COMP_NM
						 FROM CO_CODE_D A
						 WHERE A.GRP_CD = 'F003'
						 AND ETC2 IN ('1101000001' , '1108000001' , '1102000001'))
		SELECT
		    TB.*
		FROM (                            
			SELECT
					ROW_NUMBER() OVER(ORDER BY SORT_SEQ ASC, DETL_NM ASC, COMP_ID ASC) AS ROW_NUM
					, T.*
			FROM (		
				SELECT
								T1.DETL_NM
								, T2.COMP_NM
								, T4.EMP_NM
								, T5.DEPT_NM
								, T1.DETL_CD
								, T2.COMP_ID
								, T2.DIV_CD
								, T3.EMP_ID
								, T3.SUB_EMP_ID
								, FN_GET_EMP_NM(T3.SUB_EMP_ID) AS SUB_EMP_NM
								, FN_GET_DEPT_NM(FN_GET_DEPT_ID(T3.SUB_EMP_ID)) AS SUB_DEPT_NM
								, T1.SORT_SEQ
				  FROM T1
				       INNER JOIN T2 ON 1 = 1
				       LEFT OUTER JOIN SC_DETL_EMP T3
				           ON T1.DETL_CD = T3.DETL_CD AND T2.COMP_ID = T3.COMP_ID
				       LEFT OUTER JOIN CO_EMP T4 ON T3.EMP_ID = T4.EMP_ID
				       LEFT OUTER JOIN CO_DEPT T5 ON T4.DEPT_ID = T5.DEPT_ID
				       LEFT OUTER JOIN CO_JC T6 ON T4.JC_CD = T6.JC_ID
				       LEFT OUTER JOIN CO_JW T7 ON T4.JW_ID = T7.JW_ID
			) T       
		) TB
		WHERE ROW_NUM BETWEEN ( (#{pageIndex} - 1) * #{pageSize}) + 1 AND ( (#{pageIndex} - 1) * #{pageSize}) + #{pageSize}
	</select>
	<select id="secDetlEmpListCnt" parameterType="Map" resultType="Integer">
		/* 보안 위규 담당자 관리 조회 갯수- secDetlEmpListCnt */
		WITH T1
		     AS (
		     	<if test='@org.springframework.util.StringUtils@isEmpty(searchOfendDetailGbn)'>
				SELECT D.DETL_CD, D.DETL_NM, D.SORT_SEQ
				FROM (
				    SELECT ETC4
				    FROM CO_CODE_D
				    WHERE DETL_CD = #{searchOfendGbn}
				    AND USE_YN   = 'Y'
				) C, CO_CODE_D D
				WHERE C.ETC4 = D.GRP_CD
				AND D.USE_YN   = 'Y'
				UNION
				</if>
				SELECT DETL_CD, DETL_NM, SORT_SEQ
				FROM CO_CODE_D
				WHERE
				    DETL_CD  = #{searchOfendDetailGbn}
				AND USE_YN   = 'Y'
		         )
		   , T2
		     AS (SELECT A.ETC2 AS COMP_ID,
										A.ETC1 AS DIV_CD,
										A.DETL_NM AS COMP_NM
						 FROM CO_CODE_D A
						 WHERE A.GRP_CD = 'F003'
						 AND ETC2 IN ('1101000001' , '1108000001' , '1102000001'))
		SELECT
		    COUNT(*)
		FROM (
			SELECT
					ROW_NUMBER() OVER(ORDER BY SORT_SEQ ASC, DETL_NM ASC, COMP_ID ASC) AS ROW_NUM
					, T.*
			FROM (
				SELECT
								T1.DETL_NM
								, T2.COMP_NM
								, T4.EMP_NM
								, T5.DEPT_NM
								, T1.DETL_CD
								, T2.COMP_ID
								, T2.DIV_CD
								, T3.EMP_ID
								, T3.SUB_EMP_ID
								, FN_GET_EMP_NM(T3.SUB_EMP_ID) AS SUB_EMP_NM
								, FN_GET_DEPT_NM(FN_GET_DEPT_ID(T3.SUB_EMP_ID)) AS SUB_DEPT_NM
								, T1.SORT_SEQ
				  FROM T1
				       INNER JOIN T2 ON 1 = 1
				       LEFT OUTER JOIN SC_DETL_EMP T3
				           ON T1.DETL_CD = T3.DETL_CD AND T2.COMP_ID = T3.COMP_ID
				       LEFT OUTER JOIN CO_EMP T4 ON T3.EMP_ID = T4.EMP_ID
				       LEFT OUTER JOIN CO_DEPT T5 ON T4.DEPT_ID = T5.DEPT_ID
				       LEFT OUTER JOIN CO_JC T6 ON T4.JC_CD = T6.JC_ID
				       LEFT OUTER JOIN CO_JW T7 ON T4.JW_ID = T7.JW_ID
			) T
		) TB
	</select>
	
	<!-- 보안 위규 담당자 관리 조회(모바일포렌직) - secDetlMobileForEmpList (ASIS : dmSecDetlMobileForEmp_List_S ) -->
	<select id="secDetlMobileForEmpList" parameterType="Map" resultType="CamelHashMap">
		/* 보안 위규 담당자 관리 조회(모바일포렌직) - secDetlMobileForEmpList (ASIS : dmSecDetlMobileForEmp_List_S ) */
		WITH T1 AS (
		    SELECT D.DETL_CD, D.DETL_NM  FROM CO_CODE_D D 
		    WHERE D.GRP_CD = 'C060'
		)
		, T2 AS (
		   SELECT A.COMP_ID, A.COMP_NM
		   FROM CO_COMP A
		   WHERE A.COMP_ID IN ('1101000001'
		                     , '1103000001'
		                     , '1108000001'
		                    , '1102000001' )
		)
		SELECT
		    TB.*
		FROM (                            
		    SELECT
							ROW_NUMBER() OVER(ORDER BY DETL_NM ASC, COMP_NM ASC) AS ROW_NUM
							, T.*
		    FROM (
							SELECT
										T1.DETL_NM
										, T2.COMP_NM
										, T4.EMP_NM
										, T5.DEPT_NM
										, T3.DETL_CD
										, T3.COMP_ID
										, T3.EMP_ID
										/*, T3.EMP_GBN 기존 nexcore에서도 오류 주석처리 */

										/*, 기존 Query없는 내용, 포렌식 제외 담당자 Query비교하여 추가 */
										, T3.SUB_EMP_ID
										, FN_GET_EMP_NM(T3.SUB_EMP_ID) AS SUB_EMP_NM
										, FN_GET_DEPT_NM(FN_GET_DEPT_ID(T3.SUB_EMP_ID)) AS SUB_DEPT_NM
										/*, 기존 Query없는 내용, 포렌식 제외 담당자 Query비교하여 추가 */
							FROM T1
							INNER JOIN T2 ON 1 = 1
							LEFT OUTER JOIN SC_DETL_EMP T3
							ON T1.DETL_CD = T3.DETL_CD AND T2.COMP_ID = T3.COMP_ID
							LEFT OUTER JOIN CO_EMP T4 ON T3.EMP_ID = T4.EMP_ID
							LEFT OUTER JOIN CO_DEPT T5 ON T4.DEPT_ID = T5.DEPT_ID
							LEFT OUTER JOIN CO_JC T6 ON T4.JC_CD = T6.JC_ID
							LEFT OUTER JOIN CO_JW T7 ON T4.JW_ID = T7.JW_ID
		    			) T
		) TB
		WHERE ROW_NUM BETWEEN ( (#{pageIndex} - 1) * #{pageSize}) + 1 AND ( (#{pageIndex} - 1) * #{pageSize}) + #{pageSize}
	</select>
	<select id="secDetlMobileForEmpListCnt" parameterType="Map" resultType="Integer">
		/* 보안 위규 담당자 관리 조회(모바일포렌직) - secDetlMobileForEmpListCnt */
		WITH T1 AS (
		    SELECT D.DETL_CD, D.DETL_NM  FROM CO_CODE_D D
		    WHERE D.GRP_CD = 'C060'
		)
		, T2 AS (
		   SELECT A.COMP_ID, A.COMP_NM
		   FROM CO_COMP A
		   WHERE A.COMP_ID IN ('1101000001'
		                     , '1103000001'
		                     , '1108000001'
		                    , '1102000001' )
		)
		SELECT
		    COUNT(*)
		FROM (
		    SELECT
							ROW_NUMBER() OVER(ORDER BY DETL_NM ASC, COMP_NM ASC) AS ROW_NUM
							, T.*
		    FROM (
							SELECT
										T1.DETL_NM
										, T2.COMP_NM
										, T4.EMP_NM
										, T5.DEPT_NM
										, T3.DETL_CD
										, T3.COMP_ID
										, T3.EMP_ID
										/*, T3.EMP_GBN 기존 nexcore에서도 오류 주석처리 */

										/*, 기존 Query없는 내용, 포렌식 제외 담당자 Query비교하여 추가 */
										, T3.SUB_EMP_ID
										, FN_GET_EMP_NM(T3.SUB_EMP_ID) AS SUB_EMP_NM
										, FN_GET_DEPT_NM(FN_GET_DEPT_ID(T3.SUB_EMP_ID)) AS SUB_DEPT_NM
										/*, 기존 Query없는 내용, 포렌식 제외 담당자 Query비교하여 추가 */
							FROM T1
							INNER JOIN T2 ON 1 = 1
							LEFT OUTER JOIN SC_DETL_EMP T3
							ON T1.DETL_CD = T3.DETL_CD AND T2.COMP_ID = T3.COMP_ID
							LEFT OUTER JOIN CO_EMP T4 ON T3.EMP_ID = T4.EMP_ID
							LEFT OUTER JOIN CO_DEPT T5 ON T4.DEPT_ID = T5.DEPT_ID
							LEFT OUTER JOIN CO_JC T6 ON T4.JC_CD = T6.JC_ID
							LEFT OUTER JOIN CO_JW T7 ON T4.JW_ID = T7.JW_ID
		    			) T
		) TB
	</select>
	
	<!-- 보안 위규 담당자 관리 상세정보 - secDetlEmpView (ASIS : dmSecDetlEmp_Detail_S ) -->
	<select id="secDetlEmpView" parameterType="Map" resultType="CamelHashMap">
		/* 보안 위규 담당자 관리 상세정보 - secDetlEmpDetail (ASIS : dmSecDetlEmp_Detail_S ) */
		SELECT
					A.COMP_ID
				 ,A.EMP_ID
				 ,FN_GET_EMP_NM(A.EMP_ID) AS EMP_NM
				 ,FN_GET_DEPT_NM(B.DEPT_ID) AS DEPT_NM
				 ,FN_GET_JW_NM(B.JW_ID) as JW_NM
				 ,B.TEL_NO1 AS HP_NO
				 ,FN_GET_COMP_NM(B.COMP_ID) AS CO_COMP_NM
				 ,A.SUB_EMP_ID
				 ,FN_GET_EMP_NM(A.SUB_EMP_ID)   AS SUB_EMP_NM
				 ,FN_GET_DEPT_NM(C.DEPT_ID) AS SUB_DEPT_NM
				 ,FN_GET_JW_NM(C.JW_ID)     AS SUB_JW_NM
				 ,C.TEL_NO1                 AS SUB_HP_NO
				 ,FN_GET_COMP_NM(C.COMP_ID) AS CO_SUB_COMP_NM
		FROM SC_DETL_EMP A
		 LEFT JOIN CO_EMP B
							 ON A.EMP_ID = B.EMP_ID
		 LEFT JOIN CO_EMP C
							 ON A.SUB_EMP_ID = C.EMP_ID
		WHERE A.DETL_CD = #{detlCd}
			AND A.COMP_ID = #{compId}
	</select>
	
	<!-- 보안 위규 담당자 관리 상세 > 저장  - secDetlEmpInsert (ASIS : dmSecDetlEmp_Detail_I ) -->
	<insert id="secDetlEmpInsert" parameterType="Map">
		/* 보안 위규 담당자 관리 상세 > 저장  - secDetlEmpInsert (ASIS : dmSecDetlEmp_Detail_I )  */
		MERGE INTO SC_DETL_EMP T1
	        USING (
	                SELECT
	                     #{detlCd} as DETL_CD
	                    ,#{compId} as COMP_ID
	                FROM DUAL
	                ) T2
	        ON (T1.DETL_CD = T2.DETL_CD AND T1.COMP_ID = T2.COMP_ID)
	        WHEN MATCHED THEN
	            UPDATE SET
	                T1.EMP_ID  = #{empId},
	                T1.SUB_EMP_ID = #{subEmpId},
	                T1.AC_IP   = #{acIp},
	                T1.MOD_DTM = SYSDATE,
	                T1.MOD_BY  = #{crtBy}
	        WHEN NOT MATCHED THEN
	            INSERT
	               (  DETL_CD 
	                , COMP_ID
	                , EMP_ID
	                , SUB_EMP_ID
	                , AC_IP
	                , CRT_DTM   
	                , CRT_BY
	                )    
	        VALUES  
	               (  T2.DETL_CD 
	                , T2.COMP_ID
	                , #{empId}
	                ,	#{subEmpId}
	                , #{acIp}
	                , SYSDATE   
	                , #{crtBy}
	               )
	</insert>
	
	<!-- 팀내 생활보안점검 조회(관) 조회 - coEmpTeamViolationList (ASIS : dmCoEmpTeam_Violation_List_S ) -->
	<select id="coEmpTeamViolationList" parameterType="Map" resultType="CamelHashMap">
		/* 팀내 생활보안점검 조회(관) 조회 - coEmpTeamViolationList (ASIS : dmCoEmpTeam_Violation_List_S ) */
		SELECT   TB.*
		FROM (
		    SELECT
		        ROW_NUMBER() OVER(ORDER BY OFEND_DT DESC, OFEND_TM DESC) AS ROW_NUM
		        /* ROW_NUMBER() OVER(ORDER BY SC_DOC_NO DESC) AS ROW_NUM */
		        , COUNT(*) OVER () AS TOTAL_COUNT
		        ,T.*
		    FROM (
		        SELECT
		             A.SC_DOC_NO
		            ,A.COMP_ID
		            ,A.DEPT_ID
		            ,FN_GET_DEPT_NM(A.DEPT_ID) as REG_DEPT_NM
		            ,A.JW_ID
		            ,A.EMP_ID
		            ,FN_GET_EMP_JW_NM(A.EMP_ID) as REG_EMP_JW_NM
		            ,FN_GET_EMP_NM(A.EMP_ID) as REG_EMP_NM         
		            ,A.OFEND_COMP_ID
		            ,A.OFEND_DEPT_ID
		            ,A.OFEND_JW_ID
		            ,A.OFEND_EMP_ID
		            ,A.OFEND_TEL_NO
		            ,FN_GET_COMP_NM(A.OFEND_COMP_ID) as OFEND_COMP_NM
		            ,FN_GET_DEPT_NM(A.OFEND_DEPT_ID) as OFEND_DEPT_NM
		            ,FN_GET_EMP_NM(A.OFEND_EMP_ID) as OFEND_EMP_NM
		            ,FN_GET_EMP_JW_NM(A.OFEND_EMP_ID) as OFEND_EMP_JW_NM
		            ,SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) as OFEND_DT
		            ,CASE
		                WHEN LENGTH(A.OFEND_TM) = 4
		                THEN SUBSTR(A.OFEND_TM, 1,2) || ' : ' ||SUBSTR(A.OFEND_TM, 3,2)
		                ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ' : ' || SUBSTR(A.OFEND_TM, 2,2)
		            END OFEND_TM
		            ,A.OFEND_GBN
		            ,DECODE(A.OFEND_GBN,'ALL','팀내 생활보안점검',(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN)) AS OFEND_GBN_NM
		            ,A.OFEND_DETAIL_GBN
		            ,DECODE( A.OFEND_DETAIL_GBN,'ALL','지적사항없음',(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN)) AS OFEND_DETAIL_GBN_NM
		            ,A.CORR_PLAN_SEND_YN
		            ,DECODE(A.CORR_PLAN_SEND_YN,'ALL','지적사항없음',FN_GET_CODE('C010', A.CORR_PLAN_SEND_YN, '')) as CORR_PLAN_SEND_YN_NM
		            ,A.DOC_ID
		        FROM
		            SC_OFEND_TEAM A
		        WHERE 1=1
		            AND A.DEL_YN = 'N'
		            AND A.OLD_YN = 'N'
		            <![CDATA[
		            /* AND A.OFEND_DETAIL_GBN <> 'ALL'  김용범책임 요청 20160607  */
		            ]]>
		            <if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
			        <![CDATA[
			            AND REPLACE(A.OFEND_DT, '-', '') >= REPLACE(#{searchStrtDt}, '-', '')
			        ]]>
			        </if>
			        <if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
			        <![CDATA[
			            AND REPLACE(A.OFEND_DT, '-', '') <= REPLACE(#{searchEndDt}, '-', '')
			        ]]>
			        </if>
			        <if test="not @org.springframework.util.StringUtils@isEmpty(adminYn)">
			        	<if test='"N".equals(adminYn)'>
			        		AND A.EMP_ID = #searchEmpId#
			        	</if>
			        	<if test='"T".equals(adminYn)'>
			        		AND A.DEPT_ID = #searchDeptId#
			        	</if>
			        </if>
			        <if test="not @org.springframework.util.StringUtils@isEmpty(searchOfendGbn)">
			        	AND A.OFEND_GBN = #{searchOfendGbn}
			        </if>
			        <if test="not @org.springframework.util.StringUtils@isEmpty(searchOfendDetailGbn)">
			        	AND A.OFEND_DETAIL_GBN = #{searchOfendDetailGbn}
			        </if>
			        <if test="not @org.springframework.util.StringUtils@isEmpty(corrPlanSendYn)">
			        	AND A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
			        </if>
					<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
	                	/* 진행상태 */
	                	<if test='"10".equals(applStat)'>
	                	/* 검토중 */
						AND AD.APPR_STAT = #{applStat}
	                	</if>
	                	<if test='"20".equals(applStat)'>
	                	/* 처리완료 */
						AND AD.APPR_STAT = #{applStat}
	                	</if>
	                	<if test='"1".equals(applStat)'>
	                	/* 승인 */
						AND AD.APPR_RESULT = #{applStat}
	                	</if>
	                	<if test='"2".equals(applStat)'>
	                	/* 부결 */
						AND AD.APPR_RESULT = #{applStat}
	                	</if>
	                </if>
		             ) T
				WHERE 1=1
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
					AND	OFEND_EMP_NM like '%' || #{searchEmpNm} || '%'
				</if>
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchInputEmpNm)">
					AND	REG_EMP_NM like '%' || #{searchInputEmpNm} || '%'
				</if>
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
					AND	OFEND_DEPT_NM like '%' || #{searchDeptNm} || '%'
				</if>
				<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
					<if test='"1003".equals(applStat)'>
					/* 관련없음 */
					AND APPR_STAT = #{applStat}
					</if>
				</if>
			    ) TB
		<if test='"Y".equals(pagingYn)'>
		WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	
	<!-- 팀내 생활보안점검 조회(관)조회 엑셀다운로드 - coEmpTeamViolationListExcel (ASIS : dmCoEmpTeam_Violation_List_Excel_S ) -->
	<select id="coEmpTeamViolationListExcel" parameterType="Map" resultType="CamelHashMap">
		/* 팀내 생활보안점검 조회(관)조회 엑셀다운로드 - coEmpTeamViolationListExcel (ASIS : dmCoEmpTeam_Violation_List_Excel_S ) */
		SELECT   TB.*
		FROM (
		    SELECT
		        ROW_NUMBER() OVER(ORDER BY OFEND_DT DESC, OFEND_TM DESC) AS ROW_NUM
		        /* ROW_NUMBER() OVER(ORDER BY SC_DOC_NO DESC) AS ROW_NUM */
		        ,T.*
		    FROM (
		        SELECT
		             A.SC_DOC_NO
		            ,A.COMP_ID
		            ,A.DEPT_ID
		            ,FN_GET_DEPT_NM(A.DEPT_ID) as REG_DEPT_NM
		            ,A.JW_ID
		            ,A.EMP_ID
		            ,FN_GET_EMP_JW_NM(A.EMP_ID) as REG_EMP_JW_NM
		            ,FN_GET_EMP_NM(A.EMP_ID) as REG_EMP_NM         
		            ,A.OFEND_COMP_ID
		            ,A.OFEND_DEPT_ID
		            ,A.OFEND_JW_ID
		            ,A.OFEND_EMP_ID
		            ,A.OFEND_TEL_NO
		            ,FN_GET_COMP_NM(A.OFEND_COMP_ID) as OFEND_COMP_NM
	                ,FN_GET_DEPT_NM(B.DEPT_LV2_ID) AS DEPT_LV2_NM
	                ,FN_GET_DEPT_NM(B.DEPT_LV3_ID) AS DEPT_LV3_NM
	                ,FN_GET_DEPT_NM(B.DEPT_LV4_ID) AS DEPT_LV4_NM
	                ,FN_GET_DEPT_NM(B.DEPT_LV5_ID) AS DEPT_LV5_NM
	                ,FN_GET_DEPT_NM(B.DEPT_ID) AS OFEND_DEPT_NM
		            ,FN_GET_EMP_NM(A.OFEND_EMP_ID) as OFEND_EMP_NM
		            ,FN_GET_EMP_JW_NM(A.OFEND_EMP_ID) as OFEND_EMP_JW_NM
		            ,FN_GET_JW_NM(A.OFEND_JW_ID) AS OFEND_JW_NM
		            ,SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) as OFEND_DT
		            ,CASE
		                WHEN LENGTH(A.OFEND_TM) = 4
		                THEN SUBSTR(A.OFEND_TM, 1,2) || ' : ' ||SUBSTR(A.OFEND_TM, 3,2)
		                ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ' : ' || SUBSTR(A.OFEND_TM, 2,2)
		            END OFEND_TM
		            ,A.OFEND_GBN
		             ,DECODE(A.OFEND_GBN,'ALL','팀내 생활보안점검',(SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN)) AS OFEND_GBN_NM
		            ,A.OFEND_DETAIL_GBN
		            ,DECODE( A.OFEND_DETAIL_GBN,'ALL','지적사항없음',(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN)) AS OFEND_DETAIL_GBN_NM
		            ,A.CORR_PLAN_SEND_YN
		            ,DECODE(A.CORR_PLAN_SEND_YN,'ALL','지적사항없음',FN_GET_CODE('C010', A.CORR_PLAN_SEND_YN, '')) as CORR_PLAN_SEND_YN_NM
		            ,A.DOC_ID
		        FROM
		            SC_OFEND_TEAM A,
	                CO_DEPT B
		        WHERE A.DEPT_ID = B.DEPT_ID
		            AND A.DEL_YN = 'N'
		            AND A.OLD_YN = 'N'
		            <![CDATA[
		            /* AND A.OFEND_DETAIL_GBN <> 'ALL'  김용범책임 요청 20160607  */
		            ]]>        
		            <if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
			        <![CDATA[
			            AND REPLACE(A.OFEND_DT, '-', '') >= REPLACE(#{searchStrtDt}, '-', '')
			        ]]>
			        </if>
			        <if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
			        <![CDATA[
			            AND REPLACE(A.OFEND_DT, '-', '') <= REPLACE(#{searchEndDt}, '-', '')
			        ]]>
			        </if>
					<if test="not @org.springframework.util.StringUtils@isEmpty(searchOfendGbn)">
			        	AND A.OFEND_GBN = #{searchOfendGbn}
			        </if>
			        <if test="not @org.springframework.util.StringUtils@isEmpty(searchOfendDetailGbn)">
			        	AND A.OFEND_DETAIL_GBN = #{searchOfendDetailGbn}
			        </if>
			        <if test="not @org.springframework.util.StringUtils@isEmpty(corrPlanSendYn)">
			        	AND A.CORR_PLAN_SEND_YN = #{corrPlanSendYn}
			        </if>
					<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
	                	/* 진행상태 */
	                	<if test='"10".equals(applStat)'>
	                	/* 검토중 */
						AND AD.APPR_STAT = #{applStat}
	                	</if>
	                	<if test='"20".equals(applStat)'>
	                	/* 처리완료 */
						AND AD.APPR_STAT = #{applStat}
	                	</if>
	                	<if test='"1".equals(applStat)'>
	                	/* 승인 */
						AND AD.APPR_RESULT = #{applStat}
	                	</if>
	                	<if test='"2".equals(applStat)'>
	                	/* 부결 */
						AND AD.APPR_RESULT = #{applStat}
	                	</if>
	                </if>
		             ) T
				WHERE 1=1
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
					AND	OFEND_EMP_NM like '%' || #{searchEmpNm} || '%'
				</if>
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchInputEmpNm)">
					AND	REG_EMP_NM like '%' || #{searchInputEmpNm} || '%'
				</if>
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
					AND	OFEND_DEPT_NM like '%' || #{searchDeptNm} || '%'
				</if>
				<if test="not @org.springframework.util.StringUtils@isEmpty(applStat)">
					<if test='"1003".equals(applStat)'>
					/* 관련없음 */
					AND APPR_STAT = #{applStat}
					</if>
				</if>
			    ) TB
	</select>
	
	<!-- 팀내 생활보안점검 조회(관)상세 - coEmpTeamViolationView (ASIS : dmSecCoEmpTeamViolation_Detail_S)  -->
	<select id="coEmpTeamViolationView" parameterType="Map" resultType="CamelHashMap">
		/* 팀내 생활보안점검 조회(관)상세 - coEmpTeamViolationView (ASIS : dmSecCoEmpTeamViolation_Detail_S) */
		SELECT 
				AA.OFEND_EMP_ID,
				AA.OFEND_EMP_NM,
				AA.OFEND_COMP_ID,
				AA.OFEND_DEPT_ID,
				AA.OFEND_DEPT_NM,
				AA.OFEND_JW_ID,
				AA.OFEND_JW_NM,
				AA.OFEND_DT,
				AA.OFEND_TM,
				AA.OFEND_GBN,
				AA.OFEND_GBN_NM,
				AA.OFEND_DETAIL_GBN,
				AA.OFEND_DETAIL_GBN_NM,
				AA.COMP_NM,
				AA.OFEND_COMP_NM,
				AA.DEPT_NM,
				AA.EMP_NM,
				AA.EMP_ID,
				AA.JW_NM,
				AA.ETC_RSN,
				AA.OFEND_TEL_NO,
				AA.FILE_PATH, 
				AA.FILE_PATH_NM,
	    		SUBSTR(AA.FILE_PATH_ADDR, 1, INSTR(AA.FILE_PATH_ADDR, #{operateId})-1 ) AS FILE_PATH_ADDR,
				SUBSTR(AA.FILE_PATH_TMP_NM, 0, INSTR(AA.FILE_PATH_TMP_NM, ';')-1) AS FILE_PATH_ID,
				AA.OFEND_RMRK,
				AA.OFEND_EMP_EMAIL,
				AA.ACT_COMP_NM
		FROM (
			SELECT A.OFEND_EMP_ID,
	              (SELECT B.EMP_NM FROM CO_EMP B WHERE B.EMP_ID = A.OFEND_EMP_ID) AS OFEND_EMP_NM,
	               A.OFEND_COMP_ID,
	               A.OFEND_DEPT_ID,
	              (SELECT C.DEPT_NM FROM CO_DEPT C WHERE C.DEPT_ID = A.OFEND_DEPT_ID) AS OFEND_DEPT_NM,
	               A.OFEND_JW_ID,
	              (SELECT D.JW_NM FROM CO_JW D WHERE D.JW_ID = A.OFEND_JW_ID) AS OFEND_JW_NM,
	              SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) AS OFEND_DT,
	              CASE WHEN LENGTH(A.OFEND_TM) = 4 THEN SUBSTR(A.OFEND_TM, 1,2) || ' : ' ||SUBSTR(A.OFEND_TM, 3,2)
	                   ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ' : ' || SUBSTR(A.OFEND_TM, 2,2)
	               END OFEND_TM,
	              A.OFEND_GBN,
	              (SELECT E.DETL_NM FROM CO_CODE_D E WHERE E.DETL_CD = A.OFEND_GBN) AS OFEND_GBN_NM,
	              A.OFEND_DETAIL_GBN,
	              (SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN) AS OFEND_DETAIL_GBN_NM,
				        FN_GET_COMP_NM(A.COMP_ID) as COMP_NM,
				        FN_GET_COMP_NM(A.OFEND_COMP_ID) as OFEND_COMP_NM,
	              FN_GET_DEPT_NM(A.DEPT_ID) as DEPT_NM,
	              FN_GET_EMP_NM(A.EMP_ID) as EMP_NM,
	              A.EMP_ID,
	              FN_GET_JW_NM(A.JW_ID) as JW_NM,
	              A.ETC_RSN,
	              A.OFEND_TEL_NO,       
	              NVL(FILE_PATH, 'N') as FILE_PATH, 
	              REPLACE(SUBSTR(A.FILE_PATH, 1, INSTR(A.FILE_PATH, ';')-1 ),'\', '/') AS FILE_PATH_ADDR,
	              SUBSTR(A.FILE_PATH, INSTR(A.FILE_PATH, #{operateId})) as FILE_PATH_TMP_NM, 
	              SUBSTR(A.FILE_PATH, INSTR(A.FILE_PATH, ';')+1) AS FILE_PATH_NM, 
	              (SELECT F.RMRK FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN) AS OFEND_RMRK,
	              (SELECT E.EMAIL FROM CO_EMP E WHERE E.EMP_ID = A.OFEND_EMP_ID) AS OFEND_EMP_EMAIL,
	              FN_GET_COMP_NM(A.OFEND_COMP_ID) as ACT_COMP_NM         
	       FROM SC_OFEND_TEAM A      
	       WHERE A.SC_DOC_NO = #{scDocNo}
		) AA
	</select>
	
	
	<!-- 팀내 생활보안점검 조회(관) 이력조회 - coEmpTeamViolationHist (ASIS : dmSecCoEmpTeam_Violation_Detail_Hist_S)  -->
	<select id="coEmpTeamViolationHist" parameterType="Map" resultType="CamelHashMap">
		/* 팀내 생활보안점검 조회(관) 이력조회 - coEmpTeamViolationHist (ASIS : dmSecCoEmpTeam_Violation_Detail_Hist_S) */
		SELECT 
			AA.*
		FROM (
				SELECT 
			     SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) || ' ' ||
			     CASE WHEN LENGTH(A.OFEND_TM) = 4 THEN SUBSTR(A.OFEND_TM, 1,2) || ':' ||SUBSTR(A.OFEND_TM, 3,2)
			     ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ':' || SUBSTR(A.OFEND_TM, 2,2)
			     END OFEND_DTM
			    ,(SELECT B.EMP_NM FROM CO_EMP B WHERE B.EMP_ID = A.OFEND_EMP_ID) AS OFEND_EMP_NM     
			    ,(SELECT F.DETL_NM FROM CO_CODE_D F WHERE F.DETL_CD = A.OFEND_DETAIL_GBN) AS OFEND_DETAIL_GBN_NM
			    ,(SELECT B.EMP_NM FROM CO_EMP B WHERE B.EMP_ID = A.CRT_BY) AS CRT_BY_NM	
	            ,SUBSTR(A.OFEND_DT, 1,4) || '-' || SUBSTR(A.OFEND_DT, 5, 2) || '-' || SUBSTR(A.OFEND_DT, 7, 2) AS OFEND_DT
		        ,CASE WHEN LENGTH(A.OFEND_TM) = 4 THEN SUBSTR(A.OFEND_TM, 1,2) || ':' ||SUBSTR(A.OFEND_TM, 3,2)
		         ELSE '0' || SUBSTR(A.OFEND_TM, 1,1) || ':' || SUBSTR(A.OFEND_TM, 2,2)
	    	     END OFEND_TM 
		  FROM SC_OFEND_TEAM A
		  WHERE A.OLD_YN         = 'N'
		  	AND A.OFEND_EMP_ID     = #{ofendEmpId}
			AND A.DEL_YN		   = 'N' /* 김용범책임 요청 , 삭제처리된 위규리스트 감추기 20160308*/
			<![CDATA[
			AND A.OFEND_GBN <> 'ALL'
			]]>
		) AA
		ORDER BY AA.OFEND_DTM DESC
	</select>
	
	
	<!-- 팀내 생활보안점검 조회(관) 삭제  - coEmpTeamViolationDelete (ASIS : dmSecCoEmpTeamViolation_D) -->
	<update id="coEmpTeamViolationDelete" parameterType="Map" >
		/* 팀내 생활보안점검 조회(관) 삭제  - coEmpTeamViolationDelete (ASIS : dmSecCoEmpTeamViolation_D) */
		UPDATE SC_OFEND_TEAM
		SET  DEL_YN  = 'Y'
		    ,MOD_DTM = SYSDATE
		    ,MOD_BY  = #{crtBy}
		WHERE SC_DOC_NO = #{scDocNo}
	</update>
	
	
	<!-- 팀내 생활보안점검 조회(관) 삭제  - coEmpTeamViolationDelete (ASIS : dmSecCoEmpTeamViolation_D) -->	
	<update id="coEmpTeamViolationDel" parameterType="Map" >
		<![CDATA[
			/* 팀내 생활보안점검 조회(보안담당자) 일괄삭제  - coEmpTeamViolationDelete */
			UPDATE SC_OFEND_TEAM
			SET  DEL_YN  = 'Y'
			    ,MOD_DTM = SYSDATE
			    ,MOD_BY  = #{crtBy}
			WHERE 1=1 
			AND SC_DOC_NO IN
			]]>
			<foreach collection="scDocNos" item="item" separator="," open="(" close=")">
				#{item}
			</foreach>
	</update>
	
	
	<!-- 보안 위규자 조회권한 조회 - secrtOfendAuthList (ASIS : dmSecrtOfendAuth_List_S ) -->
	<select id="secrtOfendAuthList" parameterType="Map" resultType="CamelHashMap">
		/* 보안 위규자 조회권한 조회 - secrtOfendAuthList (ASIS : dmSecrtOfendAuth_List_S ) */
		SELECT
		    TB.*
		FROM (
		    SELECT
		        ROW_NUMBER() OVER(ORDER BY EMP_ID ASC, DEPT_ID DESC) as ROW_NUM
		        , COUNT(*) OVER () AS TOTAL_COUNT
		        , T.*
		    FROM (
		        SELECT
		            A.EMP_ID
		            ,A.EMP_NM
		            ,A.COMP_ID
		            ,A.DEPT_ID
		            ,C.DEPT_NM
		            ,B.OFEND_DEPT_CNT
		        FROM
		            CO_EMP A
		            LEFT OUTER JOIN
		            (SELECT EMP_ID, COUNT(DEPT_ID) as OFEND_DEPT_CNT FROM SC_OFEND_AUTH GROUP BY EMP_ID) B ON (A.EMP_ID = B.EMP_ID)
		            ,CO_DEPT C
		        WHERE A.USE_YN = 'Y'
		            AND NVL(HT_CD, 'T') = 'C'
		            <![CDATA[
		            AND B.OFEND_DEPT_CNT > 0
		            ]]> 
		            AND C.DEPT_ID = A.DEPT_ID
		            AND C.USE_YN = 'Y'
		            <if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
		            	AND C.DEPT_NM like '%' || #{searchDeptNm} || '%'
		            </if>
					<if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
						AND A.EMP_NM like '%' || #{searchEmpNm} || '%'
					</if>
		        ) T
		    ) TB  
		<if test='"Y".equals(pagingYn)'>
		WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	
	<!-- 보안 위규자 조회권한 상세정보 List - secrtOfendAuthViewList (ASIS : dmSecrtOfendAuth_View_S ) -->
	<select id="secrtOfendAuthViewList" parameterType="Map" resultType="CamelHashMap">
		/* 보안 위규자 조회권한 상세정보 List - secrtOfendAuthViewList (ASIS : dmSecrtOfendAuth_View_S */
		SELECT
		    A.EMP_ID
		    ,FN_GET_EMP_JW_NM(A.EMP_ID) as EMP_NM
		    ,A.DEPT_ID
		    ,FN_GET_DEPT_NM(A.DEPT_ID) as DEPT_NM
		    ,TO_CHAR(CRT_DTM, 'YYYY-MM-DD HH24:MI:SS') as AUTH_DTM
		FROM
		    SC_OFEND_AUTH A
		WHERE A.EMP_ID = #{empId}
	</select>
	
	<!-- 보안 위규자 권한 삭제 - secrtOfendAuthDelete (ASIS : dmSecrtOfendAuth_D ) -->
	<delete id="secrtOfendAuthDelete" parameterType="java.lang.String">
		/* 보안 위규자 권한 삭제 - secrtOfendAuthDelete (ASIS : dmSecrtOfendAuth_D ) */
		DELETE SC_OFEND_AUTH
		 WHERE EMP_ID = #{0}
	</delete>
	
	<!-- 보안 위규자 직원 권한 삭제 - coEmpAuthDelete (ASIS : dmAuth_D ) -->
	<delete id="coEmpAuthDelete" parameterType="java.lang.String">
		/* 보안 위규자 직원 권한 삭제 - coEmpAuthDelete (ASIS : dmAuth_D ) */
		DELETE FROM CO_EMP_AUTH
		 WHERE EMP_ID  = #{0}
		   AND AUTH_ID = 19
	</delete>
	
	<!-- 보안 위규자 직원 권한 Insert - coEmpAuthInsert (ASIS : dmAuth_I ) -->
	<insert id="coEmpAuthInsert" parameterType="Map">
		/* 보안 위규자 직원 권한 Insert - coEmpAuthInsert (ASIS : dmAuth_I ) */
		INSERT INTO CO_EMP_AUTH(
			EMP_ID
			, AUTH_ID
			, AC_IP 
			, CRT_BY
			, CRT_DTM
			, MOD_BY 
			, MOD_DTM
		) VALUES ( 
			  #{empId}
			, 19
			, #{acIp}
			, #{crtBy}
			, SYSDATE
			, #{crtBy}
			, SYSDATE
		)
	</insert>
	
	<!-- 보안 위규자 권한 Insert - secrtOfendAuthInsert (ASIS : dmSecrtOfendAuth_I ) -->
	<insert id="secrtOfendAuthInsert" parameterType="Map">
		/* 보안 위규자 권한 Insert  - secrtOfendAuthInsert */
		INSERT INTO SC_OFEND_AUTH(
			EMP_ID
			, DEPT_ID
			, AC_IP
			, CRT_BY
			, CRT_DTM
			, MOD_BY
			, MOD_DTM
		) VALUES (
			  #{empId}
			, #{deptId}
			, #{acIp}
			, #{crtBy}
			, SYSDATE
			, #{crtBy}
			, SYSDATE
		)
	</insert>
	
	<!-- 보안교육이수율 관리 조회 - securityTrainingList (ASIS : dmSecurityTraining_List ) -->
	<select id="securityTrainingList" parameterType="Map" resultType="CamelHashMap">
		/* 보안교육이수율 관리 조회 - securityTrainingList (ASIS : dmSecurityTraining_List ) */
		WITH PAGE AS
	    (
		SELECT  ROW_NUMBER() OVER ( ORDER BY STND_YY_MM DESC) AS ROW_NUM
				, COUNT(*) OVER () AS TOTAL_COUNT
				,STND_YY_MM
				,SUBSTR(STND_YY_MM,1,4) ||' / '|| SUBSTR(STND_YY_MM,5,2) AS STND_YYMM
				,EDU_TRGT_PERS_CNT
				,EDU_CMPL_PERS_CNT
				,SEC_EDU_CMPL_RATE
				,ACHV_GOAL
				,TO_CHAR(CRT_DTM,'YYYY-MM-DD HH24:MI:SS') AS CRT_DTM
			FROM SC_EDU_RATE
			WHERE NVL(DEL_YN,'N') = 'N'
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchYear)">
				AND SUBSTR(STND_YY_MM,1,4) = #{searchYear}
			</if>
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchMonth)">
				AND SUBSTR(STND_YY_MM,5,2) = #{searchMonth}
			</if>
		)  
	    SELECT *
	    FROM PAGE T2
		<if test='"Y".equals(pagingYn)'>
		WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	
	<!-- 보안교육이수율 관리 상세 - securityTrainingView (ASIS :  ) -->
	<select id="securityTrainingView" parameterType="Map" resultType="CamelHashMap">
		/* 보안교육이수율 관리 상세 - securityTrainingView */
		SELECT STND_YY_MM
			 , EDU_TRGT_PERS_CNT
			 , EDU_CMPL_PERS_CNT
			 , SEC_EDU_CMPL_RATE
			 , ACHV_GOAL
		  FROM SC_EDU_RATE
		 WHERE DEL_YN = 'N'
		   AND STND_YY_MM = #{stndYyMm}
		   AND ROWNUM = 1
	</select>
	
	<!-- 보안교육이수율 관리 저장  - securityTrainingInsert (ASIS : dmSecurityTraining_Reg ) -->
	<insert id="securityTrainingInsert" parameterType="Map">
		/* 보안교육이수율 관리 저장  - securityTrainingInsert */
		MERGE INTO SC_EDU_RATE T1
	    USING (
	        SELECT #{stndYyMm} AS STND_YY_MM,
				   #{eduTrgtPersCnt} AS EDU_TRGT_PERS_CNT,
				   #{eduCmplPersCnt} AS EDU_CMPL_PERS_CNT,
				   #{secEduCmplRate} AS SEC_EDU_CMPL_RATE,
				   #{achvGoal} AS ACHV_GOAL,
	        	   #{acIp}  AS AC_IP,
	        	   #{crtBy} AS CRT_BY        	  
	       	FROM DUAL ) T2
	    ON (T1.STND_YY_MM = T2.STND_YY_MM)
	    WHEN MATCHED THEN
	        UPDATE SET
	        	 T1.EDU_TRGT_PERS_CNT = T2.EDU_TRGT_PERS_CNT
	        	,T1.EDU_CMPL_PERS_CNT = T2.EDU_CMPL_PERS_CNT
	        	,T1.SEC_EDU_CMPL_RATE = T2.SEC_EDU_CMPL_RATE
	        	,T1.ACHV_GOAL = T2.ACHV_GOAL
	        	,T1.DEL_YN = 'N'      
	        	,T1.CRT_BY = T2.CRT_BY
	         	,T1.CRT_DTM = SYSDATE  	
	        	,T1.MOD_BY = T2.CRT_BY
	        	,T1.MOD_DTM = SYSDATE
	    WHEN NOT MATCHED THEN
	        INSERT 
	        (
	           STND_YY_MM, EDU_TRGT_PERS_CNT, EDU_CMPL_PERS_CNT, 
			   SEC_EDU_CMPL_RATE, ACHV_GOAL, DEL_YN, 
			   AC_IP, CRT_BY, CRT_DTM, 
			   MOD_BY, MOD_DTM     
	        )
	        VALUES
	        (
	          T2.STND_YY_MM
	         ,T2.EDU_TRGT_PERS_CNT
	         ,T2.EDU_CMPL_PERS_CNT
	         ,T2.SEC_EDU_CMPL_RATE
	         ,T2.ACHV_GOAL
	         ,'N'
	         ,T2.AC_IP
	         ,T2.CRT_BY
	         ,SYSDATE
	         ,T2.CRT_BY
	         ,SYSDATE
	        )
	</insert>
	
	<!-- 보안교육이수율 관리 수정  - securityTrainingUpdate (ASIS : dmSecurityTraining_Modify ) -->
	<update id="securityTrainingUpdate" parameterType="Map">
		/* 보안교육이수율 관리 수정  - securityTrainingUpdate  */
		UPDATE SC_EDU_RATE 
		   SET EDU_TRGT_PERS_CNT = #{eduTrgtPersCnt} 
			 , EDU_CMPL_PERS_CNT = #{eduCmplPersCnt}
			 , SEC_EDU_CMPL_RATE = #{secEduCmplRate}
			 , ACHV_GOAL         = #{achvGoal}
			 , MOD_BY			  = #{crtBy}
			 , MOD_DTM       	  = SYSDATE
		 WHERE STND_YY_MM = #{stndYyMm}
	</update>
	
	<!-- 보안교육이수율 관리 삭제  - securityTrainingDelete (ASIS : dmSecurityTraining_Delete ) -->
	<update id="securityTrainingDelete" parameterType="Map">
		/* 보안교육이수율 관리 삭제  - securityTrainingDelete */
		UPDATE SC_EDU_RATE 
		   SET DEL_YN = 'Y'
			 , MOD_BY = #{crtBy}
			 , MOD_DTM = SYSDATE
		 WHERE STND_YY_MM = #{stndYyMm}
	</update>
	
	
	<!-- 보안점수 기준정보 조회 - secureEvalItemAdminList (ASIS : dmSecureEval_EvalItemList ) -->
	<select id="secureEvalItemAdminList" parameterType="Map" resultType="CamelHashMap">
		/* 보안점수 기준정보 조회 - secureEvalItemAdminList */
        SELECT
            A.EVAL_YEAR
           ,A.EVAL_GB
           ,(SELECT DETL_NM FROM CO_CODE_D WHERE GRP_CD = 'C069' AND DETL_CD = A.EVAL_GB) AS EVAL_GB_NM
           ,A.ITEM_SEQ
           ,A.SUBJECT
           ,A.SORT_SEQ
           ,A.SCORE
           ,DECODE(A.GAGAM_ITEM, 'Y', '예', '')                                                  AS GAGAM_ITEM
           ,SUM(DECODE(A.GAGAM_ITEM, 'Y', 0, SCORE)) OVER (PARTITION BY A.EVAL_YEAR, A.EVAL_GB) AS SCORE_SUM
        FROM SC_SECURE_EVAL_ITEM A
       WHERE A.USE_YN = 'Y'  
       <if test="not @org.springframework.util.StringUtils@isEmpty(searchYear)">
       	 AND A.EVAL_YEAR = #{searchYear}
       </if>
       <if test="not @org.springframework.util.StringUtils@isEmpty(searchGb)">
         AND A.EVAL_GB = #{searchGb}
       </if>
	</select>
	
	<!-- 보안점수 기준정보 순번 생성 - secureEvalItemSeq (ASIS : dmSecureEval_EvalItemSeq ) -->
	<select id="secureEvalItemSeq" parameterType="Map" resultType="java.lang.String">
		/* 보안점수 기준정보 순번 생성 - secureEvalItemSeq */
		SELECT NVL(MAX(ITEM_SEQ), 0) + 1 AS ITEM_SEQ
		  FROM SC_SECURE_EVAL_ITEM
		 WHERE EVAL_YEAR = #{evalYear}
		   AND EVAL_GB   = #{evalGb}
	</select>
	
	<!-- 보안점수 기준정보 Insert/Update - secureEvalItemInsert (ASIS : dmSecureEval_EvalItemAdd ) -->
	<update id="secureEvalItemInsert"  parameterType="Map" >
		/* 보안점수 기준정보 Insert/Update - secureEvalItemAdd */
		MERGE INTO SC_SECURE_EVAL_ITEM 
		      USING DUAL 
		      ON ( EVAL_YEAR = #{evalYear} AND EVAL_GB = #{evalGb} AND ITEM_SEQ = #{itemSeq} )
		WHEN MATCHED THEN
		    UPDATE SET
		        SUBJECT       = #{subject}
		      , EVAL_ITEM     = #{evalItem}
		      , EVAL_STANDARD = #{evalStandard}
		      , SORT_SEQ      = #{sortSeq}
		      , SCORE         = #{score}
		      , USE_YN        = #{useYn}
		      , GAGAM_ITEM    = #{gagamItem}
		WHEN NOT MATCHED THEN
		    INSERT ( 
		          EVAL_YEAR
		    	, EVAL_GB
		    	, ITEM_SEQ
		    	, SUBJECT
		    	, EVAL_ITEM
		    	, EVAL_STANDARD
		    	, SORT_SEQ
		    	, SCORE
		    	, USE_YN
		    	, GAGAM_ITEM 
		    ) VALUES ( 
		    	  #{evalYear}
		    	, #{evalGb}
		    	, #{itemSeq}
		    	, #{subject}
		    	, #{evalItem}
		    	, #{evalStandard}
		    	, #{sortSeq}
		    	, #{score}
		    	, #{useYn}
		    	, #{gagamItem}
		    )
	</update>
	
	<!-- 보안점수 기준정보 상세 - secureEvalItemView (ASIS : dmSecureEval_EvalItemDetail  ) -->
	<select id="secureEvalItemView" parameterType="Map" resultType="CamelHashMap">
		/* 보안점수 기준정보  상세- secureEvalItemView */
		SELECT A.EVAL_YEAR
		     , A.EVAL_GB
		     , (SELECT DETL_NM FROM CO_CODE_D WHERE GRP_CD = 'C069' AND DETL_CD = A.EVAL_GB) AS EVAL_GB_NM
		     , A.ITEM_SEQ
		     , A.SUBJECT
		     , A.EVAL_ITEM
		     , A.EVAL_STANDARD
		     , A.SORT_SEQ
		     , A.SCORE
		     , A.USE_YN
		     , A.GAGAM_ITEM
		  FROM SC_SECURE_EVAL_ITEM A
		 WHERE A.EVAL_YEAR = #{evalYear}
		   AND A.EVAL_GB   = #{evalGb}
		   AND A.ITEM_SEQ  = #{itemSeq}
	</select>
	
	
	<!-- 보안점수 기준정보  삭제 - secureEvalItemDelete (ASIS : dmSecureEval_EvalItemDel ) -->
	<delete id="secureEvalItemDelete" parameterType="Map">
		/* 보안 위규자 권한 삭제 - secureEvalItemDelete  */
		DELETE FROM SC_SECURE_EVAL_ITEM
		WHERE EVAL_YEAR = #{evalYear}
		  AND EVAL_GB   = #{evalGb}
		  AND ITEM_SEQ  = #{itemSeq}
	</delete>
	
	
	<!-- 보안점수 기준정보 > 기존 항목 추가 - secureEvalPeriodRefInsert (ASIS : dmSecureEval_PeriodRefAdd ) -->
	<insert id="secureEvalPeriodRefInsert"  parameterType="Map" >
		/* 보안점수 기준정보 > 기존 항목 추가 - secureEvalPeriodRefInsert */
		INSERT INTO SC_SECURE_EVAL_ITEM
		(EVAL_YEAR, EVAL_GB, ITEM_SEQ, SUBJECT, EVAL_ITEM, EVAL_STANDARD, SORT_SEQ, SCORE, USE_YN, GAGAM_ITEM)
		SELECT #{evalYearNew}
		     , #{evalGbNew}
		     , (SELECT NVL(MAX(ITEM_SEQ), 0) 
		          FROM SC_SECURE_EVAL_ITEM 
		         WHERE EVAL_YEAR = #{evalYearNew} 
		           AND EVAL_GB = #{evalGbNew}) + ROWNUM
		     , SUBJECT
		     , EVAL_ITEM
		     , EVAL_STANDARD
		     , SORT_SEQ
		     , SCORE
		     , USE_YN
		     , GAGAM_ITEM
		  FROM SC_SECURE_EVAL_ITEM
		WHERE EVAL_YEAR = #{evalYearRef}
		  AND EVAL_GB   = #{evalGbRef}
	</insert>
	
	
	<!-- 보안점수 기준정보 > 기존 평가부서 조회 - secureEvalDeptMappingList (ASIS : dmSecureEval_DeptMappingList  ) -->
	<select id="secureEvalDeptMappingList" parameterType="Map" resultType="CamelHashMap">
		/* 보안점수 기준정보 > 기존 평가부서 조회 - secureEvalDeptMappingList */
		SELECT DEPT_ID
		     , TOTAL_SCORE
		     , CONFIRM_YN
		  FROM SC_EVAL_TARGET_DEPT
		 WHERE EVAL_YEAR = #{evalYear}
		   AND EVAL_GB   = #{evalGb}
	</select>
	
	<!-- 보안점수 기준정보 > 기존 평가부서 삭제 - secureEvalDeptMappingDelete (ASIS : dmSecureEval_DeptMappingDelete  ) -->
	<delete id="secureEvalDeptMappingDelete" parameterType="Map" >
		/* 보안점수 기준정보 > 기존 평가부서 삭제 - secureEvalDeptMappingDelete */
		DELETE FROM SC_EVAL_TARGET_DEPT
		WHERE EVAL_YEAR = #{evalYear}
		  AND EVAL_GB   = #{evalGb}
	</delete>
	
	<!-- 보안점수 기준정보 > 평가부서 Insert - secureEvalDeptMappingInsert (ASIS : dmSecureEval_DeptMappingInsert  ) -->
	<insert id="secureEvalDeptMappingInsert"  parameterType="Map" >
		/* 보안점수 기준정보 > 평가부서 Insert - secureEvalDeptMappingInsert */
		INSERT INTO SECURITYADM.SC_EVAL_TARGET_DEPT
		(
		   EVAL_YEAR
		 , EVAL_GB
		 , DEPT_ID
		 , TOTAL_SCORE
		 , CONFIRM_YN
		) 
		VALUES 
		( 
			#{evalYear}
		  , #{evalGb}
		  , #{deptId}
		  , #{totalScore}
		  , #{confirmYn}
		)
	</insert>
	
	
	<!-- 보안점수 기준정보 > 평가부서 Tree List - secureEvalDeptTreeList (ASIS : dmSecureEval_EvalDeptList  ) -->
	<select id="secureEvalDeptTreeList" parameterType="Map" resultType="CamelHashMap">
		/* 보안점수 기준정보 > 평가부서 Tree List - secureEvalDeptTreeList (ASIS : dmSecureEval_EvalDeptList  ) */		
		SELECT A.DEPT_NM
			 , A.DEPT_ID
			 , A.UPDEPT_ID
			 , A.DEPTH
			 , A.SUB_DEPT_COUNT
			 , DECODE(B.DEPT_ID, NULL, '', 'Y') AS CHK_YN
		  FROM (
				SELECT A.ORG_NAM AS DEPT_NM
					  , A.ORG_CD AS DEPT_ID
					  , B.ORG_UN_CD
					  , A.PRNT_ORG_CD AS UPDEPT_ID
					  , LEVEL - 1 AS DEPTH
					  , (SELECT COUNT(1)
						  FROM TBL_PT_ORG
						 WHERE PRNT_ORG_CD = A.ORG_CD
						 ) AS SUB_DEPT_COUNT  
				   FROM TBL_PT_ORG A 
				   LEFT OUTER JOIN CO_DEPT B 
				     ON A.ORG_CD = B.DEPT_ID
				   WHERE B.USE_YN = 'Y'
				   AND  B.DEPT_ID NOT IN ('10120881','10120882', '10120813', 'XB20', 'XB21', 'XB22', 'XB23', 'XB24', '10120876', '10120646', '10120645')
				   START WITH A.PRNT_ORG_CD = '10103709'
				   CONNECT BY PRIOR A.ORG_CD = A.PRNT_ORG_CD
				   ORDER SIBLINGS BY A.ORG_NAM
		   		) A
		     , (SELECT IB.DEPT_ID 
		          FROM SC_EVAL_TARGET_DEPT IB 
		         WHERE IB.EVAL_YEAR = #{evalYear}
		           AND IB.EVAL_GB = #{evalGb}
		       ) B
		 WHERE A.DEPT_ID      = B.DEPT_ID(+)
	</select>		
	
	
	<!-- 전사 팀별 보안담당자 조회(RM부서) - secrtDeptSecDeputyRmList (ASIS : dmSecrtDeptSecDeputy_RM_List_S ) -->
	<select id="secrtDeptSecDeputyRmList" parameterType="Map" resultType="CamelHashMap">
		/* 전사 팀별 보안담당자 조회(RM부서) - secrtDeptSecDeputyRmList (ASIS : dmSecrtDeptSecDeputy_RM_List_S ) */
		 SELECT TBB.*
		 FROM (
			 SELECT ROW_NUMBER() OVER(ORDER BY DEPT_ID DESC) AS ROW_NUM
			      , COUNT(*) OVER () AS TOTAL_COUNT
			      , TB.*
			 FROM (
				 SELECT SD.DEPT_ID AS DEPT_ID
			            ,SD.DEPT_NM AS DEPT_NM
			            ,DECODE(SC.EMP_ID,'','조회안됨'
			            ,FN_GET_EMP_JW_NM(SC.EMP_ID)) AS EMP_JW_NM
			            ,NVL(SC.EMP_ID,'조회안됨') AS EMP_ID
			            ,TO_CHAR(SC.CRT_DTM,'YYYY-MM-DD') AS CRT_DT 
			      FROM SC_DEPUTY_RM_DEPT SD,
			            (	SELECT SSS.EMP_ID, SSS.DEPT_ID, SSS.CRT_DTM             
		              		FROM SC_DEPT_SEC SSS
		                  ,( 	SELECT TEMP.DEPT_ID,MAX(TEMP.CRT_DTM) AS CRT_DTM 
		                  		FROM SC_DEPT_SEC TEMP
		                   		WHERE  1=1 AND TEMP.DEL_YN='N' GROUP BY TEMP.DEPT_ID ) TTT
		              		WHERE SSS.DEPT_ID = TTT.DEPT_ID AND SSS.CRT_DTM = TTT.CRT_DTM AND SSS.DEL_YN = 'N' ) SC  
			      WHERE SD.DEPT_ID = SC.DEPT_ID(+)
			        AND SD.DEL_YN = 'N'
			        <if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
			        	AND SD.DEPT_NM like '%' || #{searchDeptNm} || '%'
			        </if>
			 ) TB
		 ) TBB
		 <if test='"Y".equals(pagingYn)'>
		 WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		 </if>
	</select>  
	
	<!-- 전사 팀별 보안담당자 조회(전사) - secrtDeptSecDeputyList (ASIS : dmSecrtDeptSecDeputy_List_S ) -->
	<select id="secrtDeptSecDeputyList" parameterType="Map" resultType="CamelHashMap">
		/* 전사 팀별 보안담당자 조회(전사) - secrtDeptSecDeputyList (ASIS : dmSecrtDeptSecDeputy_List_S ) */
		SELECT TBB.* 
		FROM (
			SELECT TB.*
			     , COUNT(*) OVER () AS TOTAL_COUNT
			     , ROW_NUMBER() OVER(ORDER BY DEPT_ID DESC) AS ROW_NUM
				FROM (
					  SELECT SC.DEPT_ID AS DEPT_ID
					         ,CO.DEPT_NM AS DEPT_NM
					         ,DECODE(SC.EMP_ID,NULL,'조회안됨',FN_GET_EMP_JW_NM(SC.EMP_ID)) AS EMP_JW_NM
					         ,NVL(SC.EMP_ID,'조회안됨') AS EMP_ID
					         ,TO_CHAR(SC.CRT_DTM,'YYYY-MM-DD') AS CRT_DT 
					  FROM ( 	SELECT TEMP1.ORG_CD AS DEPT_ID, TEMP1.ORG_NAM AS DEPT_NM 
			    				FROM MDM_IF_OR TEMP1
		              			WHERE TEMP1.ORG_END_DT > TO_CHAR(SYSDATE,'YYYYMMDD')) CO,  
					      	(SELECT SSS.EMP_ID, SSS.DEPT_ID, SSS.CRT_DTM             
		             		 FROM SC_DEPT_SEC SSS
		                  		,( 	SELECT TEMP.DEPT_ID,MAX(TEMP.CRT_DTM) AS CRT_DTM 
		                  			FROM SC_DEPT_SEC TEMP
		                   	 		WHERE  1=1 AND TEMP.DEL_YN='N' GROUP BY TEMP.DEPT_ID ) TTT
		             		 WHERE SSS.DEPT_ID = TTT.DEPT_ID AND SSS.CRT_DTM = TTT.CRT_DTM AND SSS.DEL_YN = 'N' ) SC      
					  WHERE
					    CO.DEPT_ID = SC.DEPT_ID
					  UNION ALL
					    SELECT CO.DEPT_ID AS DEPT_ID
					         ,CO.DEPT_NM AS DEPT_NM
					         ,DECODE(SC.EMP_ID,NULL,'조회안됨',FN_GET_EMP_JW_NM(SC.EMP_ID)) AS EMP_JW_NM
					         ,NVL(SC.EMP_ID,'조회안됨') AS EMP_ID
					         ,TO_CHAR(SC.CRT_DTM,'YYYY-MM-DD') AS CRT_DT 
					  FROM (SELECT TEMP1.ORG_CD AS DEPT_ID, TEMP1.ORG_NAM AS DEPT_NM FROM MDM_IF_OR TEMP1
		              WHERE TEMP1.ORG_END_DT > TO_CHAR(SYSDATE,'YYYYMMDD')) CO, 
					        (SELECT SSS.EMP_ID, SSS.DEPT_ID, SSS.CRT_DTM             
		              FROM SC_DEPT_SEC SSS
		                  ,( SELECT TEMP.DEPT_ID,MAX(TEMP.CRT_DTM) AS CRT_DTM FROM SC_DEPT_SEC TEMP
		                   WHERE  1=1 AND TEMP.DEL_YN='N' GROUP BY TEMP.DEPT_ID ) TTT
		              WHERE SSS.DEPT_ID = TTT.DEPT_ID AND SSS.CRT_DTM = TTT.CRT_DTM AND SSS.DEL_YN = 'N' ) SC       
					  WHERE CO.DEPT_ID = SC.DEPT_ID(+)
					    AND CO.DEPT_ID IN (
						    '10105015' /* NM 공정그룹*/
						    ,'10110189' /* FC-Cu기술팀*/
						    ,'10110380' /* HR팀*/
						    ,'10111643' /* 경영전략실*/
						    ,'10111776' /* SW-Engineering TF*/
						    ,'10112973' /* G-ERPTF*/
						    ,'10120883' /* S-Project*/
						    ,'10120906' /* F-NDT팀*/
						    ,'10120909' /* G-ERPTF*/
						    ,'10120910' /* G-EIM팀*/
						    ,'10120919' /* PSC팀*/
						    ,'10120920' /* FAB QE 팀*/
						    ,'10120921' /* PnT QE 팀*/
						    ,'10120922' /* C-QE팀*/
						    ,'10120927' /* M14 ProjectTF*/
						    /* ,'10120933' 차세대개발 TF*/
						    ,'50057780' /* R-Project*/
						    ,'50057932' /* PE-TF*/
						    ,'50057946' /* U-Project*/
						    ,'50058131' /* 환경보건팀*/
						    ,'50059874' /* NAND총괄 기획그룹*/
						    ,'50059953' /* 미래기술전략 총괄 기획팀*/
						    ,'50059973' /* DRAM 공정팀*/
						    ,'50060551' /* Mobile Test 기술팀*/
						    ,'50060707' /* E-Project*/
						    ,'50061032' /* NAND 소자 N팀*/
						    ,'50061058' /* GM-Project*/
						    ,'50061059' /* SS-Project*/
						    ,'50061061' /* IS-Project*/
						    ,'50061062' /* YS-Project*/
					    )
			) TB
			WHERE 1=1
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
				AND TB.DEPT_NM like '%' || #{searchDeptNm} || '%'
			</if>
		  ) TBB
		<if test='"Y".equals(pagingYn)'>
		WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	
	<!-- 전사 팀별 보안담당자 조회(RM부서) 엑셀다운 - secrtDeptSecDeputyRmListExcel (ASIS : dmSecrtDeptSecDeputy_RM_Excel_List_S ) -->
	<select id="secrtDeptSecDeputyRmListExcel" parameterType="Map" resultType="CamelHashMap">
		/* 전사 팀별 보안담당자 조회(RM부서) 엑셀다운 - secrtDeptSecDeputyRmListExcel (ASIS : dmSecrtDeptSecDeputy_RM_Excel_List_S ) */
		SELECT
		    TB.*
		FROM (
		    SELECT
		        ROW_NUMBER() OVER(ORDER BY DEPT_ID DESC) AS ROW_NUM
		        ,T.*
		    FROM (	 
				SELECT TEMP.DEPT_ID AS DEPT_ID
			         ,TEMP.DEPT_NM AS DEPT_NM
			         ,TEMP.EMP_JW_NM AS EMP_JW_NM
			         ,TEMP.EMP_ID AS EMP_ID
			         ,FN_GET_EMP_TEL_NO(FN_GET_EMP_NM(TEMP.EMP_ID),TEMP.EMP_ID) AS EMP_TEL_NO
			         ,TEMP.CRT_DT AS CRT_DT
			         ,FN_GET_EMP_JW_NM(CD.MGR_EMP_ID) AS TEAM_EMP_JW_NM
			         ,CD.MGR_EMP_ID AS TEAM_EMP_ID
			         ,FN_GET_EMP_TEL_NO(FN_GET_EMP_NM(CD.MGR_EMP_ID),CD.MGR_EMP_ID) AS TEAM_EMP_TEL_NO
			         ,FN_GET_TOP_DIV_CD(5,TEMP.DEPT_ID) AS GRP_DEPT_ID
			         ,FN_GET_DEPT_NM(FN_GET_TOP_DIV_CD(5,TEMP.DEPT_ID)) AS GRP_DEPT_NM
			         ,FN_GET_TOP_MGR_EMP_ID(5,TEMP.DEPT_ID) AS GRP_EMP_ID
			         ,FN_GET_EMP_TEL_NO(FN_GET_EMP_NM(FN_GET_TOP_MGR_EMP_ID(5,TEMP.DEPT_ID)),  FN_GET_TOP_MGR_EMP_ID(5,TEMP.DEPT_ID)) AS GRP_EMP_TEL_NO
			         ,FN_GET_EMP_JW_NM(FN_GET_TOP_MGR_EMP_ID(5,TEMP.DEPT_ID)) AS GRP_EMP_JW_NM
			  	FROM (
			   		SELECT SD.DEPT_ID AS DEPT_ID
				            ,SD.DEPT_NM AS DEPT_NM
				            ,DECODE(SC.EMP_ID,'','조회안됨',FN_GET_EMP_JW_NM(SC.EMP_ID)) AS EMP_JW_NM
				            ,NVL(SC.EMP_ID,'조회안됨') AS EMP_ID
				            ,TO_CHAR(SC.CRT_DTM,'YYYY-MM-DD') AS CRT_DT 
				      FROM SC_DEPUTY_RM_DEPT SD,
				            (SELECT SSS.EMP_ID, SSS.DEPT_ID, SSS.CRT_DTM             
		              		 FROM SC_DEPT_SEC SSS
		                  	 	,( SELECT TEMP.DEPT_ID,MAX(TEMP.CRT_DTM) AS CRT_DTM 
		                  	 	   FROM SC_DEPT_SEC TEMP
		                   		   WHERE  1=1 AND TEMP.DEL_YN='N' GROUP BY TEMP.DEPT_ID ) TTT
		              		 WHERE SSS.DEPT_ID = TTT.DEPT_ID AND SSS.CRT_DTM = TTT.CRT_DTM AND SSS.DEL_YN = 'N' ) SC  
				      WHERE SD.DEPT_ID = SC.DEPT_ID(+)
				        	AND SD.DEL_YN = 'N'		        
			          ) TEMP , CO_DEPT CD
			   WHERE TEMP.DEPT_ID = CD.DEPT_ID 
			   ) T
			   WHERE 1=1
			   <if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
		       		AND T.DEPT_NM like '%' || #{searchDeptNm} || '%'
		       </if>
			) TB
			ORDER BY TB.DEPT_ID DESC
	</select>
	
	<!-- 전사 팀별 보안담당자 조회(전사)엑셀다운 - secrtDeptSecDeputyListExcel (ASIS : dmSecrtDeptSecDeputy_Excel_List_S ) -->
	<select id="secrtDeptSecDeputyListExcel" parameterType="Map" resultType="CamelHashMap">
		/* 전사 팀별 보안담당자 조회(전사)엑셀다운 - secrtDeptSecDeputyListExcel (ASIS : dmSecrtDeptSecDeputy_Excel_List_S ) */
		SELECT
		    TB.*
		FROM (
		    SELECT
		        ROW_NUMBER() OVER(ORDER BY DEPT_ID DESC) AS ROW_NUM
		        ,T.*
		    FROM (	 
			SELECT TEMP.DEPT_ID AS DEPT_ID
			       ,TEMP.DEPT_NM AS DEPT_NM
			       ,TEMP.EMP_JW_NM AS EMP_JW_NM
			       ,TEMP.EMP_ID AS EMP_ID
			       ,FN_GET_EMP_TEL_NO(FN_GET_EMP_NM(TEMP.EMP_ID),TEMP.EMP_ID) AS EMP_TEL_NO
			       ,TEMP.CRT_DT AS CRT_DT
			       ,FN_GET_EMP_JW_NM(CD.MGR_EMP_ID) AS TEAM_EMP_JW_NM
			       ,CD.MGR_EMP_ID AS TEAM_EMP_ID
			       ,FN_GET_EMP_TEL_NO(FN_GET_EMP_NM(CD.MGR_EMP_ID),CD.MGR_EMP_ID) AS TEAM_EMP_TEL_NO
			       ,FN_GET_TOP_DIV_CD(5,TEMP.DEPT_ID) AS GRP_DEPT_ID
			       ,FN_GET_DEPT_NM(FN_GET_TOP_DIV_CD(5,TEMP.DEPT_ID)) AS GRP_DEPT_NM
			       ,FN_GET_TOP_MGR_EMP_ID(5,TEMP.DEPT_ID) AS GRP_EMP_ID
			       ,FN_GET_EMP_TEL_NO(FN_GET_EMP_NM(FN_GET_TOP_MGR_EMP_ID(5,TEMP.DEPT_ID)),  FN_GET_TOP_MGR_EMP_ID(5,TEMP.DEPT_ID)) AS GRP_EMP_TEL_NO
			       ,FN_GET_EMP_JW_NM(FN_GET_TOP_MGR_EMP_ID(5,TEMP.DEPT_ID)) AS GRP_EMP_JW_NM
			  FROM (
			    SELECT SC.DEPT_ID AS DEPT_ID
			           ,CO.DEPT_NM AS DEPT_NM
			           ,DECODE(SC.EMP_ID,NULL,'조회안됨',FN_GET_EMP_JW_NM(SC.EMP_ID)) AS EMP_JW_NM
			           ,NVL(SC.EMP_ID,'조회안됨') AS EMP_ID
			           ,TO_CHAR(SC.CRT_DTM,'YYYY-MM-DD') AS CRT_DT 
			    FROM ( 	SELECT TEMP1.ORG_CD AS DEPT_ID, TEMP1.ORG_NAM AS DEPT_NM 
			    		FROM MDM_IF_OR TEMP1
		              	WHERE TEMP1.ORG_END_DT > TO_CHAR(SYSDATE,'YYYYMMDD')) CO, 
			         (	SELECT SSS.EMP_ID, SSS.DEPT_ID, SSS.CRT_DTM             
		              	FROM SC_DEPT_SEC SSS
		                  	,( 	SELECT TEMP.DEPT_ID,MAX(TEMP.CRT_DTM) AS CRT_DTM 
		                  		FROM SC_DEPT_SEC TEMP
		                   		WHERE  1=1 AND TEMP.DEL_YN='N' GROUP BY TEMP.DEPT_ID ) TTT
		              	WHERE SSS.DEPT_ID = TTT.DEPT_ID AND SSS.CRT_DTM = TTT.CRT_DTM AND SSS.DEL_YN = 'N' ) SC       
			    WHERE
			      CO.DEPT_ID = SC.DEPT_ID
			      <if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
					AND CO.DEPT_NM like '%' || #{searchDeptNm} || '%'
				  </if>
			    UNION ALL
			      SELECT CO.DEPT_ID AS DEPT_ID
			           ,CO.DEPT_NM AS DEPT_NM
			           ,DECODE(SC.EMP_ID,NULL,'조회안됨',FN_GET_EMP_JW_NM(SC.EMP_ID)) AS EMP_JW_NM
			           ,NVL(SC.EMP_ID,'조회안됨') AS EMP_ID
			           ,TO_CHAR(SC.CRT_DTM,'YYYY-MM-DD') AS CRT_DT 
			    FROM (SELECT TEMP1.ORG_CD AS DEPT_ID, TEMP1.ORG_NAM AS DEPT_NM FROM MDM_IF_OR TEMP1
		              WHERE TEMP1.ORG_END_DT > TO_CHAR(SYSDATE,'YYYYMMDD')) CO, 
			          (SELECT SSS.EMP_ID, SSS.DEPT_ID, SSS.CRT_DTM             
		              FROM SC_DEPT_SEC SSS
		                  ,( SELECT TEMP.DEPT_ID,MAX(TEMP.CRT_DTM) AS CRT_DTM FROM SC_DEPT_SEC TEMP
		                   WHERE  1=1 AND TEMP.DEL_YN='N' GROUP BY TEMP.DEPT_ID ) TTT
		              WHERE SSS.DEPT_ID = TTT.DEPT_ID AND SSS.CRT_DTM = TTT.CRT_DTM AND SSS.DEL_YN = 'N' ) SC       
			    WHERE
			      CO.DEPT_ID = SC.DEPT_ID(+)
			      AND CO.DEPT_ID IN ( 
				      '10105015' /* NM 공정그룹*/
				      ,'10110189' /*FC-Cu기술팀*/
				      ,'10110380' /* HR팀*/
				      ,'10111643' /* 경영전략실*/
				      ,'10111776' /* SW-Engineering TF*/
				      ,'10112973' /* G-ERPTF*/
				      ,'10120883' /* S-Project*/
				      ,'10120906' /* F-NDT팀*/
				      ,'10120909' /* G-ERPTF*/
				      ,'10120910' /* G-EIM팀*/
				      ,'10120919' /* PSC팀*/
				      ,'10120920' /* FAB QE 팀*/
				      ,'10120921' /* PnT QE 팀*/
				      ,'10120922' /* C-QE팀*/
				      ,'10120927' /* M14 ProjectTF*/
				     /* ,'10120933' 차세대개발 TF*/
				      ,'50057780' /* R-Project*/
				      ,'50057932' /* PE-TF*/
				      ,'50057946' /* U-Project*/
				      ,'50058131' /* 환경보건팀*/
				      ,'50059874' /* NAND총괄 기획그룹*/
				      ,'50059953' /* 미래기술전략 총괄 기획팀*/
				      ,'50059973' /* DRAM 공정팀*/
				      ,'50060551' /* Mobile Test 기술팀*/
				      ,'50060707' /* E-Project*/
				      ,'50061032' /* NAND 소자 N팀*/
				      ,'50061058' /* GM-Project*/
				      ,'50061059' /* SS-Project*/
				      ,'50061061' /* IS-Project*/
				      ,'50061062' /* YS-Project*/
			      )
			  ) TEMP, CO_DEPT CD
			  WHERE TEMP.DEPT_ID = CD.DEPT_ID 
			 )T
			 WHERE 1=1
			 <if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
				AND T.DEPT_NM like '%' || #{searchDeptNm} || '%'
			 </if>
			)TB
			ORDER BY DEPT_ID DESC
	</select>
	
	<!-- 문서자가점검 이력 조회 - secrtDocSelfCheckList (ASIS : dmSecrtDocSelfCheckList ) -->
	<select id="secrtDocSelfCheckList" parameterType="Map" resultType="CamelHashMap">
		/* 문서자가점검 이력 조회 - secrtDocSelfCheckList (ASIS : dmSecrtDocSelfCheckList ) */
		SELECT * FROM (
			SELECT ROW_NUMBER() OVER( ORDER BY A.DSC_SEQ DESC ) AS ROW_NUM
				 , COUNT(*) OVER () AS TOTAL_COUNT
			     , A.DSC_SEQ
			     , A.EMP_ID	
			     , A.EMP_NM AS EMP_NM_ORG
			     , B.EMP_NM
			     , FN_GET_JW_NM(B.JW_ID) AS JW_NM
			     , C.DEPT_NM
			     , C.DEPT_LV4
			     , C.DEPT_LV5
				 , A.AC_IP
				 , A.CRT_BY
				 , TO_CHAR(A.CRT_DTM, 'YYYY-MM-DD HH24:MI') AS CRT_DTM
			  FROM SC_DOC_SELF_CHECK A, CO_EMP B, CO_DEPT C
			 WHERE A.EMP_ID = B.EMP_ID(+)
			    AND B.DEPT_ID = C.DEPT_ID(+)
			    <if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
			    <![CDATA[
			    	AND TO_CHAR(A.CRT_DTM,'YYYYMMDD') >= REPLACE(#{searchStrtDt}, '-', '')
			    ]]>
			    </if>
			    <if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
			    <![CDATA[
			    	AND TO_CHAR(A.CRT_DTM,'YYYYMMDD') <= REPLACE(#{searchEndDt}, '-', '')
			    ]]>	
			    </if>
			    <if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptLv4)">
			    	AND C.DEPT_LV4 LIKE '%'||UPPER(#{searchDeptLv4})||'%'
			    </if>
			    <if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptLv5)">
			    	AND C.DEPT_NM LIKE '%'||UPPER(#{searchDeptLv5})||'%'
			    </if>
			    <if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
			    	AND B.EMP_NM LIKE '%'||UPPER(#{searchEmpNm})||'%'
			    </if>
		)
		<if test='"Y".equals(pagingYn)'>
		WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	
	
	<!-- 문서자가점검 이력 조회 엑셀다운 - secrtDocSelfCheckListExcel (ASIS : dmSecrtDocSelfCheckExcel ) -->
	<select id="secrtDocSelfCheckListExcel" parameterType="Map" resultType="CamelHashMap">
		/* 문서자가점검 이력 조회 엑셀다운 - secrtDocSelfCheckListExcel (ASIS : dmSecrtDocSelfCheckExcel ) */
		SELECT ROW_NUMBER() OVER( ORDER BY A.DSC_SEQ DESC ) AS ROW_NUM
			     , A.DSC_SEQ
			     , A.EMP_ID	
			     , B.EMP_NM
			     , A.EMP_NM AS EMP_NM_ORG
			     , FN_GET_JW_NM(B.JW_ID) AS JW_NM
			     , C.DEPT_NM
			     , C.DEPT_LV4
			     , C.DEPT_LV5
				 , A.AC_IP
				 , A.CRT_BY
				 , TO_CHAR(A.CRT_DTM, 'YYYY-MM-DD HH24:MI') AS CRT_DTM    
			  FROM SC_DOC_SELF_CHECK A, CO_EMP B, CO_DEPT C
			 WHERE A.EMP_ID = B.EMP_ID(+)
			    AND B.DEPT_ID = C.DEPT_ID(+)
			    <if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
			    <![CDATA[
			    	AND TO_CHAR(A.CRT_DTM,'YYYYMMDD') >= REPLACE(#{searchStrtDt}, '-', '')
			    ]]>
			    </if>
			    <if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
			    <![CDATA[
			    	AND TO_CHAR(A.CRT_DTM,'YYYYMMDD') <= REPLACE(#{searchEndDt}, '-', '')
			    ]]>	
			    </if>
			    <if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptLv4)">
			    	AND C.DEPT_LV4 LIKE '%'||UPPER(#{searchDeptLv4})||'%'
			    </if>
			    <if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptLv5)">
			    	AND C.DEPT_NM LIKE '%'||UPPER(#{searchDeptLv5})||'%'
			    </if>
			    <if test="not @org.springframework.util.StringUtils@isEmpty(searchEmpNm)">
			    	AND B.EMP_NM LIKE '%'||UPPER(#{searchEmpNm})||'%'
			    </if>
	</select>
	
	<!-- 개인정보 위탁업체 교육 이수현황 조회 - securityEduNoticeList (ASIS : dmSecurityEduNoticeSearch_adm ) -->
	<select id="securityEduNoticeList" parameterType="Map" resultType="CamelHashMap">
		/* 개인정보 위탁업체 교육 이수현황 조회 - securityEduNoticeList (ASIS : dmSecurityEduNoticeSearch_adm ) */
		WITH PAGE AS
			(
			SELECT T1.*
			  FROM (	
				SELECT 
					TO_CHAR(EDU_COMP_DTM,'YYYY-MM-DD') AS EDU_COMP_DTM,
					( SELECT TITLE FROM HP_BOARD WHERE BOARD_NO = A.BOARD_NO) AS TITLE,
					IO_EMP_ID, 
					IO_EMP_NM, 
					JW_NM, 
					(SELECT COMP_KO_NM FROM  IO_COMP WHERE IO_COMP_ID =  A.IO_COMP_ID)  AS COMP_NM,
					CRT_DTM
				 FROM PSN_EDU_HIST A
				 ORDER BY CRT_DTM
			) T1
		)
		SELECT T3.*
		  FROM (
			SELECT ROW_NUMBER() OVER( ORDER BY T2.CRT_DTM DESC ) AS ROW_NUM
		    	 , COUNT(*) OVER () AS TOTAL_COUNT
			     , T2.*
			  FROM PAGE T2		 
			 WHERE 1 = 1
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
			<![CDATA[
				AND REPLACE(T2.EDU_COMP_DTM, '-', '') >= REPLACE(#{searchStrtDt}, '-', '')
			]]>
			</if>
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
			<![CDATA[
				AND REPLACE(T2.EDU_COMP_DTM, '-', '') <= REPLACE(#{searchEndDt}, '-', '')
			]]>
			</if>
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchName)">
				AND T2.IO_EMP_NM LIKE '%'|| #{searchName} ||'%'
			</if>
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchCompNm)">
				AND T2.COMP_NM LIKE '%'|| #{searchCompNm} ||'%'
			</if>
		 ) T3
		<if test='"Y".equals(pagingYn)'>
		WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	
	<!-- 개인정보 위탁업체 교육 이수현황 조회 엑셀다운 - securityEduNoticeListExcel (ASIS : dmSecurityEduNoticeExcel ) -->
	<select id="securityEduNoticeListExcel" parameterType="Map" resultType="CamelHashMap">
		/* 개인정보 위탁업체 교육 이수현황 조회 - securityEduNoticeListExcel (ASIS : dmSecurityEduNoticeExcel ) */
		WITH PAGE AS
			(
			SELECT T1.*
			  FROM (	
				SELECT 
					TO_CHAR(EDU_COMP_DTM,'YYYY-MM-DD') AS EDU_COMP_DTM,
					( SELECT TITLE FROM HP_BOARD WHERE BOARD_NO = A.BOARD_NO) AS TITLE,
					IO_EMP_ID, 
					IO_EMP_NM, 
					JW_NM, 
					(SELECT COMP_KO_NM FROM  IO_COMP WHERE IO_COMP_ID =  A.IO_COMP_ID)  AS COMP_NM,
					CRT_DTM
				 FROM PSN_EDU_HIST A
				 ORDER BY CRT_DTM
			) T1
		)
		SELECT ROW_NUMBER() OVER( ORDER BY T2.CRT_DTM DESC ) AS ROW_NUM
		     , T2.*
		  FROM PAGE T2		 
		 WHERE 1 = 1
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
		<![CDATA[
			AND REPLACE(T2.EDU_COMP_DTM, '-', '') >= REPLACE(#{searchStrtDt}, '-', '')
		]]>
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
		<![CDATA[
			AND REPLACE(T2.EDU_COMP_DTM, '-', '') <= REPLACE(#{searchEndDt}, '-', '')
		]]>
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchName)">
			AND T2.IO_EMP_NM LIKE '%'|| #{searchName} ||'%'
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchCompNm)">
			AND T2.COMP_NM LIKE '%'|| #{searchCompNm} ||'%'
		</if>
	</select>
	
	<!-- 모바일 포렌직서약서 조회 - securityMobilePledgeSignList (ASIS : dmSelectSecurityMobilePledgeSignList ) -->
	<select id="securityMobilePledgeSignList" parameterType="Map" resultType="CamelHashMap">
		/* 모바일 포렌직서약서 조회 - securityMobilePledgeSignList (ASIS : dmSelectSecurityMobilePledgeSignList ) */
		SELECT TB.*
		  FROM (
				SELECT  FRS_PLDG_NO
					   ,PLDG_EMP_YN
					   ,PLDG_EMP_NM
					   ,COMP_ID
					   ,COMP_NM
					   ,REG_DT
					   ,EMP_ID
					   ,PLDG_EMP_DEPT_NM
					   ,PLDG_IO_COMP_NM
					   ,DECODE(PLDG_EMP_YN,'Y',PLDG_EMP_DEPT_NM,PLDG_IO_COMP_NM) AS REP_PLDG_EMP_DEPT_NM
					   ,NVL(PLDG_EMP_DEPT_NM,PLDG_IO_COMP_NM) AS REP_PLDG_EMP_DEPT_NM_CHK
					   ,PLDG_EMP_ID
					   ,PLDG_IO_EMP_ID
					   ,DECODE(PLDG_EMP_YN,'Y',PLDG_EMP_ID,PLDG_IO_EMP_ID) AS REP_PLDG_EMP_ID
					   ,NVL(PLDG_EMP_ID,PLDG_IO_EMP_ID) AS REP_PLDG_EMP_ID_CHK
					   ,PLDG_NM
					   ,DECODE(PLDG_EMP_YN,'Y',PLDG_EMP_JW_NM,PLDG_IO_EMP_JW_NM) AS REP_PLDG_EMP_JW_NM
					   ,NVL(PLDG_EMP_JW_NM,PLDG_IO_EMP_JW_NM) AS REP_PLDG_EMP_JW_NM_CHK
					   ,CRT_DTM
					   ,ROW_NUM
					   , COUNT(*) OVER () AS TOTAL_COUNT
				  FROM (
						SELECT  FRS_PLDG_NO
							   ,COMP_ID
							   ,FN_GET_COMP_NM(COMP_ID) AS COMP_NM
							   ,REG_DT
							   ,EMP_ID
							   ,PLDG_EMP_YN
							   ,DECODE(PLDG_EMP_YN,'Y','구성원','외부인') AS PLDG_EMP_NM
							   ,PLDG_EMP_DEPT_ID
							   ,FN_GET_DEPT_NM(PLDG_EMP_DEPT_ID) AS PLDG_EMP_DEPT_NM
							   ,PLDG_IO_COMP_NM
							   ,PLDG_EMP_ID
							   ,PLDG_IO_EMP_ID
							   ,PLDG_NM
							   ,PLDG_EMP_JW_ID
							   ,FN_GET_JW_NM(PLDG_EMP_JW_ID) AS PLDG_EMP_JW_NM
							   ,PLDG_IO_EMP_JW_NM
							   ,TO_CHAR(CRT_DTM,'YYYY-MM-DD HH24:MI:SS') AS REG_DTM
							   ,SUBSTR(REG_DT,1,4) || '-' ||  SUBSTR(REG_DT,5,2) || '-' ||  SUBSTR(REG_DT,7,2) || ' ' || SUBSTR(REG_DT,9,2) || ':' ||  SUBSTR(REG_DT,11,2) || ':' ||  SUBSTR(REG_DT,13,2) AS CRT_DTM
							   ,ROW_NUMBER() OVER(ORDER BY FRS_PLDG_NO DESC)  AS ROW_NUM
						  FROM SC_MOBILE_FRS_PLDG
						 WHERE 1 = 1
						<if test="not @org.springframework.util.StringUtils@isEmpty(searchStrtDt)">
						<![CDATA[
							AND REG_DT >= REPLACE(#{searchStrtDt},'-','') ||'000000'
						]]>
						</if>
						<if test="not @org.springframework.util.StringUtils@isEmpty(searchEndDt)">
						<![CDATA[
							AND REG_DT <= REPLACE(#{searchEndDt},'-','') ||'235959'
						]]>
						</if>
						<if test="not @org.springframework.util.StringUtils@isEmpty(searchCompId)">
							AND COMP_ID = (SELECT ETC1 FROM CO_CODE_D WHERE GRP_CD = 'A064' AND DETL_CD = #{searchCompId} AND ROWNUM = 1)
						</if>
						<if test="not @org.springframework.util.StringUtils@isEmpty(searchPldgEmpYn)">
							AND PLDG_EMP_YN = #{searchPldgEmpYn}
						</if>
						<if test="not @org.springframework.util.StringUtils@isEmpty(searchPldgNm)">
							AND UPPER(PLDG_NM) LIKE '%'||UPPER(#{searchPldgNm})||'%'
						</if>
					   )
				 WHERE 1 = 1
				 <if test="not @org.springframework.util.StringUtils@isEmpty(searchPldgEmpYn)">
				 	<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
					 	<if test='"Y".equals(searchPldgEmpYn)'>
					 		AND UPPER(PLDG_EMP_DEPT_NM) LIKE '%'||UPPER(#{searchDeptNm})||'%'
					 	</if>
					 	<if test='"N".equals(searchPldgEmpYn)'>
					 		AND UPPER(PLDG_IO_COMP_NM) LIKE '%'||UPPER(#{searchDeptNm})||'%'
					 	</if>
				 	</if>
				 </if>
				 <if test="@org.springframework.util.StringUtils@isEmpty(searchPldgEmpYn)">
				 	<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
				 		AND (   UPPER(PLDG_EMP_DEPT_NM) LIKE '%'||UPPER(#{searchDeptNm})||'%'
							OR UPPER(PLDG_IO_COMP_NM) LIKE '%'||UPPER(#{searchDeptNm})||'%' )
				 	</if>
				 </if>
			) TB
		<if test='"Y".equals(pagingYn)'>
			WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	
	<!-- 모바일 포렌직서약서 상세 - securityMobilePledgeSignView (ASIS : dmSelectSecurityMobilePledgeSignView ) -->
	<select id="securityMobilePledgeSignView" parameterType="Map" resultType="CamelHashMap">
		/* 모바일 포렌직서약서 상세 - securityMobilePledgeSignView (ASIS : dmSelectSecurityMobilePledgeSignView ) */
		SELECT  FRS_PLDG_NO
				   ,PLDG_EMP_YN
				   ,PLDG_EMP_NM
				   ,COMP_ID
				   ,PLDG_EMP_DEPT_NM
				   ,PLDG_IO_COMP_NM
				   ,DECODE(PLDG_EMP_YN,'Y',PLDG_EMP_DEPT_NM,PLDG_IO_COMP_NM) AS REP_PLDG_EMP_DEPT_NM
				   ,PLDG_EMP_ID
				   ,PLDG_IO_EMP_ID
				   ,DECODE(PLDG_EMP_YN,'Y',PLDG_EMP_ID,PLDG_IO_EMP_ID) AS REP_PLDG_EMP_ID
				   ,PLDG_NM
				   ,DECODE(PLDG_EMP_YN,'Y',PLDG_EMP_JW_NM,PLDG_IO_EMP_JW_NM) AS REP_PLDG_EMP_JW_NM
				   ,DECODE(PLDG_EMP_YN,'Y',PLDG_EMP_INNO,PLDG_IO_EMP_HP_NO) AS REP_PLDG_EMP_INNO
				   ,PLDG_NAME_FILE
				   ,PLDG_SIGN_FILE
				   ,COMP_NM
				   ,FN_GET_EMP_NM(EMP_ID) AS EMP_NM
				   ,FN_GET_JW_NM(JW_ID) AS EMP_JW_NM
				   ,CRT_DT
				   ,CRT_TM
				   ,SUBSTR(SIGN_DT,1,4) || '년 ' || SUBSTR(SIGN_DT,5,2) || '월 ' || SUBSTR(SIGN_DT,7,2) || '일' AS SIGN_DT
		  FROM (
					SELECT  FRS_PLDG_NO
							   ,COMP_ID
							   ,FN_GET_COMP_NM(COMP_ID) AS COMP_NM
							   ,PLDG_EMP_YN
							   ,DECODE(PLDG_EMP_YN,'Y','구성원','외부인') AS PLDG_EMP_NM
							   ,PLDG_EMP_DEPT_ID
							   ,FN_GET_DEPT_NM(PLDG_EMP_DEPT_ID) AS PLDG_EMP_DEPT_NM
							   ,PLDG_IO_COMP_NM
							   ,PLDG_EMP_ID
							   ,PLDG_IO_EMP_ID
							   ,PLDG_NM
							   ,PLDG_EMP_JW_ID
							   ,FN_GET_JW_NM(PLDG_EMP_JW_ID) AS PLDG_EMP_JW_NM
							   ,PLDG_IO_EMP_JW_NM
							   ,PLDG_EMP_INNO
							   ,PLDG_IO_EMP_HP_NO
							   ,PLDG_NAME_FILE
							   ,PLDG_SIGN_FILE
							   ,EMP_ID
							   ,(SELECT JW_ID FROM CO_EMP WHERE EMP_ID = A.CRT_BY) AS JW_ID
							   ,SUBSTR(REG_DT,1,4) || '-' ||  SUBSTR(REG_DT,5,2) || '-' ||  SUBSTR(REG_DT,7,2) AS CRT_DT
		                       ,SUBSTR(REG_DT,9,2) || ':' ||  SUBSTR(REG_DT,11,2) AS CRT_TM
		                       ,SUBSTR(REG_DT,1,8) AS SIGN_DT
					  FROM SC_MOBILE_FRS_PLDG A
					 WHERE FRS_PLDG_NO = #{frsPldgNo}
					   AND REG_DT = #{keyRegDt}
					   AND COMP_ID = #{keyCompId}
					   AND EMP_ID = #{keyEmpId}
		           )
	</select>
	
	<!-- 정보보호서약서 조회 - securityPledgeList (ASIS : dmSelectSecurityPledgeList ) -->
	<select id="securityPledgeList" parameterType="Map" resultType="CamelHashMap">
		/* 정보보호서약서 조회 - securityPledgeList (ASIS : dmSelectSecurityPledgeList ) */
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchDept)">
		WITH SEC_DEPT AS (
			SELECT B.DEPT_ID, B.DEPT_NM
		    FROM SC_DEPT_SEC_EMP A
		       , CO_DEPT B
		    WHERE A.ENA_DEPT_ID = B.DEPT_ID
		      AND DEL_YN          = 'N'
		      AND SEC_EMP_ID      = #{secEmpId}
		      and b.dept_fpath_id like '%' || decode(#{searchDept, 'ALL', '', #{searchDept}) || '%'
		)
		</if>
		SELECT * FROM (
		    SELECT ROW_NUMBER() OVER( ORDER BY B.ORG_CD, B.EMP_NUM ) AS ROW_NUM
		      , COUNT(*) OVER () AS TOTAL_COUNT
		      , B.EMP_NUM AS EMP_ID
		      , B.EMP_NAM AS EMP_NM
		      , B.JTIT_CD AS JW_ID
		      , B.JTIT_NAM AS JW_NM
		      , B.ORG_CD AS DEPT_ID
		      , B.ORG_NAM AS DEPT_NM
		      /*, SUBSTR(A.PLEDGE_DT, 1, 4) AS PLEDGE_YEAR*/
		      , #{searchYear} AS PLEDGE_YEAR
		      , CASE WHEN A.PLEDGE_DT IS NOT NULL THEN TO_CHAR(TO_DATE(A.PLEDGE_DT, 'YYYYMMDD'), 'YYYY-MM-DD')
		        ELSE '' END AS PLEDGE_DT
		      , CASE
		            WHEN A.EMP_ID IS NULL
		            THEN 'N'
		            ELSE 'Y'
		        END AS PLEDGE_YN
		      , CASE WHEN C.EMP_ID IS NOT NULL THEN 'Y'
		        ELSE 'N'
		        END AS MAIL_SEND_YN
		      , TO_CHAR(C.SEND_DTM, 'YYYY-MM-DD HH24:MI:SS') AS SEND_DTM
		    FROM (SELECT * FROM IF_HR_PLEDGE WHERE SUBSTR(PLEDGE_DT, 1, 4) = #{searchYear} ) A
		      , (SELECT * FROM MDM_IF_PA_A WHERE COMPANY_CD = 1000 ) B
		      , (SELECT * FROM SC_HR_PLEDGE_MAIL WHERE PLEDGE_YEAR = #{searchYear}) C
		    WHERE A.EMP_ID(+) = B.EMP_NUM
		    AND B.EMP_NUM = C.EMP_ID(+)
			AND B.ACT_CLSS_CD = 'C'
			AND SUBSTR(B.EMP_NUM, 1, 1) NOT IN ( 'X', 'S', 'I', 'B', 'H' )
			AND B.EMP_NUM NOT IN ( '1000474', '1000122' )
		    AND B.EMP_NUM NOT LIKE '29%'
		    AND B.WRGN_CD IN ( 'B1', 'C1', 'S2' )
			AND B.ORG_CD <![CDATA[ <> ]]> 'XX00'
			/* 제외 기업문화부(10110423), 핸드볼팀(50069123), 청주경영지원실부(50076214), 제조(50076215), 개발(50076216), 마케팅/영업(50076217)*/
			AND B.ORG_CD NOT IN ( '10110423', '50069123', '50076214', '50076215', '50076216', '50076217' )
			AND B.ORG_NAM IS NOT NULL
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchDept)">
				AND B.ORG_CD IN ( SELECT DEPT_ID FROM SEC_DEPT )
			</if>
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
				AND B.ORG_NAM LIKE '%' || #{searchDeptNm} || '%'
			</if>
			<if test='!"ALL".equals(searchPledge)'>
				<if test='"Y".equals(searchPledge)'>
					AND A.EMP_ID IS NOT NULL
				</if>
				<if test='"N".equals(searchPledge)'>
					AND A.EMP_ID IS NULL
				</if>
			</if>
		)
		<if test='"Y".equals(pagingYn)'>
		WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 
		                  AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	
	<!-- 정보보호서약서 조회 엑셀다운 - securityPledgeListExcel (ASIS : dmSelectSecurityPledgeExcel ) -->
	<select id="securityPledgeListExcel" parameterType="Map" resultType="CamelHashMap">
		/* 정보보호서약서 조회 엑셀다운 - securityPledgeListExcel (ASIS : dmSelectSecurityPledgeExcel )  */
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchDept)">
		WITH SEC_DEPT AS (
			SELECT B.DEPT_ID, B.DEPT_NM
		    FROM SC_DEPT_SEC_EMP A
		       , CO_DEPT B
		    WHERE A.ENA_DEPT_ID = B.DEPT_ID
		      AND DEL_YN          = 'N'
		      AND SEC_EMP_ID      = #{secEmpId}
		      and b.dept_fpath_id like '%' || decode(#{searchDept, 'ALL', '', #{searchDept}) || '%'
		)
		</if>
	    SELECT ROW_NUMBER() OVER( ORDER BY B.ORG_CD, B.EMP_NUM ) AS ROW_NUM
	      , B.EMP_NUM AS EMP_ID
	      , B.EMP_NAM AS EMP_NM
	      , B.JTIT_CD AS JW_ID
	      , B.JTIT_NAM AS JW_NM
	      , B.ORG_CD AS DEPT_ID
	      , B.ORG_NAM AS DEPT_NM
	      , #{searchYear} AS PLEDGE_YEAR
	      , CASE WHEN A.PLEDGE_DT IS NOT NULL THEN TO_CHAR(TO_DATE(A.PLEDGE_DT, 'YYYYMMDD'), 'YYYY-MM-DD')
	        ELSE '' END AS PLEDGE_DT
	      , CASE
	            WHEN A.EMP_ID IS NULL
	            THEN '미서약'
	            ELSE '서약'
	        END AS PLEDGE_YN
	      , CASE WHEN C.EMP_ID IS NOT NULL THEN '발송'
	        ELSE '미발송'
	        END AS MAIL_SEND_YN
	      , TO_CHAR(C.SEND_DTM, 'YYYY-MM-DD HH24:MI:SS') AS SEND_DTM
	    FROM (SELECT * FROM IF_HR_PLEDGE WHERE SUBSTR(PLEDGE_DT, 1, 4) = #{searchYear} ) A
	      , (SELECT * FROM MDM_IF_PA_A WHERE COMPANY_CD = 1000 ) B
	      , (SELECT * FROM SC_HR_PLEDGE_MAIL WHERE PLEDGE_YEAR = #{searchYear}) C
	    WHERE A.EMP_ID(+) = B.EMP_NUM
	    AND B.EMP_NUM = C.EMP_ID(+)
		AND B.ACT_CLSS_CD = 'C'
		AND SUBSTR(B.EMP_NUM, 1, 1) NOT IN ( 'X', 'S', 'I', 'B', 'H' )
		AND B.EMP_NUM NOT IN ( '1000474', '1000122' )
	    AND B.EMP_NUM NOT LIKE '29%'
	    AND B.WRGN_CD IN ( 'B1', 'C1', 'S2' )
		AND B.ORG_CD  <![CDATA[ <> ]]> 'XX00'
		/* 제외 기업문화부(10110423), 핸드볼팀(50069123), 청주경영지원실부(50076214), 제조(50076215), 개발(50076216), 마케팅/영업(50076217)*/
		AND B.ORG_CD NOT IN ( '10110423', '50069123', '50076214', '50076215', '50076216', '50076217' )
		AND B.ORG_NAM IS NOT NULL
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchDept)">
			AND B.ORG_CD IN ( SELECT DEPT_ID FROM SEC_DEPT )
		</if>
		<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
			AND B.ORG_NAM LIKE '%' || #{searchDeptNm} || '%'
		</if>
		<if test='!"ALL".equals(searchPledge)'>
			<if test='"Y".equals(searchPledge)'>
				AND A.EMP_ID IS NOT NULL
			</if>
			<if test='"N".equals(searchPledge)'>
				AND A.EMP_ID IS NULL
			</if>
		</if>
	</select>
	
	<!-- 정보보호서약서 - 메일본문(코드정보) 저장 - updateMailInfo (ASIS : dmUpdateMailInfo ) -->
	<update id="updateMailInfo" parameterType="Map" >
		/* 정보보호서약서 - 메일본문(코드정보) 저장 - updateMailInfo (ASIS : dmUpdateMailInfo ) */
		UPDATE CO_CODE_D
		   SET DETL_NM = #{detlNm}
		 WHERE DETL_CD = #{detlCd}
	</update>
	
	<!-- 정보보호서약서 - 메일발송 목록저장 - updateSecurityPledgeMailList (ASIS : dmUpdateSecurityPledgeMailList ) -->
	<update id="updateSecurityPledgeMailList" parameterType="Map" >
		/* 정보보호서약서 - 메일발송 목록저장 - updateSecurityPledgeMailList (ASIS : dmUpdateSecurityPledgeMailList ) */
		MERGE INTO SC_HR_PLEDGE_MAIL A
		USING( SELECT EMP_NUM AS EMP_ID, EMP_NAM AS EMP_NM, ORG_CD AS DEPT_ID, ORG_NAM AS DEPT_NM
		       FROM MDM_IF_PA_A 
		       WHERE COMPANY_CD = '1000'
		         AND ACT_CLSS_CD = 'C'
		         AND SUBSTR(EMP_NUM, 1, 1) NOT IN ( 'X', 'S', 'I', 'B', 'H' )
		         AND EMP_NUM NOT IN ( '1000474', '1000122' )
		         AND EMP_NUM NOT LIKE '29%'
		         AND WRGN_CD IN ( 'B1', 'C1', 'S2' )
		         AND ORG_CD <![CDATA[ <> ]]> 'XX00'
		         /* 제외 기업문화부(10110423), 핸드볼팀(50069123), 청주경영지원실부(50076214), 제조(50076215), 개발(50076216), 마케팅/영업(50076217)*/
		         AND ORG_CD NOT IN ( '10110423', '50069123', '50076214', '50076215', '50076216', '50076217' )
		         AND ORG_NAM IS NOT NULL
		         AND EMP_NUM NOT IN ( SELECT EMP_ID 
		                             FROM IF_HR_PLEDGE 
		                             WHERE SUBSTR(PLEDGE_DT, 1, 4) = TO_CHAR(SYSDATE, 'YYYY') ) 
				<if test='"SEL".equals(mailType)'>
					<if test="arrItems != null and arrItems.size > 0 ">
					AND EMP_NUM IN
						<foreach item="item" index="index" collection="arrItems" open="(" close=")" separator=",">
							#{item}
						</foreach>
					</if>
				</if>                                                  
		) B
		ON ( A.PLEDGE_YEAR = TO_CHAR(SYSDATE, 'YYYY') AND A.EMP_ID = B.EMP_ID )
		WHEN MATCHED THEN
		UPDATE SET
			 A.SEND_YN = 'N'
			,A.MOD_BY = #{modBy}
			,A.MOD_DTM = SYSDATE
		WHEN NOT MATCHED THEN
		INSERT( A.PLEDGE_YEAR, A.EMP_ID, A.SEND_YN, A.CRT_BY, A.CRT_DTM, A.MOD_BY, A.MOD_DTM )
		VALUES( TO_CHAR(SYSDATE, 'YYYY'), B.EMP_ID, 'N', #{modBy}, SYSDATE, #{modBy}, SYSDATE )
	</update>
	
	
	<!-- 전사 보안담당자 관리 조회 - secrtChangeAdminList (ASIS : dmSecrtChange_Admin_List_S ) -->
	<select id="secrtChangeAdminList" parameterType="Map" resultType="CamelHashMap">
		/* 전사 보안담당자 관리 조회 - secrtChangeAdminList (ASIS : dmSecrtChange_Admin_List_S ) */
		SELECT
			TB.*
		FROM (
			SELECT ROW_NUMBER() OVER(ORDER BY CD.DEPT_NM ASC, A.EMP_ID ASC) AS ROW_NUM
					,COUNT(*) OVER () AS TOTAL_COUNT
					,A.JB_GBN AS JB_GBN 
					,A.TEAM_GBN AS TEAM_GBN
					,A.MPRS_GBN AS MPRS_GBN
					,A.COMP_ID
					,A.DEPT_ID
					,A.EMP_ID
					,C1.DETL_NM AS JB_GBN_NM
					,C2.DETL_NM AS TEAM_GBN_NM
					,C3.DETL_NM AS MPRS_GBN_NM
					,TO_CHAR(A.CRT_DTM, 'yyyy-MM-dd') AS CRT_DT
					,CE.EMP_NM
					,CASE  WHEN CE.COMP_ID = '1101000001' THEN '이천'
		                   WHEN CE.COMP_ID = '1102000001' OR CE.COMP_ID = '1105000001' OR CE.COMP_ID = '1105000001'  THEN '청주'
		                   WHEN CE.COMP_ID = '1107000001' OR CE.COMP_ID = '1108000001' THEN '분당'
		                   WHEN CE.COMP_ID = '1103000001' THEN '영동'
						  ELSE ''
					 END AS COMP_NM
					,CD.DEPT_NM
					,CD.DEPT_LV2
					,CD.DEPT_LV3
					,CD.DEPT_LV4 
					,FN_GET_JW_NM(CE.JW_ID) AS JW_NM
			FROM SC_DEPT_SEC A
			LEFT JOIN CO_CODE_D C1
				   ON A.JB_GBN = C1.DETL_CD
				  AND C1.GRP_CD = 'C071'
			LEFT JOIN CO_CODE_D C2
				  ON A.TEAM_GBN = C2.DETL_CD
				 AND C2.GRP_CD = 'C072'
			LEFT JOIN CO_CODE_D C3
				  ON A.MPRS_GBN = C3.DETL_CD
				 AND C3.GRP_CD = 'C073'
			JOIN CO_EMP CE
				ON  A.EMP_ID = CE.EMP_ID
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchUsrNm)">
					AND UPPER(CE.EMP_NM) LIKE '%' || UPPER(#{searchUsrNm}) || '%'
				</if>
			JOIN CO_DEPT CD
				ON  A.DEPT_ID = CD.DEPT_ID
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
					AND UPPER(CD.DEPT_NM) LIKE '%' || UPPER(#{searchDeptNm}) || '%'
				</if>
			WHERE NVL(A.DEL_YN,'N') = 'N'
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchJbGbn)">
				AND A.JB_GBN = #{searchJbGbn}
			</if>
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchCompId)">
				<if test='!"1108000001".equals(searchCompId)'>
					AND A.COMP_ID = #{searchCompId}
				</if>
				<if test='"1108000001".equals(searchCompId)'>
					AND ( A.COMP_ID = '1108000001' OR A.COMP_ID = '1107000001' )
				</if>
			</if>
		) TB
		<if test='"Y".equals(pagingYn)'>
		WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 
		                  AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	
	
	<!-- 전사 보안담당자 관리 엑셀다운 - secrtChangeAdminListExcel (ASIS : dmSecrtChange_Admin_Excel_S ) -->
	<select id="secrtChangeAdminListExcel" parameterType="Map" resultType="CamelHashMap">
		/* 전사 보안담당자 관리 엑셀다운 - secrtChangeAdminListExcel (ASIS : dmSecrtChange_Admin_Excel_S ) */
		SELECT NVL2(AA.EMP_NM, AA.EMP_NM || ' / ' || AA.EMP_JW_NM, '') AS EMP_NM_STR
		     , NVL2(AA.TEAM_EMP_NM, AA.TEAM_EMP_NM || ' / ' || AA.TEAM_JW_NM, '') AS TEAM_EMP_NM_STR
		     , NVL2(AA.GROUP_EMP_NM, AA.GROUP_EMP_NM || ' / ' || AA.GROUP_JW_NM, '') AS GROUP_EMP_NM_STR
		     , AA.*
		  FROM (
			SELECT
					 A.JB_GBN AS JB_GBN 
					,A.TEAM_GBN AS TEAM_GBN
					,A.MPRS_GBN AS MPRS_GBN
					,A.COMP_ID
					,A.DEPT_ID
					,A.EMP_ID
					,C1.DETL_NM AS JB_GBN_NM
					,C2.DETL_NM AS TEAM_GBN_NM
					,C3.DETL_NM AS MPRS_GBN_NM
					,TO_CHAR(A.CRT_DTM, 'yyyy-MM-dd') AS CRT_DT
					,CE.EMP_NM
					,CASE  WHEN CE.COMP_ID = '1101000001' THEN '이천'
		                   WHEN CE.COMP_ID = '1102000001' OR CE.COMP_ID = '1105000001' OR CE.COMP_ID = '1105000001'  THEN '청주'
		                   WHEN CE.COMP_ID = '1107000001' OR CE.COMP_ID = '1108000001' THEN '분당'
		                   WHEN CE.COMP_ID = '1103000001' THEN '영동'
						  ELSE ''
					 END AS COMP_NM
					,CD.DEPT_NM 
					,CD.DEPT_LV2
					,CD.DEPT_LV3
					,CD.DEPT_LV4 
					,CD.DEPT_LV5 
					,CD.DEPT_LV6 
					,CD.DEPT_LV7
		            ,FN_GET_JW_NM(CE.JW_ID) AS EMP_JW_NM
		            ,CE.TEL_NO1 AS EMP_TEL_NO
		            ,TE.EMP_ID  AS TEAM_EMP_ID
		            ,TE.EMP_NM  AS TEAM_EMP_NM
		            ,FN_GET_JW_NM(TE.JW_ID)  AS TEAM_JW_NM
		            ,TE.TEL_NO1 AS TEAM_TEL_NO
		            ,GE.EMP_ID  AS GROUP_EMP_ID
		            ,GE.EMP_NM  AS GROUP_EMP_NM
		            ,FN_GET_JW_NM(GE.JW_ID)  AS GROUP_JW_NM
		            ,GE.TEL_NO2 AS GROUP_TEL_NO
		            ,GE.TEL_NO1 AS GROUP_HP_NO
		            ,DECODE(NVL(A.RM_YN, 'N'), 'N', '', 'RM부서') AS RM_NM
					,ROW_NUMBER() OVER(ORDER BY A.CRT_DTM DESC) AS ROW_NUM
			FROM SC_DEPT_SEC A
			JOIN CO_EMP CE
				ON  A.EMP_ID = CE.EMP_ID  
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchUsrNm)">
					AND UPPER(CE.EMP_NM) LIKE '%' || UPPER(#{searchUsrNm}) || '%'
				</if>
			JOIN CO_DEPT CD
				ON  A.DEPT_ID = CD.DEPT_ID  
				<if test="not @org.springframework.util.StringUtils@isEmpty(searchDeptNm)">
					AND UPPER(CD.DEPT_NM) LIKE '%' || UPPER(#{searchDeptNm}) || '%'
				</if>
			LEFT JOIN CO_CODE_D C1
				   ON A.JB_GBN = C1.DETL_CD
				  AND C1.GRP_CD = 'C071'
			LEFT JOIN CO_CODE_D C2
				  ON A.TEAM_GBN = C2.DETL_CD
				 AND C2.GRP_CD = 'C072'
			LEFT JOIN CO_CODE_D C3
				  ON A.MPRS_GBN = C3.DETL_CD
				 AND C3.GRP_CD = 'C073'
			LEFT JOIN CO_EMP    TE
			       ON TE.EMP_ID = CD.MGR_EMP_ID
		    LEFT JOIN (SELECT BB.DEPT_ID, AA.EMP_ID, AA.EMP_NM, AA.JW_ID, AA.TEL_NO1, AA.TEL_NO2 FROM CO_EMP AA, CO_DEPT BB WHERE AA.EMP_ID = BB.MGR_EMP_ID ) GE
			       ON GE.DEPT_ID = CD.DEPT_LV4_ID
			WHERE NVL(A.DEL_YN,'N') = 'N'
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchJbGbn)">
				AND A.JB_GBN = #{searchJbGbn}
			</if>
			<if test="not @org.springframework.util.StringUtils@isEmpty(searchCompId)">
				<if test='!"1108000001".equals(searchCompId)'>
					AND A.COMP_ID = #{searchCompId}
				</if>
				<if test='"1108000001".equals(searchCompId)'>
					AND ( A.COMP_ID = '1108000001' OR A.COMP_ID = '1107000001' )
				</if>
			</if>
		) AA
	</select>
	
	
	<!-- 전사 보안담당자 정보 삭제 - secrtChangeAdminDelete (ASIS : dmSecrtChange_Admin_Multi_D ) -->
	<delete id="secrtChangeAdminDelete" parameterType="Map" >
		DELETE FROM SC_DEPT_SEC
		 WHERE EMP_ID  = #{secEmpId}
		   AND DEPT_ID = #{secDeptId}
	</delete>
	
	<!-- 전사 보안담당자 직원정보 삭제 - secrtChangeAdminEmpDelete (ASIS : dmSecrtChange_Admin_Multi_Emp_D ) -->
	<delete id="secrtChangeAdminEmpDelete" parameterType="Map" >
		DELETE FROM SC_DEPT_SEC_EMP
		 WHERE SEC_EMP_ID  = #{secEmpId}
		   AND SEC_DEPT_ID = #{secDeptId}
	</delete>
	
	<!-- 전사 보안담당자 관리 > 부서검색 - secrtDeptDuptyDeptList (ASIS : dmSecrtDeptDupty_PopDeptList_S ) -->
	<select id="secrtDeptDuptyDeptList" parameterType="Map" resultType="CamelHashMap">
		/* 전사 보안담당자 관리 > 부서검색 - secrtDeptDuptyDeptList (ASIS : dmSecrtDeptDupty_PopDeptList_S ) */
		SELECT T.*
		  FROM (
			SELECT 
			    ROW_NUMBER() OVER ( ORDER BY A.DEPT_NM ASC ) AS ROW_NUM 
			   ,COUNT(*) OVER () AS TOTAL_COUNT 
			   ,A.DEPT_ID
			   ,A.DEPT_NM
			   ,A.COMP_ID
			   ,B.COMP_NM
			   ,DECODE(NVL(C.DEPT_ID, '*'), '*', 'N', 'Y') AS IS_DEPT_YN
			FROM CO_DEPT A
			JOIN CO_COMP B
			  ON A.COMP_ID = B.COMP_ID
			LEFT OUTER JOIN (  
				SELECT COMP_ID, DEPT_ID 
				  FROM SC_DEPT_SEC 
				 WHERE NVL(DEL_YN, 'N') = 'N' 
				   AND EMP_ID = #{secEmpId} 
				 GROUP BY COMP_ID, DEPT_ID 
				) C
			  ON A.COMP_ID = C.COMP_ID
			 AND A.DEPT_ID = C.DEPT_ID
			WHERE NVL(A.USE_YN, 'N') = 'Y'
			AND UPPER(A.DEPT_NM) LIKE '%' || UPPER(#{searchDeptNm}) || '%'
		) T
		<if test='"Y".equals(pagingYn)'>
		WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 
		                  AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	

	<!-- 전사 보안담당자 관리 > 등록  > Step01. Insert SC_DEPT_SEC - secrtChangeAdminScDeptSecInsert (ASIS : dmSecrtChange_Admin_ScDeptSec_I ) -->
	<insert id="secrtChangeAdminScDeptSecInsert" parameterType="Map" >
		/* 전사 보안담당자 관리 > 등록  > Step01. Insert SC_DEPT_SEC - secrtChangeAdminScDeptSecInsert */
		INSERT INTO SC_DEPT_SEC (
			SC_DEPT_SEC_NO
			, COMP_ID
			, DEPT_ID
			, JW_ID
			, EMP_ID
			, DEL_YN
			, AC_IP
			, CRT_BY
			, CRT_DTM
			, JB_GBN
			, TEAM_GBN
			, MPRS_GBN
			, RM_YN
		) VALUES (
			SEQ_SC_DEPT_SEC_NO.NEXTVAL
			, #{updSecCompId}
			, #{updSecDeptId}
			, #{secJwId}
			, #{secEmpId}
			, 'N'
			, #{acIp}
			, #{modBy}
			, SYSDATE
			, #{jbGbn}
			, #{teamGbn}
			, #{mprsGbn}
			, #{rmYn}
		)
	</insert>
	
	
	<!-- 전사 보안담당자 관리 > 등록  > Step02. Delete SC_DEPT_SEC_EMP - secrtChangeAdminScDeptSecEmpDelete (ASIS : dmSecrtChange_Admin_ScDeptSecEmp_D2 ) -->
	<delete id="secrtChangeAdminScDeptSecEmpDelete" parameterType="Map" >
		/* 전사 보안담당자 관리 > 등록  > Step02. Delete SC_DEPT_SEC_EMP - secrtChangeAdminScDeptSecEmpDelete */
		DELETE FROM SC_DEPT_SEC_EMP
		WHERE SEC_COMP_ID = #{updSecCompId}
		AND SEC_DEPT_ID = #{updSecDeptId}
		AND SEC_EMP_ID = #{secEmpId}
	</delete>
	
	<!-- 전사 보안담당자 관리 > 등록  > Step03. Insert SC_DEPT_SEC_EMP - secrtChangeAdminScDeptSecEmpInsert (ASIS : dmSecrtChange_Admin_ScDeptSecEmp_I ) -->
	<insert id="secrtChangeAdminScDeptSecEmpInsert" parameterType="Map" >
		/* 전사 보안담당자 관리 > 등록  > Step03. Insert SC_DEPT_SEC_EMP - secrtChangeAdminScDeptSecEmpInsert */
		INSERT INTO SC_DEPT_SEC_EMP (
			SEC_COMP_ID
			, SEC_DEPT_ID
			, SEC_EMP_ID
			, ENA_COMP_ID
			, ENA_DEPT_ID
			, DEL_YN
			, AC_IP
			, CRT_BY
			, CRT_DTM
			, MOD_BY
			, MOD_DTM
		) 
		SELECT 
		     #{updSecCompId}
		    ,#{updSecDeptId}
		    ,#{secEmpId}
		    ,A.COMP_ID
		    ,A.DEPT_ID
		    ,'N'
		    ,#{acIp}
		    ,#{crtBy}
		    ,SYSDATE
		    ,#{crtBy}
		    ,SYSDATE
		FROM CO_DEPT A
		WHERE A.DEPT_ID = #{enaDeptId}
	</insert>
	
	<!-- 전사 보안담당자 관리 > 등록  > Step04. MERGE CO_EMP_AUTH - secrtChangeSecrtEmpAuthInsert (ASIS : dmSecrtChange_New_Secrt_Emp_Auth_I ) -->
	<insert id="secrtChangeSecrtEmpAuthInsert" parameterType="Map" >
		/* 전사 보안담당자 관리 > 등록  > Step04. MERGE CO_EMP_AUTH - secrtChangeSecrtEmpAuthInsert  */
		MERGE INTO CO_EMP_AUTH A USING
		(
		    SELECT #{secEmpId} AS EMP_ID
		      , '11'         AS AUTH_ID 
		      , #{crtBy}     AS CRT_BY
		      , SYSDATE      AS CRT_DTM
		      , #{crtBy}     AS MOD_BY
		      , SYSDATE      AS MOD_DTM
		    FROM DUAL
		) B 
		ON ( A.EMP_ID = B.EMP_ID AND A.AUTH_ID = B.AUTH_ID )
		WHEN NOT MATCHED THEN
		    INSERT
		        (
		            A.EMP_ID
		          , A.AUTH_ID
		          , A.CRT_BY
		          , A.CRT_DTM
		          , A.MOD_BY
		          , A.MOD_DTM
		        )
		        VALUES
		        (
		            B.EMP_ID
		          , B.AUTH_ID
		          , B.CRT_BY
		          , B.CRT_DTM
		          , B.MOD_BY
		          , B.MOD_DTM
		        )
	</insert>
	
	<!-- 전사 보안담당자 관리 > 관리부서Tree - secrtDeptDuptyDeptTreeList (ASIS : dmSecrtDeptDupty_DeptList ) -->
	<select id="secrtDeptDuptyDeptTreeList" parameterType="Map" resultType="CamelHashMap">
		/* 전사 보안담당자 관리 > 관리부서Tree - secrtDeptDuptyDeptTreeList (ASIS : dmSecrtDeptDupty_DeptList ) */
		SELECT  A.ORG_NAM AS DEPT_NM
			  , A.ORG_CD AS DEPT_ID
			  /*, B.ORG_UN_CD */
			  , A.PRNT_ORG_CD AS UPDEPT_ID
			  , LEVEL - 1 AS DEPTH
			  , (SELECT COUNT(1)
				  FROM TBL_PT_ORG
				 WHERE PRNT_ORG_CD = A.ORG_CD
				 ) AS SUB_MENU_COUNT  
			<if test="not @org.springframework.util.StringUtils@isEmpty(secEmpId)">
			  , DECODE(NVL(SE.ENA_DEPT_ID, '*'), '*', '', 'Y') AS CHK_YN
			  , DECODE(NVL(OP.DEPT_ID, '*'), '*', '', 'Y') AS OPEN_YN	
			</if>	 
			<if test="@org.springframework.util.StringUtils@isEmpty(secEmpId)">
			  , 'N' AS CHK_YN
			  , 'N' AS OPEN_YN
			</if>
		   FROM TBL_PT_ORG A 
		   LEFT OUTER JOIN CO_DEPT B 
		                ON A.ORG_CD = B.DEPT_ID
			<if test="not @org.springframework.util.StringUtils@isEmpty(secEmpId)">
			  LEFT OUTER JOIN SC_DEPT_SEC_EMP SE
				    ON SE.SEC_DEPT_ID = #{secDeptId}
				   AND SE.SEC_EMP_ID  = #{secEmpId}
				   AND SE.ENA_DEPT_ID = B.DEPT_ID
			  LEFT OUTER JOIN (	
					SELECT
						DISTINCT B.DEPT_ID
					FROM CO_DEPT B
					JOIN (
						SELECT DISTINCT B.UPDEPT_ID AS DEPT_ID
						FROM SC_DEPT_SEC_EMP A, CO_DEPT B
						WHERE A.SEC_DEPT_ID = #{secDeptId}
						AND A.SEC_EMP_ID    = #{secEmpId}
						AND A.ENA_DEPT_ID   = B.DEPT_ID
					) A
					ON 1=1
					START WITH  B.DEPT_ID = A.DEPT_ID
					CONNECT BY B.DEPT_ID  = PRIOR UPDEPT_ID  
				) OP
				ON B.DEPT_ID = OP.DEPT_ID
			</if>
		   WHERE B.USE_YN = 'Y'                  
		     AND  B.DEPT_ID NOT IN ('10120881','10120882', '10120813', 'XB20', 'XB21', 'XB22', 'XB23', 'XB24') 
		START WITH A.PRNT_ORG_CD = '10103709'
		CONNECT BY PRIOR A.ORG_CD = A.PRNT_ORG_CD 
		   ORDER SIBLINGS BY A.ORG_NAM
	</select>
	
	
	<!-- 전사 보안담당자 관리 > 상세정보 - secrtChangeAdminView (ASIS : dmSecrtChange_Admin_View_S ) -->
	<select id="secrtChangeAdminView" parameterType="Map" resultType="CamelHashMap">
		/* 전사 보안담당자 관리 > 상세정보 - secrtChangeAdminView (ASIS : dmSecrtChange_Admin_View_S ) */
		SELECT 
			 CE.EMP_NM
			,CD.DEPT_NM
			,SO.DEPT_NM AS SO_DEPT_NM
			,FN_GET_JW_NM(A.JW_ID) AS JW_NM
			,A.EMP_ID
			,A.JB_GBN
			,A.TEAM_GBN
			,A.MPRS_GBN
			,C1.DETL_NM AS JB_GBN_NM
			,C2.DETL_NM AS TEAM_GBN_NM
			,C3.DETL_NM AS MPRS_GBN_NM  
			,CASE WHEN A.COMP_ID = '1101000001' THEN '이천'
				  WHEN A.COMP_ID = '1102000001' THEN '청주'
				  WHEN A.COMP_ID = '1107000001' OR  A.COMP_ID = '1108000001' THEN '분당'
				  WHEN A.COMP_ID = '1103000001' THEN '영동'
				  ELSE ''
			 END AS COMP_NM
			,NVL(A.RM_YN, 'N') AS RM_YN
		FROM  SC_DEPT_SEC A
		JOIN CO_EMP CE
		   ON A.EMP_ID = CE.EMP_ID 
		JOIN CO_DEPT CD
		   ON A.DEPT_ID = CD.DEPT_ID
		JOIN CO_DEPT SO
		   ON CE.DEPT_ID = SO.DEPT_ID   
		LEFT JOIN CO_CODE_D C1
		       ON A.JB_GBN = C1.DETL_CD
		      AND C1.GRP_CD = 'C071'
		LEFT JOIN CO_CODE_D C2
		      ON A.TEAM_GBN = C2.DETL_CD
		     AND C2.GRP_CD = 'C072'
		LEFT JOIN CO_CODE_D C3
		      ON A.MPRS_GBN = C3.DETL_CD
		     AND C3.GRP_CD = 'C073'   
		WHERE A.COMP_ID = #{secCompId}
		AND A.DEPT_ID = #{secDeptId}
		AND A.EMP_ID = #{secEmpId}
		AND NVL(A.DEL_YN,'N') = 'N'
		AND ROWNUM = 1
	</select>
	
	<!-- 전사 보안담당자 관리 > 수정  > Step01. Update SC_DEPT_SEC - secrtChangeAdminScDeptSecUpdate (ASIS : dmSecrtChange_Admin_ScDeptSec_U ) -->
	<update id="secrtChangeAdminScDeptSecUpdate" parameterType="Map" >
		/* 전사 보안담당자 관리 > 수정  > Step01. Update SC_DEPT_SEC - secrtChangeAdminScDeptSecUpdate */
		UPDATE SC_DEPT_SEC
		SET JB_GBN   = #{jbGbn}
		   ,TEAM_GBN = #{teamGbn}
		   ,MPRS_GBN = #{mprsGbn}
		   ,RM_YN    = #{rmYn}
		   ,MOD_BY   = #{modBy}
		   ,MOD_DTM  = SYSDATE
		   ,DEPT_ID  = #{updSecDeptId}
		   ,COMP_ID  = #{updSecCompId}
		WHERE DEPT_ID = #{secDeptId}   
		  AND EMP_ID  = #{secEmpId}
	</update>
	
	<!-- 전사 보안담당자 관리 > 수정  > Step02. Delete SC_DEPT_SEC_EMP - secrtChangeAdminScDeptSecEmpDelete2 (ASIS : dmSecrtChange_Admin_ScDeptSecEmp_D2 ) -->
	<delete id="secrtChangeAdminScDeptSecEmpDelete2" parameterType="Map" >
		/* 전사 보안담당자 관리 > 등록  > Step02. Delete SC_DEPT_SEC_EMP - secrtChangeAdminScDeptSecEmpDelete2 */
		DELETE FROM SC_DEPT_SEC_EMP
		WHERE SEC_COMP_ID = #{secCompId}
		AND SEC_DEPT_ID = #{secDeptId}
		AND SEC_EMP_ID = #{secEmpId}
	</delete>
	
	
	<!-- 보안점수 관리 조회 - secureEvalStatusAdminList (ASIS : dmSecureEval_StatusList ) -->
	<select id="secureEvalStatusAdminList" parameterType="Map" resultType="CamelHashMap">
		/* 보안점수 관리 조회 - secureEvalStatusAdminList */
		SELECT TB.*
			<![CDATA[
		     , CASE 
		     	WHEN NVL(TB.TEAM_CNT,0) <> 0 AND NVL(TB.TEAM_RANK,0) <> 0 AND TB.TEAM_RANK <= TB.TEAM_CNT 
		     	THEN ROUND((TB.TEAM_RANK / TB.TEAM_CNT * 100),2) 
		     	ELSE 100.00 
		       END AS RYUL
		    ]]>   
		FROM (
				SELECT A.EVAL_YEAR
					 , A.EVAL_GB
					 , (SELECT DETL_NM FROM CO_CODE_D WHERE GRP_CD = 'C069' AND DETL_CD = A.EVAL_GB) AS EVAL_GB_NM
					 , A.DEPT_ID
					 , B.DEPT_NM
		             , (SELECT SUM(SCORE)
		                  FROM SC_SECURE_EVAL_ITEM 
		                 WHERE EVAL_YEAR  = A.EVAL_YEAR
		                   AND EVAL_GB    = A.EVAL_GB
		                   AND USE_YN     = 'Y'
		                   AND GAGAM_ITEM = 'N'  
		               ) AS EVAL_SCORE
					 , A.TOTAL_SCORE
		             , RANK() OVER ( PARTITION BY A.EVAL_YEAR, A.EVAL_GB ORDER BY TOTAL_SCORE DESC )          AS TEAM_RANK
		             , COUNT(DECODE(A.CONFIRM_YN, 'Y', 1, NULL)) OVER ( PARTITION BY A.EVAL_YEAR, A.EVAL_GB ) AS TEAM_CNT
					 , FN_GET_EVA_LV(TO_CHAR(A.TOTAL_SCORE)) AS EVA_LV
					 , A.CONFIRM_YN
					 , DECODE(A.CONFIRM_YN, 'X', '평가전', 'N', '미확정', '확정') AS CONFIRM_YN_NM
					 , ROW_NUMBER() OVER(ORDER BY A.EVAL_YEAR, A.EVAL_GB)  AS ROW_NUM
					 , COUNT(*) OVER () AS TOTAL_COUNT
				  FROM SC_EVAL_TARGET_DEPT A
					 , CO_DEPT             B
				 WHERE A.DEPT_ID = B.DEPT_ID  
				 <if test="not @org.springframework.util.StringUtils@isEmpty(searchEvalYear)">
				 	AND A.EVAL_YEAR = #{searchEvalYear}
				 </if>
				 <if test="not @org.springframework.util.StringUtils@isEmpty(searchEvalGb)">
				 	AND A.EVAL_GB = #{searchEvalGb}
				 </if>  
				 <if test="not @org.springframework.util.StringUtils@isEmpty(searchConfirmYn)">
				 	AND A.CONFIRM_YN = #{searchConfirmYn}
				 </if>
		    )TB
		<if test='"Y".equals(pagingYn)'>
		WHERE ROW_NUM BETWEEN ( (#{currentPage} - 1) * #{rowPerPage}) + 1 
		                  AND ( (#{currentPage} - 1) * #{rowPerPage}) + #{rowPerPage}
		</if>
	</select>
	
	<!-- 보안점수 관리 조회 엑셀다운 - secureEvalStatusAdminListExcel (ASIS : dmSecureEval_StatusListExcel ) -->
	<select id="secureEvalStatusAdminListExcel" parameterType="Map" resultType="CamelHashMap">
		/* 보안점수 관리 조회 - secureEvalStatusAdminListExcel (ASIS : dmSecureEval_StatusListExcel ) */
		WITH TB
		     AS (
				SELECT A.EVAL_YEAR
					 , A.EVAL_GB
					 , (SELECT DETL_NM FROM CO_CODE_D WHERE GRP_CD = 'C069' AND DETL_CD = A.EVAL_GB) AS EVAL_GB_NM
					 , A.DEPT_ID
					 , B.DEPT_NM
					 , B.DEPT_LV2
					 , B.DEPT_LV3
					 , B.DEPT_LV4
					 , B.DEPT_LV5
					 , B.DEPT_LV6
					 , B.DEPT_LV7
					 , A.TOTAL_SCORE
		             , RANK() OVER(PARTITION BY A.EVAL_YEAR, A.EVAL_GB ORDER BY TOTAL_SCORE DESC) AS T_RANK
		             , COUNT(DECODE(A.CONFIRM_YN, 'Y', 1, NULL)) OVER (PARTITION BY A.EVAL_YEAR, A.EVAL_GB) AS T_CNT
					 , SUBSTR(FN_GET_EVA_LV(TO_CHAR(A.TOTAL_SCORE)), 1,2) AS EVA_LV
					 , A.CONFIRM_YN
					 , DECODE(A.CONFIRM_YN, 'X', '평가전', 'N', '미확정', '확정') AS CONFIRM_YN_NM
		             , (SELECT LISTAGG( NVL(D.SCORE,'0'), ',') WITHIN GROUP (ORDER BY C.SORT_SEQ)
		                  FROM  SC_SECURE_EVAL_ITEM C
		                      , SC_EVAL_RESULT      D
		                 WHERE C.EVAL_YEAR = D.EVAL_YEAR(+)     
		                   AND C.EVAL_GB   = D.EVAL_GB(+)
		                   AND C.ITEM_SEQ  = D.ITEM_SEQ(+)
		                   AND C.EVAL_YEAR = A.EVAL_YEAR
		                   AND C.EVAL_GB = A.EVAL_GB
		                   AND D.DEPT_ID(+) = A.DEPT_ID
		               ) AS ITEM_SCORE_LIST
				  FROM SC_EVAL_TARGET_DEPT A
					 , CO_DEPT             B
				 WHERE A.DEPT_ID = B.DEPT_ID
				 <if test="not @org.springframework.util.StringUtils@isEmpty(searchEvalYear)">
				 	AND A.EVAL_YEAR = #{searchEvalYear}
				 </if>  
				 <if test="not @org.springframework.util.StringUtils@isEmpty(searchEvalGb)">
				 	AND A.EVAL_GB = #{searchEvalGb}
				 </if>
				 <if test="not @org.springframework.util.StringUtils@isEmpty(searchConfirmYn)">
				 	AND A.CONFIRM_YN = #{searchConfirmYn}
				 </if>
				 )
		<![CDATA[		 
		SELECT TB.* 
		     , DECODE(TB.CONFIRM_YN,  'Y', TB.T_RANK || ' 위 / ' || TB.T_CNT || ' 팀', '') AS TEAM_RANK
		     , DECODE(TB.CONFIRM_YN,  'Y', 
		     	CASE 
		     		WHEN NVL(TB.T_CNT, 0) <> 0 AND NVL(TB.T_RANK, 0) <> 0 AND TB.T_RANK <= TB.T_CNT 
		     		THEN ROUND((TB.T_RANK / TB.T_CNT * 100), 2) 
		     		ELSE 100.00 
		     	END ,'') AS RYUL
		  FROM TB
		]]>
	</select>
	
	<!-- 보안점수 관리 조회 > 삭제 - secureEvalStatusDelete (ASIS : dmSecureEval_StatusDelete ) -->
	<delete id="secureEvalStatusDelete" parameterType="Map" >
		/* 보안점수 관리 조회 > 삭제 - secureEvalStatusDelete (ASIS : dmSecureEval_StatusDelete ) */
		DELETE FROM SC_EVAL_TARGET_DEPT
		 WHERE EVAL_YEAR  = #{evalYear}
		   AND EVAL_GB    = #{evalGb}
		   AND DEPT_ID    = #{deptId}
	</delete>
	
	<!-- 보안점수 관리 조회 > 확정/확정취소 - secureEvalStatusModify (ASIS : dmSecureEval_StatusModify ) -->
	<update id="secureEvalStatusModify"  parameterType="Map" >
		/* 보안점수 관리 조회 > 확정/확정취소 - secureEvalStatusModify (ASIS : dmSecureEval_StatusModify ) */
		UPDATE SC_EVAL_TARGET_DEPT
		   SET CONFIRM_YN = #{confirmYn}
		 WHERE EVAL_YEAR  = #{evalYear}
		   AND EVAL_GB    = #{evalGb}
		   AND DEPT_ID    = #{deptId}
	</update>
	
	<!-- 보안점수 관리 > 평가항목 List - secureEvalItemTargetList (ASIS : dmSecureEval_EvalItemTargetList ) -->
	<select id="secureEvalItemTargetList" parameterType="Map" resultType="CamelHashMap">
		/* 보안점수 관리 > 평가항목 List - secureEvalItemTargetList (ASIS : dmSecureEval_EvalItemTargetList ) */
		SELECT A.EVAL_YEAR
		     , A.EVAL_GB
		     , (SELECT DETL_NM FROM CO_CODE_D WHERE GRP_CD = 'C069' AND DETL_CD = A.EVAL_GB) AS EVAL_GB_NM
		     , A.ITEM_SEQ
		     , A.SUBJECT
		     , A.EVAL_STANDARD
		     , DECODE(A.GAGAM_ITEM, 'Y', '예', '') AS GAGAM_ITEM
		     , A.SCORE
		     , ( SELECT NVL(SCORE,'') 
		           FROM SC_EVAL_RESULT 
		          WHERE EVAL_YEAR = A.EVAL_YEAR 
		            AND EVAL_GB   = A.EVAL_GB 
		            AND ITEM_SEQ  = A.ITEM_SEQ 
		            AND DEPT_ID   = #{deptId}
		       ) AS RESULT_SCORE
		     , SUM(NVL(A.SCORE, 0)) OVER () AS TOTAL_SUM
		  FROM SC_SECURE_EVAL_ITEM A
		 WHERE A.EVAL_YEAR = #{evalYear}
		   AND A.EVAL_GB   = #{evalGb}
		ORDER BY SORT_SEQ
	</select>
	
	<!-- 보안점수 관리 > 평가결과저장  - Step01. Insert/Update SC_EVAL_RESULT - secureEvalResultUpdate (ASIS : dmSecureEval_EvalResultAdd ) -->
	<insert id="secureEvalResultUpdate" parameterType="Map" >
		/* 보안점수 관리 > 평가결과저장  - Step01. Insert/Update SC_EVAL_RESULT - secureEvalResultUpdate (ASIS : dmSecureEval_EvalResultAdd ) */
		MERGE INTO SC_EVAL_RESULT 
		      USING DUAL 
		      ON ( EVAL_YEAR = #{evalYear} AND EVAL_GB = #{evalGb} AND DEPT_ID = #{deptId} AND ITEM_SEQ = #{itemSeq} )
		WHEN MATCHED THEN
		    UPDATE SET 
			    SCORE         = #{score}
		WHEN NOT MATCHED THEN
		    INSERT ( EVAL_YEAR, EVAL_GB, DEPT_ID, ITEM_SEQ, SCORE )
		    VALUES ( #{evalYear}, #{evalGb}, #{deptId}, #{itemSeq}, #{score} )
	</insert>
	
	<!-- 보안점수 관리 > 평가결과저장  - Step02. Update SC_EVAL_TARGET_DEPT - secureEvalTotalScore (ASIS : dmSecureEval_EvalTotalScore ) -->
	<update id="secureEvalTotalScore" parameterType="Map" >
		/* 보안점수 관리 > 평가결과저장  - Step02. Update SC_EVAL_TARGET_DEPT - secureEvalTotalScore (ASIS : dmSecureEval_EvalTotalScore ) */
		UPDATE SC_EVAL_TARGET_DEPT
		   SET TOTAL_SCORE = #{totalScore}
		     , CONFIRM_YN  = 'N'
		 WHERE EVAL_YEAR   = #{evalYear}
		   AND EVAL_GB     = #{evalGb}
		   AND DEPT_ID     = #{deptId}
	</update>
	
		
	
	
	
	
	
	
	
</mapper>	











